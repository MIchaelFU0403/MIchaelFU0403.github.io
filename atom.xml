<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael&#39;s Blog</title>
  
  <subtitle>author: Michael fu</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://michaelfu0403.github.io/"/>
  <updated>2020-04-23T14:31:54.378Z</updated>
  <id>https://michaelfu0403.github.io/</id>
  
  <author>
    <name>Michael Fu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件架构技术课堂笔记1</title>
    <link href="https://michaelfu0403.github.io/2020/04/23/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B02/"/>
    <id>https://michaelfu0403.github.io/2020/04/23/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B02/</id>
    <published>2020-04-23T14:25:31.000Z</published>
    <updated>2020-04-23T14:31:54.378Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="软件架构技术课堂笔记2">软件架构技术课堂笔记2</span></h3><p>&lt;会存在很多问题，日后的学习会进行更正&gt;</p><h3><span id="spring-框架">Spring 框架：</span></h3><blockquote><p>Spring是分层的javaEE应用一站式轻量级开源框架，由Rod Johnson创建；Spring是为简了化企业级系统开发而诞生的；使用Spring，可以用简单的JavaBeans来实现那些EJB的功能。<br>如果一个系统不需要分布式计算或声明式事务支持，EJB并不是最好的选择；Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。<br>Spring的核心是控制反转（IoC）和面向切面编程（AOP）。提供了展现层SpringMVC、持久层SpringJDBC以及业务层是否管理等众多企业级应用技术。Spring IoC和AOP能让代码很好的分层和解耦，从而提高可维护性和可扩展性，便于测试</p></blockquote><a id="more"></a><h3><span id="spring-模块概述">Spring 模块概述：</span></h3><h3><span id="核心容器beanfactory">核心容器(BeanFactory)</span></h3><blockquote><p>核心容器提供 Spring 框架的基本功能(Spring Core)。<br>核心容器的主要组件是 <strong>BeanFactory</strong> ，它是工厂模式的实现，作为<strong>IoC容器</strong>管理Bean。<br><strong>BeanFactory</strong> 使用<strong>控制反转（IOC） 模式</strong>将应用程序的配置和依赖性规范与实际的应用程序代码分开，将类和类之间的依赖从代码中脱离出来，用配置的方式进行依赖关系描述，由IoC容器负责依赖类之间的创建、拼接、管理、获取等工作。 BeanFactory接口是Spring框架的核心接口，实现了容器的许多核心功能。<br><strong>相关jar包：spring-core.jar，spring-beans.jar</strong></p></blockquote><hr><h4><span id="上下文applicationcontext">上下文(ApplicationContext)：</span></h4><p>Spring上下文是一个配置文件，向 Spring框架提供上下文信息。<br><strong>ApplicationContext</strong>是Context模块的核心接口。可用于扫描<br><strong>相关jar包：spring-context.jar</strong></p><hr><h4><span id="spring-ioc容器">Spring IoC容器：</span></h4><blockquote><p><strong>BeanFactory是Spring框架最核心接口</strong>，BeanFactory使得管理不同类型的Java对象成为可能，应用上下文（ApplicationContext）建立在BeanFactory基础上，提供了更多面向应用的功能。一般称BeanFactory为<strong>IoC容器</strong>，称ApplicationContext为<strong>应用上下文（有时也称为Spring容器）</strong>。<br><strong>从用途上划分</strong>，BeanFactory是Spring框架的基础设施。而其子类ApplicationContext由BeanFactory派生而来，提供了更多面向实际应用的功能。<br>创建ApplicationContext对象，代表一个Spring控制反转容器启动。</p></blockquote><hr><h4><span id="applicationcontext的几种常用实现">ApplicationContext的几种常用实现：</span></h4><ol><li><strong>ClassPathXmlApplicationContext</strong>：从类路径下的一个或多个XML文件中加载上下文定义，即加载Bean定义的信息。把应用上下文的定义文件作为类资源。（对应的XML名称）</li><li><strong>FileSystemXmlApplicationContext</strong>：从文件系统中的一个或多个XMl文件中加载上下文定义，即Bean定义的信息。(绝对路径)</li><li><strong>AnnotationConfigApplicationContext</strong>:从一个或多个基于Java的配置类中加载Spring应用上下文。</li></ol><hr><h4><span id="spring-ioc容器启动实例化">Spring IoC容器启动（实例化）</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);  &#x2F;&#x2F;applicationContext为对应配置文件的名字。子类实现父类接口</span><br></pre></td></tr></table></figure><hr><h3><span id="spring容器-bean配置-bean实现类及应用程序四者关系">Spring容器、Bean配置、Bean实现类及应用程序四者关系</span></h3><p><img src="/images/static/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%842_1.png" alt="四者关系"></p><ol><li><strong>Bean.XML中记录Bean的实现及依赖关系</strong></li><li>Spring容器根据各种形式的Bean配置信息在<strong>容器内部建立Bean定义注册表，根据注册表加载、利用Java语言的反射功能实例化实例化Bean。</strong></li><li>并建立Bean和Bean的<strong>依赖关系</strong>。</li><li>最后将准备就绪的Bean放到<strong>Bean缓存池</strong>中，<strong>供外层应用调用</strong>。</li><li>Spring管理的Java对象称为<strong>“beans”。</strong></li></ol><p>Spring装配Bean前先要创建XML文件。</p><ul><li><p>applicationContext.xml 文件中要有<strong>官方给出的bean详细配置</strong></p></li><li><p>除此之外，这里在用到注解时，也要通过<strong>context告知spring容器在创建容器对象时要扫描的包。</strong></p><p><img src="/images/static/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%842_2.png" alt="四者关系"></p></li></ul><hr><h3><span id="spring的依赖注入di的具体流程">Spring的依赖注入DI的具体流程：</span></h3><ol><li>首先先在service层中建立一个接口叫AccountService</li><li>在同路径下建立impl （implement类）AccountServiceImpl去实现AccountService接口，并重写AccountService中的方法。</li><li>在src/com的路径下建立XML配置文件 bean.xml：进行bean的配置信息设置，用于在AccountServiceTest测试类中实现对象的实例化。<br>代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;accountService&quot; </span><br><span class="line">class&#x3D;&quot;com.service.impl.AccountServiceImpl&quot;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></li><li>AccountServiceTest中首先先实例化spring容器AccountServiceTest。之后<br>通过ApplicationContext的getBean方法获取一定名字的bean。通过强转或字节码的形式实例化对象。<br>代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">AccountService as &#x3D; ac.getBean(&quot;accountService&quot;, AccountService.class);</span><br></pre></td></tr></table></figure></li></ol><hr><h3><span id="spring中的依赖注入di可以注入的类型">Spring中的依赖注入(DI)可以注入的类型：</span></h3><p>1.基本类和String<br>2.其他bean类型(必须在注解文件中或者注解配置过的bean)：<br>//例如date类型： 用ref将date类的实例注入到accountService中，其他同上节课,value=“要注入的值”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;accountService1&quot; class&#x3D;&quot;com.service.impl.AccountService_1&quot;&gt;  &lt;!--class为类的位置--&gt;</span><br><span class="line">    &lt;constructor-arg name&#x3D;&quot;birthday&quot; ref&#x3D;&quot;now&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;now&quot; class&#x3D;&quot;java.util.Date&quot;&#x2F;&gt; &lt;!-- now  &#x3D;  new Date() --&gt;</span><br></pre></td></tr></table></figure><p>3.复杂类型(集合类型)<br>复杂类型注入：<br>    1. 标签：list array set(父集标签：list array set。子集标签：value)<br>    2.  map示例：</p><pre><code>&lt;property name=&quot;myMap&quot;&gt;    &lt;map&gt;     &lt;entry key=&quot;testA&quot; value=&quot;aaa&quot;/&gt;        &lt;entry key=&quot;testB&quot;&gt;            &lt;value&gt;bbb&lt;/value&gt;        &lt;/entry&gt;     &lt;/map&gt; &lt;/property&gt;</code></pre><p>3.Properties示例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;myProps&quot;&gt; &lt;props&gt;</span><br><span class="line">        &lt;prop key&#x3D;&quot;testC&quot;&gt;ccc&lt;&#x2F;prop&gt;</span><br><span class="line">        &lt;prop key&#x3D;&quot;testD&quot;&gt;ddd&lt;&#x2F;prop&gt; &lt;&#x2F;props&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>优势：结构相同的，标签可以进行互换</li></ol><hr><h3><span id="三种依赖注入方式">三种依赖注入方式：</span></h3><p>xml：</p><ul><li>使用构造函数<br>标签<code>constructor-arg</code></li></ul><p><strong>构造函数注入</strong>是除<strong>属性注入</strong>之外的另一种常用注入方式，他保证一些必要的属性在Bean实例化时就得到设置，并<strong>确保Bean实例在实例化</strong>后就可以使用。<br><strong>使用构造函数注入的前提是Bean必须提供带参的构造函数</strong>。    </p><hr><ul><li>set方法(属性注入):</li></ul><ol><li><p>实际应用中最常采用的注入方式。<br>通过SetXxx（）方法注入Bean的属性值或依赖对象，属性注入要求Bean提供一个默认的构造函数，并为需要注入的属性提供对应的Setter方法。</p><ol start="2"><li>涉及的标签：property</li><li>出现的位置：bean标签内部</li><li>标签的属性<pre><code>*   name:用于指定注入时所调用的set方法名称*  value:用于提供基本类型和String类型的数据*  ref：用于指定其他bean类型数据</code></pre></li><li>寻找类中set方法:<br>set/get   set - 属性名称 :将属性名称的开头字母转换成小写</li><li>优势：创建对象时没有明确的限制，可直接赋值设置也可以使用默认的构造方法。</li><li>弊端： 如果有某成员必须有值，则获取对象时可能set方法没有执行。<br>例子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id &#x3D;&quot;accountService2&quot; class&#x3D;&quot;com.service.impl.AccountService_2&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;李四&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;age&quot; value &#x3D;&quot;20&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;birthday&quot; ref&#x3D;&quot;now&quot;&#x2F;&gt; </span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>注意：setXX要与name 一致</li></ol></li></ol><hr><ul><li>注解：根据提供的注解.</li></ul><p><strong>(Component,   Controller,   Service,   Repository)</strong></p><ul><li>作用：和xml中配置bean作用功能一样</li><li>属性：value—和bean中id的作用一样，标识作用</li><li>位置：类上(接口的实现类上)  如下所示： </li></ul><p><code>@Service(&quot;accountService&quot;)</code><br><code>//@Component(&quot;accountService&quot;)</code><br><code>public class AccountService_4 implements AccountService{}</code></p><p>用注解的方式时：要在根目录的xml 文件中加入，用于扫描</p><p><code>&lt;!--  告知spring容器在创建容器对象时要扫描的包 --&gt;</code><br><code>&lt;context:component-scan base-package=&quot;com&quot;/&gt;</code></p><p>PS: XML的标签可以是单个&lt;&gt;，也可以有&lt;/&gt;配对</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;软件架构技术课堂笔记2&quot;&gt;&lt;a href=&quot;#软件架构技术课堂笔记2&quot; class=&quot;headerlink&quot; title=&quot;软件架构技术课堂笔记2&quot;&gt;&lt;/a&gt;软件架构技术课堂笔记2&lt;/h3&gt;&lt;p&gt;&amp;lt;会存在很多问题，日后的学习会进行更正&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;Spring-框架：&quot;&gt;&lt;a href=&quot;#Spring-框架：&quot; class=&quot;headerlink&quot; title=&quot;Spring 框架：&quot;&gt;&lt;/a&gt;Spring 框架：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Spring是分层的javaEE应用一站式轻量级开源框架，由Rod Johnson创建；Spring是为简了化企业级系统开发而诞生的；使用Spring，可以用简单的JavaBeans来实现那些EJB的功能。&lt;br&gt;如果一个系统不需要分布式计算或声明式事务支持，EJB并不是最好的选择；Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。&lt;br&gt;Spring的核心是控制反转（IoC）和面向切面编程（AOP）。提供了展现层SpringMVC、持久层SpringJDBC以及业务层是否管理等众多企业级应用技术。Spring IoC和AOP能让代码很好的分层和解耦，从而提高可维护性和可扩展性，便于测试&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://MIchaelFU0403.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://MIchaelFU0403.github.io/tags/java/"/>
    
      <category term="学校" scheme="https://MIchaelFU0403.github.io/tags/%E5%AD%A6%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>软件架构技术课堂笔记1</title>
    <link href="https://michaelfu0403.github.io/2020/04/21/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B01%20/"/>
    <id>https://michaelfu0403.github.io/2020/04/21/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B01%20/</id>
    <published>2020-04-21T13:45:28.000Z</published>
    <updated>2020-04-21T15:01:25.568Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="软件架构技术课堂笔记1">软件架构技术课堂笔记1</span></h3><p>&lt;会存在很多问题，日后的学习会进行更正&gt;</p><h3><span id="什么是架构">什么是架构?</span></h3><p><strong>架构</strong> 是一系列相关的抽象模式，用于指导大型软件系统各方面的设计。是软件系统从整体到部分的最高层次的抽象划分(系统设计规划图）</p><a id="more"></a><p>根据关注的角度不同，架构大概有三种:<strong>（前几年比较流行：MVC）</strong><br><strong>逻辑架构</strong> : 主要描述软件系统中元件之间的关系，例如用户界面，数据库,业务逻辑元件等等。<br><strong>物理架构</strong> : 软件元件是如何安装到硬件上的。<br><strong>系统架构</strong> : 系统的非功能性特征，如扩展性、可靠性、强壮性、灵活性、性能等。</p><p>架构一个软件系统，通常就会用到<strong>分层技术</strong>。<br>现在比较流行的架构 <strong>MVVM(前后端分离)</strong></p><h3><span id="分层技术的基本概念">分层技术的基本概念</span></h3><p>1.软件开发主要任务，是要保证软件的高效运转和功能的正常实现。分层技术通过对软件内部结构进行解析，赋予不同层次结构的不同功能，从而提高软件功能的丰富程度和使用性能。</p><p>2.分层技术为软件的不同层次结构分配不同的解决过程，各个层次结构间组成一个严密的封闭系统。不同层面结构彼此平等。分层技术最主要的应用领域是软件架构开发。</p><p>3.分层技术是将软件按照一定逻辑关系分解成多个面，每个层面都有各自的功能，组合起来则形成完整的软件。各分层之间具有一定独立性，需要完善软件功能或者对软件进行升级改造时，只需要对涉及到的分层进行完善修改，对其它层面几乎没有影响，使软件升级和改造工作变得更加简单，提高工作效率。</p><p>4.分层技术通过分层模式来定义各个功能层次的接口。按照这种设计方式，<br>软件复用性得以大幅提高，对于软件开发、设计十分有利。开发之后的<br>各个层面能够充分利用标准接口，有效实现自动对接。</p><h3><span id="软件分层技术">软件分层技术</span></h3><p>分层技术是当前软件开发设计中使用频率十分高的一种设计方式，多层分布技术已成为今后软件开发设计的主要方向之一。</p><p>软件分层的目的就是为了架构一个好的系统，通过分层：<br>1.<strong>降低耦合</strong>，降低层与层之间的依赖。有利于应对需求变更，有利于排错，有利于后期的维护。</p><p>2.<strong>简化问题复杂度</strong>，各层分工明确。例如OSI七层模型和简化的tcpip协议的四层模型。把一个复杂问题分解，达到化繁为简的效果。但是，一般针对系统大小而言的，如果一个小的系统,也可能会把简单问题复杂化（如多人协调工作，要用到分层设计）。</p><p><strong>软件分层技术作用特点:</strong><br>1.<strong>有利于团队开发，分工合作</strong>。开发人员可以只关注整个结构中的其<br>中某一层，三层架构中，基本可以将工作分为界面设计人员、业务<br>实现人员、数据库设计人员。只要各层接口在开发前规定好，那么，<br>各层可以独立开发升级和维护。</p><p>2.<strong>有利于标准化</strong>。在开发过程中可以将每层的代码进行规范，固定开发语言的风格，可以忽略数据库的差异，设计完善的数据访问层可以将数据库的差异完全屏蔽，可以快速安全地实现数据库的切换等。</p><p>3.方便用新的实现来<strong>替换原有层次的实现</strong>，便于系统维护/升级。各层间通过接口解耦，接口与实现分离，从而可以非常方便的替换掉实现，或者升级实现等。</p><p>5.<strong>逻辑复用</strong>。例如原来基于B/S开发的程序现在要改成C/S，那么只要业务层的接口没有改变，那么业务层和数据层都可以直接复用。</p><p>6.<strong>方便部署</strong>。将各层开发成组件，则可以独立部署。分层可以把各层部署在不同的地方，<strong>实现分布式系统</strong>。</p><h3><span id="mvc-模型-视图-控制器">MVC   (模型-视图-控制器)</span></h3><p> Model   负责存储系统的中心数据，将数据保存至一个模型中，方便使用。<br>  View:    显示界面（html, jsp,asp,php…）。<br> Controller:    处理用户输入的信息，进行向模型发送数据。</p><h3><span id="spring框架">Spring框架</span></h3><blockquote><p>Spring框架的作用<br>1.软件架构中利用Spring框架管理系统的各个组件(Action、Service、DAO)，使用Spring的Ioc和AOP机制实现应用程序中的Bean组件等的关联，从而实现了低耦合调用，增强系统可维护性和扩展性。<br>2.Spring通过控制反转(IoC) 技术实现低耦合。</p></blockquote><h3><span id="spring概述">Spring概述</span></h3><blockquote><p>Spring用于管理组件，组件的管理需要进行配置<br>Spring为组件提供服务,服务的使用也需要配置<br>Spring是-个轻量级的框架，提供管理组件和提供服务的实现类。</p></blockquote><hr><h4><span id="spring-frame-下载的集成框架包中">Spring Frame 下载的集成框架包中：</span></h4><blockquote><ol><li>dist (开发者代码  当前版本可使用的)<ul><li>jar包（类zip，解压内容）</li><li>javadoc.jar 文档说明</li><li>source 源码</li></ul></li><li>docs 开发文档</li><li>schema  XML文档约束</li></ol><p><strong>schema</strong>是新的XML文档约束；DTD出现的比较早. Schema要比DTD强大很多； Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。( XML Schemas Definition )(xmlns : XML namespace)</p></blockquote><p>###Spring 常见核心jar包</p><p><strong>core</strong> （核心工具类的jar包）<br><strong>beans</strong> （访问配置文件，创建和管理bean的主要内容）<br><strong>context</strong> （提供基础的Ioc功能上的扩展服务）<br><strong>epression</strong> （Spring的表达式语言）<br><strong>第三方依赖包</strong>，Apache 的commons.logging    (日志处理的内部包)</p><p><em>移除某个包后变红反映的是</em></p><blockquote><ol><li><strong>耦合</strong>：程序之间的依赖关系<br>包括：</li></ol><ul><li>类之间的依赖</li><li>方法之间的依赖</li></ul><ol start="2"><li>解耦操作：<br>降低程序间的依赖关系（编译期不依赖，运行时才依赖 ）<br>如何进行解耦：</li><li>解耦的思路：</li></ol><ul><li>使用反射创建对象，避免使用new关键字<br>（如案例中的 new     com.mysql.jdbc.Driver）</li><li>读取配置文件来获取创建对象的全限定类名（运行期，创建对象，工厂模式）</li></ul></blockquote><blockquote><p>数据库的使用方式<br>1.注册驱动<br>2.获取连接<br>3.获取操控数据的预处理对象<br>4.执行sql返回执行结果<br>5.遍历结果集<br>6.关闭资源</p></blockquote><h4><span id="beanxml">Bean.xml</span></h4><p>xml放在src目录下<br>xml的两种约束形式  限制随意标签的修改，不像html，可以修改写错。<br>用于作为配置文件。（dtd  ，xsd ）<br>Spring framework learn 文档说明 core<br>把创建对象交给spring来管理</p><h4><span id="bean-属性">Bean 属性：</span></h4><ol><li><p>Id  创建对象唯一表示</p></li><li><p>Class  类文件权限名称</p></li><li><p>Scope：表示当前对象的作用范围</p><ul><li>singleton:默认值，表示当前对象为单例对象</li><li>Prototype：表示当前对象为多例对象  </li><li>request：Spring创建bean对象，将对象存储在request域中。</li><li>session：Spring创建bean对象，将对象存储在session域中。</li><li>global session: 分布式环境web项目，如果没有，则与session一样。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;singleton</span><br><span class="line">默认：us1&#x3D;&#x3D;us2 (则为单例模式)</span><br><span class="line">UserService usl &#x3D; (UserService) ac. getBean( s: &quot; userService&quot; ) ;&#x2F;&#x2F;强转</span><br><span class="line">UserService us2 &#x3D; ac. getBean( s:&quot; userService&quot; , UserService. class)</span><br><span class="line"> &#x2F;&#x2F; 转化为UserService的字节码</span><br><span class="line">us1&#x3D;&#x3D;us2 (则为单例模式) &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Init-method:  在指定类中初始化方法名称（如果有该方法，则自动进行）</p></li><li><p>Destroy:  在指定类中销毁方法名称（释放容器时执行）<br><code>主线程结束 spring容器还未关闭释放，则无法调用destroy方法</code></p></li></ol><p><em>代码演示节选：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import org. spr ingframework. context. Appl icationContext;</span><br><span class="line">import org. spr ingframework. context. support. ClassPathXmlApplicat ionContext ;</span><br><span class="line">public class TestDemo2</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">UserService us &#x3D; new UserService() ;</span><br><span class="line">us. add() ;</span><br><span class="line">&#x2F;&#x2F;1.获取核心容器对象</span><br><span class="line">ApplicationContext ac &#x3D;    </span><br><span class="line">new ClassPathXmlApplicationContext ( configLocation:”bean.xml&quot;) ;  </span><br><span class="line">&#x2F;&#x2F;bean目录字符串 接口实现类</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.给句id获取Bean对象</span><br><span class="line">&#x2F;&#x2F;0bject obj &#x3D; ac. getBean( &quot;userService&quot;);</span><br><span class="line">UserService us1 &#x3D;(UserService) ac.getBean(&quot;userService&quot;);</span><br><span class="line"></span><br><span class="line">System.out.printlnn(usl) ;&#x2F;&#x2F;打印usl 看对象是否创立成功</span><br><span class="line">Usl.add();&#x2F;&#x2F;调用对象的方法</span><br></pre></td></tr></table></figure><h4><span id="小结-spring-配置步骤">小结： spring 配置步骤：</span></h4><ol><li>导入相关的jar包并添加</li><li>在类的根目录下建立一个非中文的任意名称的xml、文件（bean.xml)</li><li>让spring管理资源，在配置文件中配置要创建的对象</li><li>测试<br>1）ApplicationContext 对象  spring容器的顶级接口，超类，<br>2）根据 id 获取对象</li></ol><p><img src="/images/static/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%841.png" alt="图"></p><h3><span id="实现类">实现类：</span></h3><ol><li>ClassPathXmlApplicationContext:可以加在类路径下的配置文件，要求配置<br>文件必须在类路径下，如果不在，加载不了。(常用)</li><li>FileSystemXmlApplicationContext:可以加在磁盘任意路径下配置文件(绝对<br>路径–必须要求访问权限)</li><li>AnnotationConfigApplicationContext:用于读取注解创建的容器</li></ol><h4><span id="类的介绍">类的介绍：</span></h4><p>BeanFactory： spring 容器的顶级接口<br>ApplicationContext ：BeanFactory 的子接口</p><h4><span id="applicationcontext-和-beanfactory-区别">ApplicationContext 和 BeanFactory 区别:</span></h4><p><strong>创建对象的时间点不一样。</strong><br>ApplicationContext ，只要读取配置文件，默认情况就会创建对象。<br>BeanFactory 什么时候用到该对象则才创建对象。</p><h3><span id="bean注入方法">Bean注入方法：</span></h3><ol><li>方法：Spring 容器调用无参构造方法注入，创立对象。</li></ol><p><code>userService us1 =(UserService) ac.getBean(&quot;userService&quot;); //类名</code></p><blockquote><p>bean属性：<br>    <strong>name:</strong>指定参数在构造方法中的名称<br>    <strong>index:</strong>指定参数列表中的索引位置<br>    <strong>type:</strong>指定参数列表中的参数类型 （多个相同会出问题）<br>    <strong>value:</strong>赋值，基本类型或String类<br>    <strong>ref:</strong>    可以赋值其他bean类型的对象</p></blockquote><h4><span id="使用构造方法的注入过程">使用构造方法的注入过程</span></h4><p>若想要调用有参数的构造方法。则：<br>使用构造方法的注入过程方式<br>要求：需要提供一个对应参数列表的构造函数<br>标签： constructor-arg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;”userService ” class&#x3D;”com.test.UserService”&gt;</span><br><span class="line"> &lt;constructor-arg name&#x3D;”name” value&#x3D;”张三”&gt;&lt;&#x2F;constructor-arg&gt;  </span><br><span class="line">&lt;!-- （参数名 参数值） --&gt;</span><br><span class="line"> 或者：&lt;constructor-arg index&#x3D;”0” value&#x3D;”李四”&gt;&lt;&#x2F;constructor-arg&gt; （</span><br><span class="line"> &lt;!-- (索引位置 参数值） --&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>== 比较地址的值<br>equals  实际的值</p><p>比较对象 需重写equals方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;软件架构技术课堂笔记1&quot;&gt;&lt;a href=&quot;#软件架构技术课堂笔记1&quot; class=&quot;headerlink&quot; title=&quot;软件架构技术课堂笔记1&quot;&gt;&lt;/a&gt;软件架构技术课堂笔记1&lt;/h3&gt;&lt;p&gt;&amp;lt;会存在很多问题，日后的学习会进行更正&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是架构&quot;&gt;&lt;a href=&quot;#什么是架构&quot; class=&quot;headerlink&quot; title=&quot;什么是架构?&quot;&gt;&lt;/a&gt;什么是架构?&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;架构&lt;/strong&gt; 是一系列相关的抽象模式，用于指导大型软件系统各方面的设计。是软件系统从整体到部分的最高层次的抽象划分(系统设计规划图）&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://MIchaelFU0403.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://MIchaelFU0403.github.io/tags/java/"/>
    
      <category term="学校" scheme="https://MIchaelFU0403.github.io/tags/%E5%AD%A6%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>GRE 3000 List 1-10</title>
    <link href="https://michaelfu0403.github.io/2020/04/19/GRE3000/"/>
    <id>https://michaelfu0403.github.io/2020/04/19/GRE3000/</id>
    <published>2020-04-19T11:44:28.000Z</published>
    <updated>2020-04-20T15:16:08.735Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="day-1list-1-10">DAY 1:List 1-10</span></h1><a id="more"></a><h2><span id="list-1">List 1:</span></h2><h3><span id="0">0</span></h3><p>ad-lib</p><h3><span id="1">1</span></h3><p>abjure<br>ad hoc<br>adapt<br>adventitious<br>affinity<br>aggrandize<br>aggravate<br>allay<br>ally<br>amble</p><h3><span id="2">2</span></h3><p>accolade<br>adhere<br>advert<br>agitate<br>agonize<br>alacrity<br>amenity<br>amity</p><h2><span id="list-2">List 2:</span></h2><h3><span id="0">0</span></h3><p>approbation<br>apt<br>awe</p><h3><span id="1">1</span></h3><p>annul<br>antagonize<br>apposite<br>appreciable<br>apropos<br>aspect<br>assiduous<br>astute<br>aver<br>awry<br>bait<br>bane<br>banish</p><h3><span id="2">2</span></h3><p>anodyne<br>antic<br>apostasy<br>apprise<br>arduous<br>asperity<br>assertive<br>atone<br>atrocious<br>attenuate<br>axiomatic<br>babble<br>bale<br>baleful<br>balk<br>balky</p><h2><span id="list-3">List 3:</span></h2><h3><span id="0">0</span></h3><p>barbarous<br>burnish<br>byzantine<br>cache</p><h3><span id="1">1</span></h3><p>beguile<br>belie<br>benign<br>berate<br>beseech<br>bigot<br>bland<br>blasé<br>blast<br>blatant<br>blemish<br>blight<br>bliss<br>blithe<br>blunt<br>blurt<br>bluster<br>boorish<br>bootless<br>bound<br>bracing<br>breach<br>browbeat<br>bumptious<br>buoy<br>buoyant<br>burlesque<br>cachet<br>cacophony</p><h3><span id="2">2</span></h3><p>barb<br>bathetic<br>belabor<br>beleaguer<br>besmirch<br>blazon<br>boggle<br>boisterous<br>brash<br>brassy<br>bravado<br>bravura<br>brazen<br>brisk<br>bristle<br>brittle<br>broach<br>bromide<br>bruit<br>budge<br>bulge<br>bungle<br>cajole<br>calcify<br>callous<br>calumniate<br>catharsis<br>canard<br>candor</p><h2><span id="list-4">List 4:</span></h2><h3><span id="1">1</span></h3><p>capitulate<br>caprice<br>cast<br>castigate<br>concomitant<br>chasm<br>cherubic</p><p>chromatic<br>chronic<br>circumspect<br>circumvent</p><p>civility<br>clarion<br>clasp<br>clement<br>cliché<br>clog<br>cordial<br>coagulate<br>coerce<br>coeval<br>cognizant<br>collude<br>colossal<br>coma<br>comity<br>commend<br>commitment<br>commonsensical</p><p>complacency<br>complaisance<br>compliant</p><h3><span id="2">2</span></h3><p>canvass</p><h2><span id="list-5">List 5:</span></h2><h3><span id="0">0</span></h3><h3><span id="1">1</span></h3><h3><span id="2">2</span></h3><h2><span id="list-6">List 6:</span></h2><h3><span id="0">0</span></h3><h3><span id="1">1</span></h3><h3><span id="2">2</span></h3><h2><span id="list-7">List 7:</span></h2><h3><span id="0">0</span></h3><h3><span id="1">1</span></h3><h3><span id="2">2</span></h3><h2><span id="list-8">List 8:</span></h2><h3><span id="0">0</span></h3><h3><span id="1">1</span></h3><h3><span id="2">2</span></h3><h2><span id="list-9">List 9:</span></h2><h3><span id="0">0</span></h3><h3><span id="1">1</span></h3><h3><span id="2">2</span></h3><h2><span id="list-10">List 10:</span></h2><h3><span id="0">0</span></h3><h3><span id="1">1</span></h3><h3><span id="2">2</span></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DAY-1-List-1-10&quot;&gt;&lt;a href=&quot;#DAY-1-List-1-10&quot; class=&quot;headerlink&quot; title=&quot;DAY 1:List 1-10&quot;&gt;&lt;/a&gt;DAY 1:List 1-10&lt;/h1&gt;
    
    </summary>
    
    
      <category term="English" scheme="https://MIchaelFU0403.github.io/categories/English/"/>
    
    
      <category term="GRE" scheme="https://MIchaelFU0403.github.io/tags/GRE/"/>
    
      <category term="English" scheme="https://MIchaelFU0403.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Get to know Markdown</title>
    <link href="https://michaelfu0403.github.io/2020/04/18/markdown%20grammar/"/>
    <id>https://michaelfu0403.github.io/2020/04/18/markdown%20grammar/</id>
    <published>2020-04-18T01:44:28.000Z</published>
    <updated>2020-04-20T14:17:15.698Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="welcome-to-markdown">Welcome to Markdown</span></h1><h1><span id="第一次学习markdown总结一些常用的方法">第一次学习Markdown，总结一些常用的方法。</span></h1><a id="more"></a><!-- toc --><ul><li><a href="#introducing-markdown">Introducing Markdown</a></li><li><a href="#tutorial">Tutorial</a><ul><li><a href="#1-headings"><strong>1. Headings</strong></a></li><li><a href="#2-toc"><strong>2. TOC</strong></a></li><li><a href="#3-citation-a-single-line"><strong>3. Citation (A single line)</strong></a></li><li><a href="#4-citation-multiple-lines"><strong>4. Citation (Multiple lines)</strong></a></li><li><a href="#5-nesting"><strong>5. Nesting</strong></a></li><li><a href="#6-code-block-in-a-single-line"><strong>6. Code block in a single line</strong></a></li><li><a href="#7-code-block-in-lines"><strong>7. Code block in lines</strong></a></li><li><a href="#8-self-defining-the-color-of-code"><strong>8. Self-defining the color of code</strong></a></li><li><a href="#9-insertion-of-links"><strong>9. Insertion of links</strong></a></li><li><a href="#10-insertion-of-photos"><strong>10. Insertion of photos</strong></a></li><li><a href="#11-insertion-of-videos"><strong>11. Insertion of videos</strong></a></li><li><a href="#12-ordered-list"><strong>12. Ordered list</strong></a></li><li><a href="#13-unsorted-list"><strong>13. Unsorted list</strong></a></li><li><a href="#14-nesting-list"><strong>14. Nesting list</strong></a></li><li><a href="#15-nesting-list-with-code"><strong>15. Nesting list with code</strong></a></li><li><a href="#16-latex"><strong>16. LaTeX</strong></a></li><li><a href="#17-style-of-fonts"><strong>17. style of fonts</strong></a><ul><li><a href="#italic">italic</a></li><li><a href="#boldface">boldface</a></li><li><a href="#italic-boldface">italic + boldface</a></li><li><a href="#delated-line">delated line</a></li><li><a href="#keyboard">keyboard</a></li></ul></li><li><a href="#18-to-be-continue"><strong>18. To be continue</strong></a></li></ul></li></ul><!-- tocstop --><h1><span id="introducing-markdown">Introducing Markdown</span></h1><blockquote><p>Markdown is a plain text formatting syntax designed to be converted to HTML. Markdown is popularly used as format for readme files, … or in text editors for the quick creation of rich text documents.  - <a href="http://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Wikipedia</a></p></blockquote><h1><span id="tutorial">Tutorial</span></h1><h3><span id="1-headings"><strong>1. Headings</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">##### h5</span><br><span class="line">###### h6</span><br><span class="line">####### h7      &#x2F;&#x2F; 错误代码</span><br><span class="line">######## h8     &#x2F;&#x2F; 错误代码</span><br><span class="line">######### h9    &#x2F;&#x2F; 错误代码</span><br><span class="line">########## h10  &#x2F;&#x2F; 错误代码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h1</span><br><span class="line">&#x3D;&#x3D;&#x3D;</span><br><span class="line">h2</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3><span id="2-toc"><strong>2. TOC</strong></span></h3><p>Generating a catalogue based on the given headings</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure><h3><span id="3-citation-a-single-line"><strong>3. Citation (A single line)</strong></span></h3><p>Citing the code or sentences by using <code>&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello world!</span><br></pre></td></tr></table></figure><p>Example:</p><blockquote><p>hello world!</p></blockquote><h3><span id="4-citation-multiple-lines"><strong>4. Citation (Multiple lines)</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello world!           &gt; hello world!</span><br><span class="line">hello world!        or   &gt; hello world!</span><br><span class="line">hello world!             &gt; hello world!</span><br></pre></td></tr></table></figure><p>Example:</p><blockquote><p>hello world!<br>hello world!<br>hello world!</p></blockquote><h3><span id="5-nesting"><strong>5. Nesting</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; aaaaaaaaa</span><br><span class="line">&gt;&gt; bbbbbbbbb</span><br><span class="line">&gt;&gt;&gt; cccccccccc</span><br></pre></td></tr></table></figure><p>Example:</p><blockquote><p>aaaaaaaaa</p><blockquote><p>bbbbbbbbb</p><blockquote><p>cccccccccc</p></blockquote></blockquote></blockquote><h3><span id="6-code-block-in-a-single-line"><strong>6. Code block in a single line</strong></span></h3><p>using ` to make the code block in one line</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">the inner part of this bracket all in a single line</span><br><span class="line"> (&#96;</span><br><span class="line">&lt; div&gt;   </span><br><span class="line">   &lt; div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">   &lt; div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">   &lt; div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt; &#x2F;div&gt;</span><br><span class="line">&#96;)</span><br></pre></td></tr></table></figure><p>Example:<br>(<code>&lt; div&gt;     &lt; div&gt;&lt;/div&gt;  &lt; div&gt;&lt;/div&gt;  &lt; div&gt;&lt;/div&gt;&lt; /div&gt;</code> )</p><h3><span id="7-code-block-in-lines"><strong>7. Code block in lines</strong></span></h3><p>using 3 ` to make the code blocks in lines<br>(Tab) making the structures of code clear</p><p>Example:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;   </span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></p><h3><span id="8-self-defining-the-color-of-code"><strong>8. Self-defining the color of code</strong></span></h3><p>Example:<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    num+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure></p><h3><span id="9-insertion-of-links"><strong>9. Insertion of links</strong></span></h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  百度一下</span><br><span class="line">[百度1](http:&#x2F;&#x2F;www.baidu.com&#x2F;)</span><br></pre></td></tr></table></figure><p>  Example:百度一下<br><a href="http://www.baidu.com/" target="_blank" rel="noopener">百度1</a></p><h3><span id="10-insertion-of-photos"><strong>10. Insertion of photos</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）photos in Internet ![圣人惠](https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1587239535004&amp;di&#x3D;a2c85429b04af968f770863353ee9fab&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F3704f527edd7fa1c7af02772780d8aeb8b0e1b42.jpg)</span><br><span class="line">（2）photos in local disk ![saya](&#x2F;images&#x2F;6.png)</span><br></pre></td></tr></table></figure><p> Example:<br> （1）<br> <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587239535004&di=a2c85429b04af968f770863353ee9fab&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F3704f527edd7fa1c7af02772780d8aeb8b0e1b42.jpg" alt="圣人惠"><br>（2）<img src="/images/6.png" alt="壁纸"></p><h3><span id="11-insertion-of-videos"><strong>11. Insertion of videos</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id&#x3D;&quot;video&quot; controls&#x3D;&quot;&quot; preload&#x3D;&quot;none&quot; poster&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;poster.png&quot;&gt;</span><br><span class="line">      &lt;source id&#x3D;&quot;mp4&quot; src&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;trailer.mp4&quot; type&#x3D;&quot;video&#x2F;mp4&quot;&gt;</span><br><span class="line">      &lt;source id&#x3D;&quot;webm&quot; src&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;trailer.webm&quot; type&#x3D;&quot;video&#x2F;webm&quot;&gt;</span><br><span class="line">      &lt;source id&#x3D;&quot;ogv&quot; src&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;trailer.ogv&quot; type&#x3D;&quot;video&#x2F;ogg&quot;&gt;</span><br><span class="line">      &lt;p&gt;Your user agent does not support the HTML5 Video element.&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;video&gt;</span><br></pre></td></tr></table></figure><p> Example:<br> <video id="video" controls preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png"><br>      <source id="mp4" src="http://media.w3.org/2010/05/sintel/trailer.mp4" type="video/mp4"><br>      <source id="webm" src="http://media.w3.org/2010/05/sintel/trailer.webm" type="video/webm"><br>      <source id="ogv" src="http://media.w3.org/2010/05/sintel/trailer.ogv" type="video/ogg"><br>      <p>Your user agent does not support the HTML5 Video element.</p><br>    </video></p><h3><span id="12-ordered-list"><strong>12. Ordered list</strong></span></h3><p>There is a space behind the dot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. one</span><br><span class="line">2. two</span><br><span class="line">3. three</span><br></pre></td></tr></table></figure><p>Example:</p><ol><li>one</li><li>two</li><li>three</li></ol><h3><span id="13-unsorted-list"><strong>13. Unsorted list</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* one</span><br><span class="line">* two</span><br><span class="line">* three</span><br></pre></td></tr></table></figure><p>Example:</p><ul><li>one</li><li>two</li><li>three</li></ul><h3><span id="14-nesting-list"><strong>14. Nesting list</strong></span></h3><p>The function of * and - are the same.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. one</span><br><span class="line">    1. one-1</span><br><span class="line">    2. two-2</span><br><span class="line">2. two</span><br><span class="line">    * two-1</span><br><span class="line">    - two-2</span><br></pre></td></tr></table></figure><p>Example:</p><ol><li>one<ol><li>one-1</li><li>two-2</li></ol></li><li>two<ul><li>two-1</li></ul><ul><li>two-2</li></ul></li></ol><h3><span id="15-nesting-list-with-code"><strong>15. Nesting list with code</strong></span></h3><p>changing a line + 2 TAB</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* one</span><br><span class="line"></span><br><span class="line">    int a &#x3D; 10;</span><br></pre></td></tr></table></figure><p>Example:</p><ul><li><p>one</p><p>  int a = 10;  </p></li></ul><h3><span id="16-latex"><strong>16. LaTeX</strong></span></h3><h3><span id="17-style-of-fonts"><strong>17. style of fonts</strong></span></h3><h4><span id="italic">italic</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)   *斜体*    (2)  &lt;i&gt;斜体&lt;&#x2F;i&gt;     (3)_斜体_</span><br></pre></td></tr></table></figure><p>Example:<br>(1)   <em>斜体</em>    (2)  <i>斜体</i>     (3)<em>斜体</em></p><h4><span id="boldface">boldface</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br></pre></td></tr></table></figure><p>Example:<br><strong>加粗</strong></p><h4><span id="italic-boldface">italic + boldface</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)  ***加粗+斜体***   (2)  **_加粗+斜体_**</span><br></pre></td></tr></table></figure><p>Example:<br>(1)  <strong><em>加粗+斜体</em></strong>   (2)  <strong><em>加粗+斜体</em></strong></p><h4><span id="delated-line">delated line</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>Example:<br><del>删除线</del></p><h4><span id="keyboard">keyboard</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;</span><br></pre></td></tr></table></figure><p>Example:<br><kbd>Ctrl</kbd></p><h3><span id="18-to-be-continue"><strong>18. To be continue</strong></span></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Welcome-to-Markdown&quot;&gt;&lt;a href=&quot;#Welcome-to-Markdown&quot; class=&quot;headerlink&quot; title=&quot;Welcome to Markdown&quot;&gt;&lt;/a&gt;Welcome to Markdown&lt;/h1&gt;&lt;h1 id=&quot;第一次学习Markdown，总结一些常用的方法。&quot;&gt;&lt;a href=&quot;#第一次学习Markdown，总结一些常用的方法。&quot; class=&quot;headerlink&quot; title=&quot;第一次学习Markdown，总结一些常用的方法。&quot;&gt;&lt;/a&gt;第一次学习Markdown，总结一些常用的方法。&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://MIchaelFU0403.github.io/categories/Markdown/"/>
    
    
      <category term="新手入门" scheme="https://MIchaelFU0403.github.io/tags/%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>The first blog : Hello world</title>
    <link href="https://michaelfu0403.github.io/2020/03/18/The-first-blog-Hello-world/"/>
    <id>https://michaelfu0403.github.io/2020/03/18/The-first-blog-Hello-world/</id>
    <published>2020-03-18T01:44:28.000Z</published>
    <updated>2020-04-20T14:10:02.358Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#_po-2首诗_"><em>PO 2首诗</em></a><ul><li><a href="#红瓦青垣">红瓦青垣</a></li><li><a href="#桥于江上冷月夜江">桥于江上，冷月夜江</a></li></ul></li></ul><!-- tocstop --><h1><span id="po-2首诗"><em>PO 2首诗</em></span></h1><a id="more"></a><center><h3><span id="红瓦青垣">红瓦青垣</span></h3><p>夏晴，看桃霞卷云。<br>冬夜，品月雪凉风。<br>翠雨骤雨，垣墙默立。<br>云卷云舒，楼影悦动。<br>漫步楼宇庭轩，<br>壮志将栏杆拍遍。<br>逡巡杏林石原，<br>豁达挟飞仙遨游。<br>凭依墙落，温热岁月。<br>五十载过客学子思绪万千，<br>白驹过日夜军号嘹亮不绝。<br>古人力览卷帙哲思丘谷，<br>今士潜心文理考究人生。</p><hr><h3><span id="桥于江上冷月夜江">桥于江上，冷月夜江</span></h3><p>日，至江北寻好友相聚。<br>夜，独步于江浔，上桥。<br>江风透骨，风衣难挡。<br>隔岸灯影，明且长。<br>浓云轻笼长桥，缀月光。<br>眼迷蒙，思向远方。<br>青石板，黄土窑。黄河水，同有桥。<br>暮秋过，叶微黄。冬月至，雪苍茫。<br>隔水望，千帆远。一朝别，家命难忘。<br>冷夜月江，氤氲了日期，切盼归乡。</p></center>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#_po-2首诗_&quot;&gt;&lt;em&gt;PO 2首诗&lt;/em&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#红瓦青垣&quot;&gt;红瓦青垣&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#桥于江上冷月夜江&quot;&gt;桥于江上，冷月夜江&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;h1 id=&quot;PO-2首诗&quot;&gt;&lt;a href=&quot;#PO-2首诗&quot; class=&quot;headerlink&quot; title=&quot;PO 2首诗&quot;&gt;&lt;/a&gt;&lt;em&gt;PO 2首诗&lt;/em&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://MIchaelFU0403.github.io/categories/web/"/>
    
    
      <category term="新手入门" scheme="https://MIchaelFU0403.github.io/tags/%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
