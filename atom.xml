<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael&#39;s Blog</title>
  
  <subtitle>author: Michael fu</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://michaelfu0403.github.io/"/>
  <updated>2020-10-21T08:05:23.246Z</updated>
  <id>https://michaelfu0403.github.io/</id>
  
  <author>
    <name>Michael Fu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动边缘计算</title>
    <link href="https://michaelfu0403.github.io/2020/10/19/%E7%A7%BB%E5%8A%A8%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/"/>
    <id>https://michaelfu0403.github.io/2020/10/19/%E7%A7%BB%E5%8A%A8%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/</id>
    <published>2020-10-19T07:24:28.000Z</published>
    <updated>2020-10-21T08:05:23.246Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="移动边缘计算-moblie-edge-computing">移动边缘计算 Moblie Edge Computing</span></h1><p>北京邮电大学出版社</p><p>王尚广，周傲，魏晓娟，柳玉炯   编著</p><h2><span id="前言">前言</span></h2><p>终端设备访问云计算数据中心为用户提供服务——增加了<u>网络负荷和数据传输时延</u>。</p><p>移动边缘计算——利用无线接入网络<u>就近</u>提供移动用户IT所需要的<u>服务和计算功能</u>，创造一个<u>高性能</u>，<u>低延迟</u>与<u>高带宽</u>的服务环境。</p><a id="more"></a><h2><span id="目录">目录</span></h2><!-- toc --><ul><li><a href="#第1章-基本概述">第1章 基本概述</a><ul><li><a href="#11-移动边缘计算的由来">1.1 移动边缘计算的由来</a><ul><li><a href="#提出的原因">提出的原因：</a></li><li><a href="#边缘计算架构">边缘计算架构：</a></li><li><a href="#移动边缘计算的特点">移动边缘计算的特点：</a></li></ul></li><li><a href="#12-相似解决方案">1.2 相似解决方案</a><ul><li><a href="#相似解决方案">相似解决方案：</a><ul><li><a href="#121-移动云计算">1.2.1. 移动云计算</a></li><li><a href="#122-雾计算">1.2.2. 雾计算</a></li><li><a href="#123-微云">1.2.3. 微云</a></li><li><a href="#124-移动边缘计算">1.2.4. 移动边缘计算</a></li></ul></li></ul></li><li><a href="#13-移动边缘计算与5g">1.3 移动边缘计算与5G</a></li><li><a href="#14-研究问题划分">1.4 研究问题划分</a><ul><li><a href="#141-特征-characteristics">1.4.1 特征 Characteristics</a></li><li><a href="#142-参与者-actors">1.4.2 参与者 Actors</a></li><li><a href="#143-接入技术-access-technologies">1.4.3 接入技术 Access Technologies</a></li><li><a href="#144-应用-application">1.4.4 应用 Application</a></li><li><a href="#145-目标-objectives">1.4.5 目标 Objectives</a></li><li><a href="#146-计算平台-computational-platforms">1.4.6 计算平台 Computational Platforms</a></li><li><a href="#147-关键使能技术-key-enablers">1.4.7 关键使能技术 Key Enablers</a></li></ul></li></ul></li><li><a href="#第2章-关键技术">第2章 关键技术</a><ul><li><a href="#21-边缘云放置技术">2.1 边缘云放置技术</a><ul><li><a href="#211-国外研究进展">2.1.1 国外研究进展</a><ul><li><a href="#澳洲国立xu等人有容量限制边缘云放置问题">澳洲国立Xu等人：有容量限制边缘云放置问题</a></li><li><a href="#澳洲国立-jia-提出了基于密度的边缘云放置算法">澳洲国立 Jia 提出了基于密度的边缘云放置算法。</a></li></ul></li><li><a href="#212-国内研究进展">2.1.2 国内研究进展</a><ul><li><a href="#南京大学-xiang-基于移动用用地理位置信息的自适应移动边缘云的放置方法">南京大学 Xiang <strong>基于移动用用地理位置信息的自适应移动边缘云的放置方法。</strong></a></li></ul></li></ul></li><li><a href="#22-计算卸载技术">2.2 计算卸载技术</a><ul><li><a href="#221-国外研究进展">2.2.1 国外研究进展</a><ul><li><a href="#eduardo-杜克-2010-maui-最早的计算卸载实现模型">Eduardo 杜克 2010 MAUI ,最早的计算卸载实现模型。</a></li><li><a href="#intel-byung-gon-clonecloud计算卸载模型">Intel Byung-Gon CloneCloud计算卸载模型。</a></li><li><a href="#karim-佐治亚理工-cosmos以风险控制方式进行卸载决策">Karim 佐治亚理工  COSMOS以风险控制方式进行卸载决策。</a></li><li><a href="#根特大学的tim等人在增强现实用物计把cloudlet当作云端实现计算卸载">根特大学的Tim等人”在增强现实用物计把Cloudlet当作云端实现计算卸载。</a></li><li><a href="#mahadev-cmu-在2009年提出cloudlet扩展移动设备的能力">Mahadev CMU 在2009年提出Cloudlet扩展移动设备的能力。</a></li><li><a href="#karim-佐治亚理工-提出协调同域移动设备提供云服务-femtoclouds-提供了动态的配置的多设备的自发性服务云">Karim 佐治亚理工  提出协调同域移动设备提供云服务。FemtoClouds 提供了动态的，配置的，多设备的自发性服务云。</a></li><li><a href="#cloudlet">* Cloudlet</a></li><li><a href="#里昂大学的golchayi提出了自发临近云spc通过附近的一组移部身动设备以协作的方式执行任务卸载">里昂大学的GolchayI提出了自发临近云SPC:通过附近的一组移部身动设备以协作的方式执行任务卸载。</a></li></ul></li><li><a href="#222-国内研究进展">2.2.2 国内研究进展</a></li></ul></li><li><a href="#23-服务迁移技术">2.3 服务迁移技术</a><ul><li><a href="#231-欧洲研究进展">2.3.1 欧洲研究进展</a><ul><li><a href="#u基于决策过程的服务迁移-u"><u>基于决策过程的服务迁移。</u></a></li></ul></li><li><a href="#232-美洲研究进展">2.3.2 美洲研究进展</a><ul><li><a href="#u基于虚拟机切换的服务迁移-u"><u>基于虚拟机切换的服务迁移。</u></a></li><li><a href="#satyanarayanan-cmu-虚拟机切换概念">Satyanarayanan CMU  虚拟机切换概念</a></li><li><a href="#ibm华生实验室的wang等人">IBM华生实验室的Wang等人</a></li></ul></li></ul></li><li><a href="#24-群智协同技术">2.4 群智协同技术</a></li></ul></li><li><a href="#第3章-典型应用场景">第3章 典型应用场景</a><ul><li><a href="#31-车联网">3.1 车联网</a></li><li><a href="#32-ar-增强现实">3.2 AR 增强现实</a></li><li><a href="#33-医疗服务">3.3 医疗服务</a></li><li><a href="#34公共安全">3.4公共安全</a></li></ul></li><li><a href="#第4章-工具与实验平台">第4章 工具与实验平台</a><ul><li><a href="#41-ifogsim">4.1 iFogSim</a></li><li><a href="#42-jade">4.2 JADE</a></li><li><a href="#43-oai">4.3 OAI</a></li><li><a href="#44-openstack">4.4 OpenStack</a></li><li><a href="#45-docker">4.5 Docker</a></li><li><a href="#46-openlte">4.6 OpenLTE</a></li></ul></li><li><a href="#第5章-挑战">第5章 挑战</a><ul><li><a href="#51-系统架构">5.1 系统架构</a></li><li><a href="#52-服务与应用">5.2 服务与应用</a></li><li><a href="#53-安全与隐私">5.3 安全与隐私</a></li></ul></li></ul><!-- tocstop --><h2><span id="第1章-基本概述">第1章 基本概述</span></h2><h3><span id="11-移动边缘计算的由来">1.1 移动边缘计算的由来</span></h3><h4><span id="提出的原因">提出的原因：</span></h4><ol><li><p>所有的业务部署到云计算中心，造成<u>网络负荷</u>和较<u>长的网络延时</u>，使网络的<u>带宽</u>和<u>时延</u>等性能要求更高。</p></li><li><p><u>移动终端</u>计算、存储及功耗十分有限，需要<u>将高复杂度，高能耗的计算任务</u>迁移至<u>云计算中心</u>的服务器端去完成，<u>降低移动终端的能耗</u>。但数据的传输计算任务的迁移增加网络负荷，增加传输时延。</p></li></ol><p>根据ETSI的定义，<strong><u>移动边缘计算</u></strong>即在距离用户移动终端<strong><u>最近的无线接入网</u></strong>内提供<u>信息技术服务环境和云计算能力</u>，旨在进一步减小延迟/时延、提高网络运营效率、提高业务分发/传送能力、优化/改善终端用户体验。<strong>移动边缘计算</strong>可以被视为运行于<strong>移动网络边缘的云服务器</strong>，用以执行传统网络基础设施不能实现的特定任务。移动边缘计算是<strong><u>信息技术</u></strong>和<strong><u>通信网络</u></strong>融合的产物。</p><img src="/images/static/边缘计算/book_pictures/a-1.1.jpg" alt="a-1.1" style="zoom:50%;"><h4><span id="边缘计算架构">边缘计算架构：</span></h4><p>移动边缘计算包括3个部分： <strong>边缘设备，边缘云和远端云</strong>（大规模云计算中心、大云）。</p><p><strong>边缘设备</strong>：可连接到网络。</p><p><strong>边缘云</strong>：部署在移动基站上的小规模云计算中心。功能：流量控制（转发和过滤）管控移动边缘服务和应用。 </p><p><u>边缘设备处理能力不足，可通过无线网络将计算密集型和海量数据迁移到边缘云进行处理。边缘云处不能满足边缘设备请求，可通过无线网络将部分任务迁移到远端云进行处理。</u></p><h4><span id="移动边缘计算的特点">移动边缘计算的特点：</span></h4><p>隔离性：本地的，与<u>网络其他部分隔离运行</u>，机器通信安全性高。</p><p>临近性：<u>靠近信息源</u>（移动终端），可直接访问设备，利于捕捉分析大数据信息。</p><p>低时延性：边缘服务在靠近终端的<u>边缘服务器</u>上运行，时延降低，用户体验性好，<u>减少网络拥塞。</u></p><p>位置感知性：WIFI或蜂窝网络，都可使用低等级指令<u>确定连接设备位置。</u></p><p>网络上下文感知性：感知<u>实时网络数据</u>，统计分析用户消费行为和移动宽带使用量。</p><h3><span id="12-相似解决方案">1.2 相似解决方案</span></h3><p>移动互联网与物联网应用发展了多个相似的解决方案： 移动边缘计算(MEC)，移动云计算（mobile cloud computing MCC），雾计算（fog computing），微云（cloudlet）。</p><p>移动边缘计算(MEC)：边缘服务器和蜂窝基站能协同工作。边缘服务器可单独运行，也可以与远端云数据中心协同运行。</p><h4><span id="相似解决方案">相似解决方案：</span></h4><img src=" /images/static/边缘计算/book_pictures/a-1.2.jpg" alt="a-1.2" style="zoom:50%;"><h5><span id="121-移动云计算">1.2.1. 移动云计算</span></h5><p>​    是指通过移动网络以按需、易扩展的方式获得所需的基础设施、平台、软件(或应用)等的一种信息技术资源或(信息)服务的交付与使用模式。移动终端设备与传统的桌面计算机相比，用户更倾向于在移动终端上运行应用程序。然而受许多限制，需要将计算密集型的应用程序迁移至移动终端外执行。云计算中心提供必要的计算资源。</p><h5><span id="122-雾计算">1.2.2. 雾计算</span></h5><p>​    低延时、位置感知、广泛的地理分布、适应移动性的应用，支持更多的边缘节点。这些特征使得移动业务部署更加方便，满足更广泛的节点接入。</p><p>​    雾计算是云计算模型从核心网到边缘网的一个扩展，高度虚拟化，位于终端设备和云服务器之间。存在大量异构的物理广泛分布的去中心化的设备协作，无需第三方即可完成计算处理存储任务。</p><p>​    组件（路由器，网关，机顶盒，代理服务器）可创建分布于不同地方的云服务。与云计算相比，雾计算所采用的架构更呈分布式，更接近网络边缘。</p><p>​    雾计算将数据、数据处理和应用程序集中在网络边缘的设备中，而不像云计算那样将它们几乎全部保存在云中。数据的存储及处理更依赖本地设备，而非服务器。所以，云计算是新一代的集中式计算，而雾计算是新一代的分布式计算，符合互联网的“去中心化”特征。</p><h5><span id="123-微云">1.2.3. 微云</span></h5><p>​    Cloudlet小型的云数据中心，位于网络边缘，主要目的：为移动设备提供强大的计算资源和较低的通信时延支持计算密集型和交互型强的移动应用。</p><p>​    微云分三层架构： 移动设备，cloudlet服务器和云计算中心，将云服务“搬近”用户。</p><h5><span id="124-移动边缘计算">1.2.4. 移动边缘计算</span></h5><p>​    移动边缘计算主要是让边缘服务器和蜂窝基站相结合，可与远程云数据中心连接或断开。</p><p>​    支持网络中2级3级分层应用部署。</p><p>​    旨在灵活的访问无线电网络信息，进行内容发布和部署。</p><h3><span id="13-移动边缘计算与5g">1.3 移动边缘计算与5G</span></h3><h3><span id="14-研究问题划分">1.4 研究问题划分</span></h3><img src="/images/static/边缘计算/book_pictures/a-1.4.jpg" alt="a-1.4" style="zoom:67%;"><h5><span id="141-特征-characteristics">1.4.1 特征 Characteristics</span></h5><p>紧临性、部署密集型：低时延、位置感知性、网络上下文感知性</p><h5><span id="142-参与者-actors">1.4.2 参与者 Actors</span></h5><p>应用开发商，内容提供商，移动用户，移动边缘服务提供商，软件供应商和 OTT(over the top)玩家。</p><p>（OTT:广泛地用在通信领域，指的是谷歌、苹果、Skype、Netlix等利用其他运营商的宽带网发展自己的业务，以前的Skype和QQ 、现在的Netfix网络视频以及各种移动应用商店里的应用都是OTT。不少OTT服务商直接面向用户提供服务和计费，使运营商沦为单纯的“传输管道”，根本无法触及管道中传输的巨大价值。）</p><h5><span id="143-接入技术-access-technologies">1.4.3 接入技术 Access Technologies</span></h5><p>移动把边缘计算环境中，移动设备通过<strong><u>蜂窝网络</u></strong>（GPRS CDMA 3、4、5G/Wi-MAX）<u><strong>Wi-Fi接入点</strong></u>等无线通信与其他设备或边缘网进行通信。</p><p>由于<u>网络部署密集</u> ，用户可以通过切换<u>任何可用的接入网络</u>连接到<u>边缘网络。</u></p><h5><span id="144-应用-application">1.4.4 应用 Application</span></h5><ul><li><u>计算卸载 computation offloading</u></li></ul><p>移动设备<u>资源受限</u>，计算密集型应用程序不在移动主机上<u>部分计算被迁移至云数据中心</u>，成功执行任务后<u>返回结果</u>。</p><p>边缘设备到核心云通信时延长，在<u>移动边缘计算中有限的服务器被部署到网络边缘</u>。计算密集型任务被迁移。</p><ul><li><u>协同计算 collaborative computing</u></li></ul><p>协同计算使<u>多人</u>和<u>组织</u>在<u>分布式系统</u>中互相协作。</p><p><u>设备位置</u>和<u>通信时延</u>十分重要。</p><p>AR：在边缘网络提供了强大的<u>实时上下文感知</u>协作系统。</p><ul><li><u>内存复制 memory replication</u></li></ul><p>LTE——设备主要连接技术，物联网设备计算和存储能力较差，设备从周围收集数据，并将数据迁移至云基础设施做进一步的计算。边缘网络为每个设备承载了多个克隆云，把计算能力带到物联网设备附近，减少网络时延。</p><ul><li><u>内容分发 content delivery</u></li></ul><p>内容分发技术可以实现<u>优化web服务器和web内容</u>，从而提高可用性，高性能，低时延的服务。</p><p>移动边缘计算可以基于<u>网络状态</u>和<u>可用的网络负载</u> <strong><u>动态优化</u></strong>web内容，使用户移动性和服务体验来优化内容。</p><h5><span id="145-目标-objectives">1.4.5 目标 Objectives</span></h5><p>移动节点：最优化移动设备的通信时延和能耗。</p><p>网络供应商：最小化基础设施成本，提高吞吐量。</p><p>其它：获取网络上下文信息，进行内容发布。</p><h5><span id="146-计算平台-computational-platforms">1.4.6 计算平台 Computational Platforms</span></h5><p><u>云，边缘服务器，移动节点。</u></p><p>主要表示不同的计算主机，对等计算中，任务被迁移至临近移动设备。</p><p>任务可被迁移到边缘网络的边缘云，移动边缘服务器部署在每个基站。</p><h5><span id="147-关键使能技术-key-enablers">1.4.7 关键使能技术 Key Enablers</span></h5><p>关键使能技术有助于在无线接入网内给移动用户提供上下文感知，低时延，高带宽服务的不同技术。</p><ul><li><p><u>云与虚拟化</u></p><p>虚拟化允许在一个物理硬件上创造不同的逻辑设施。</p><p>位于网络边缘的云计算平台利用虚拟化技术搭建多个虚拟机，去提供不同的云计算服务。</p><p>SaaS ，PaaS ，IaaS。</p></li></ul><ul><li><p><u>大容量服务器</u></p><p>​    传统的大容量服务器和移动边缘服务器部署在边缘网络的每个移动基站，移动边缘服务器执行网络流量转发和过滤，并负责执行被边缘设备迁移的任务。</p></li></ul><ul><li><p><u>网络技术</u></p><p><u>Wi-Fi和蜂窝网络</u>是主要用于连接移动设备和边缘服务器的主要网络技术。</p></li></ul><ul><li><p><u>移动设备</u></p><p>在边缘网络内通过机器与机器间的通信执行对等计算。</p></li></ul><ul><li><p><u>软件开发工具包</u></p><p>API</p></li></ul><h2><span id="第2章-关键技术">第2章 关键技术</span></h2><h3><span id="21-边缘云放置技术">2.1 边缘云放置技术</span></h3><p>边缘云应该放在什么位置？</p><p><strong>移动边缘计算目的</strong>：将云计算能力<strong>迁移到网络边缘</strong>，<strong>减少</strong>核心网拥塞和传播延迟造成的<strong>迟延</strong>。</p><p><u>边缘云</u>放置策略（位置，数量）会对<u>边缘云响应时间</u>和<u>资源利用率</u>产生重要的影响。</p><p>放置如图：</p><img src="/images/static/边缘计算/book_pictures/a-2.1.1.jpg" alt="a-2.1.1" style="zoom:20%;"><p><u>边缘云</u>适合在<u>无线城域网</u>中放置：1. 高成本效益。2.不闲置，高效。</p><p>挑战：服务质量，网络时延，应用性能，负载不均衡。</p><h4><span id="211-国外研究进展">2.1.1 国外研究进展</span></h4><hr><h5><span id="澳洲国立xu等人有容量限制边缘云放置问题">澳洲国立Xu等人：有容量限制边缘云放置问题</span></h5><p><strong>Efficient algorithms for capacitated cloudlet placements.</strong></p><p><u>问题思路：</u>将边缘云放入一些关键的接入点。考虑到（1）如何将移动用户请求分配给边缘云，最小化用户与提供服务边缘云的时延。</p><p><u>解决思路：</u>证明是NP问题（1）小规模：整形规划，精确解（2）大规模：使用贪婪算法，近似解。</p><p>此外，根据用户请求是否具有先难沟通的资源需求设计了2个能保证近似比的近似算法算法，在已经放置k个边缘云的前提下，动态的分配用户请求。</p><hr><h5><span id="澳洲国立-jia-提出了基于密度的边缘云放置算法">澳洲国立 Jia 提出了基于密度的边缘云放置算法。</span></h5><p>大规模无线城域网放置有限数量的边缘云和给用户分配边缘云的问题，以最小化迁移任务的平均等待时间。</p><img src="/images/static/边缘计算/book_pictures/a-2.1.2.jpg" alt="a-2.1.2" style="zoom:40%;"><p>过程：</p><ol><li>排队论设计一个多用户多边缘云的系统模型</li><li>提出k个边缘云的放置和用户分配算法。用于实际动态和持续移动用户的无线城域网中。</li><li>两种云放置算法： （1）<u><strong>负载最重的接入点优先放置算法</strong></u>和<strong><u>基于密度的边缘云放置算法</u></strong>。（2）<strong><u>负载最重的接入点优先放置算法</u></strong>即对整个网络的接入点按照<strong><u>用户积累任务到达的速率排序</u></strong>，在<strong><u>前k个</u></strong>任务量最大的接入点放置边缘云。</li></ol><p><u><strong>负载最重的接入点优先放置算法</strong></u>缺点</p><ol><li>最大负载点不一定接入最多，可能在1，2跳的位置范围，所以不应该是<strong>负载最大</strong>地方放置，而是<strong>用户接入点</strong>最密集的地方放置。</li><li>总是<strong>距离最近</strong>，边缘云<strong>工作过载</strong>，其他边缘云资源<strong>不充分使用</strong>。</li></ol><p>Jia 提出了基于密度的边缘云放置算法。</p><ol><li>在最密集地方放置，减小平均网络时延。</li><li>均衡用户工作负载，减少排队时间。</li></ol><hr><h4><span id="212-国内研究进展">2.1.2 国内研究进展</span></h4><h5><span id="南京大学-xiang-基于移动用用地理位置信息的自适应移动边缘云的放置方法">南京大学 Xiang <strong>基于移动用用地理位置信息的自适应移动边缘云的放置方法。</strong></span></h5><p>核心：最大化边缘云覆盖移动用户的数量。</p><h5><span id></span></h5><ol><li>k means 算法识别移动设备区域的中心位置，按访问路径图进行调整。</li><li>根据放置规则约束过滤袋哦不当的位置，结合中心位置间的距离。</li><li>根据区域结构生成边缘云的移动轨迹。</li></ol><h3><span id="22-计算卸载技术">2.2 计算卸载技术</span></h3><p>移动终端决策是否进行计算卸载？</p><p>移动设备通过把移动应用中的工作负载卸载到云端，利用云端手机、存储和处理数据，从而减少移动设备的程序执行时间并降低能耗。<strong>要求</strong>：实时性，低计算低通信时延。<strong><u>总结：云计算资源扩展移动设备能力</u></strong>。<strong>对象：计算密集型，交互密集型。</strong></p><p>架构：    </p><img src="/images/static/边缘计算/book_pictures/a-2.2.1.jpg" alt="a-2.2.1" style="zoom:53%;"><h4><span id="221-国外研究进展">2.2.1 国外研究进展</span></h4><h5><span id="eduardo-杜克-2010-maui-最早的计算卸载实现模型">Eduardo 杜克 2010 MAUI ,最早的计算卸载实现模型。</span></h5><p>简单思想：支持在程序运行时，细粒度的决定将哪些代码卸载至云端执行。将可卸载的运行方法用Remoteable标注。MAUI 系统决策引擎分析卸载的成本和收益，评估带宽和延迟，决定是否对改方法进行云端执行。</p><img src="/images/static/边缘计算/book_pictures/a-2.2.2.jpg" alt="a-2.2.2" style="zoom:30%;"><p>移动设备MAUI: 3个组件：</p><ul><li>分析器：负责分析卸载的成本和收益。</li><li>决策引擎：实际运行在MAUI服务器上。</li><li>客户端代理：负责收集传输卸载方法的状态信息。</li></ul><p>服务器设备MAUI: 4个组件：</p><ul><li>分析器：负责分析卸载的成本和收益，同上代理作用。</li><li>决策引擎：定期对方法是否需要卸载进行决策。</li><li>服务端代理：负责收集传输卸载方法的状态信息，同上代理作用。</li><li>MAUI控制器：身份检验和资源分配。</li></ul><p>优点：<strong><u>可有效降低移动端能耗。</u></strong></p><p>缺点：<strong><u>开发人员手工判断可卸载性</u></strong></p><hr><h5><span id="intel-byung-gon-clonecloud计算卸载模型">Intel       Byung-Gon CloneCloud计算卸载模型。</span></h5><p>简单思想：通过静态分析器根据限制条件对静态代码进行分析和动态环境分析相结合，识别出可以卸载到云端运行的方法。</p><img src="/images/static/边缘计算/book_pictures/a-2.2.3.jpg" alt="a-2.2.3" style="zoom:50%;"><ul><li>限制条件：访问本地资源代码得在本地</li><li>共享本地状态的代码必须在同一设备上运行</li><li>放置出现嵌套卸载</li></ul><p>动态分析器结合网络环境分析卸载成本收益，构造代码开销函数，用最优化求解器给出一个执行时间最短或能耗最低的应用划分方法。</p><p>流程:</p><p>先在云端为移动设备创建克隆虚拟机实例，如遇到卸载节点，运行线程挂起，状态信息发送到云端虚拟机，云端继续运行该线程，该线程不受影响，如试图访问卸载到云端云端的线程的相关信息，就会进入暂时挂起状态。当卸载到云端的线程执行完后，相关信息传回本地，合并到本地被挂起的线程，本地的唤醒后继续执行。</p><hr><h5><span id="karim-佐治亚理工-cosmos以风险控制方式进行卸载决策">Karim 佐治亚理工  COSMOS以风险控制方式进行卸载决策。</span></h5><h5><span id="根特大学的tim等人在增强现实用物计把cloudlet当作云端实现计算卸载">根特大学的Tim等人”在增强现实用物计把Cloudlet当作云端实现计算卸载。</span></h5><h5><span id="mahadev-cmu-在2009年提出cloudlet扩展移动设备的能力">Mahadev CMU 在2009年提出Cloudlet扩展移动设备的能力。</span></h5><h5><span id="karim-佐治亚理工-提出协调同域移动设备提供云服务-femtoclouds-提供了动态的配置的多设备的自发性服务云">Karim 佐治亚理工  提出协调同域移动设备提供云服务。FemtoClouds 提供了动态的，配置的，多设备的自发性服务云。</span></h5><p>安装FemtoClouds 客户端服务， 通过结合用户的输入来<u>估计移动设名的计算能力</u>， 以确定可用于共享的计算能力。 <u>客户端</u>利用设备<u>传感器、用户输人信息和历史信息</u>来构建和维护<u>用户配置文件</u>。<u>客户端服务与控制器共享可用信息</u>。最后，控制器负责估计<u>用户存在的时间</u>，并将参与的<u>移动设备“构建”成云</u>。Femto-Clouds能够使用户在时间上形成稳定性和可预测性，有基于个人和社会关系的信任潜力，能够获得设备使用的补偿。</p><h5><span id="cloudlet">*    Cloudlet</span></h5><p><strong>Coudlet是在移动用户附近的、可信的、资源丰富的计算机集群。</strong></p><p>​    Cloudlet是广泛分布的互联网基础设施，一个Cloudlet被视为一个云端。Cloudlet 能够实现自我管理，功率小，能够接到Internet,能够进行访问控制设置，与移动设备之间仅有1跳的距离。</p><p>​    这种资源管理模式使Cloudlet可以很方便地被部署在诸如咖啡店、图书馆、商场、医院等场所。为了保证部署的安全性，可以通过第三方远程监控把Cloudlet封闭在一个防篡改或防拆封的机柜中。</p><p>​    在利用Cloudlet时，移动设备充当瘦客户端，所有重要且复杂的计算都卸载到附近的Cloudlet中。如果移动设备附近没有可用的Cloudlet,则移动设备可以使用传统的远端云或者仅使用移动设备本身的资源。</p><p>​    简而言之Cloudlet 是个预先定义的接近移动设备的云，由些静态站组成， 通常安装在公共区域。据预测，Cloudle能够满足开发者和卸载基础架构的需求，提供具体的、有效的功能，实现更快的上市速度。</p><h5><span id="里昂大学的golchayi提出了自发临近云spc通过附近的一组移部身动设备以协作的方式执行任务卸载">里昂大学的GolchayI提出了自发临近云SPC:通过附近的一组移部身动设备以协作的方式执行任务卸载。</span></h5><p>移动设备之间通过中间件进行交互，对外，发出可提供的资源，如哪个时间段在什么地方可又实以提供什么样的资源等;对内，接收或拒绝其他临近设备发来的，计算请求。这类计算卸载算法需要进一 -步考虑激励措施，通过对设用户的行为进行激励，实现共利共赢。</p><h4><span id="222-国内研究进展">2.2.2 国内研究进展</span></h4><p>对代码进行自动划分并在运行时完成卸载的技术手段主要依赖于对运行环境中虚拟机的修改，从而支持计算进程的挂起、运行和恢复操作等。通过这种方式实现计算卸载有利也有弊，好处是卸载能力很强，缺点是限制了其适用场景，也因此降低了用户的接受度，此外，对虚拟机的修改还会进步地导致各类安全性问题。</p><p>（未完待续。。。）</p><hr><h3><span id="23-服务迁移技术">2.3 服务迁移技术</span></h3><p><strong>如何实现服务在多个云间<u>无缝迁移</u>？</strong></p><p>移动终端用户频繁移动，导致边缘云服务质量急剧下降，甚至服务中断，难以保证服务的连续性。</p><p>在移动边缘计算环境下实现服务的无缝迁移（即服务前移时间开销的最小化）。</p><p><strong><u>服务</u>迁移无缝迁移和<u>蜂窝网络</u>无缝迁移</strong></p><p>蜂窝网络无缝迁移——是通信的切换，在切换的过程中传输数据量不大。</p><p>服务无缝迁移——是把程序，数据和执行状态从一个边缘云迁移到另一个边缘云，数据传输量大。</p><p><strong>移动边缘计算中的服务迁移与云数据中心的虚拟机迁移</strong> </p><ul><li>优化标准不同</li></ul><p>移动边缘计算中的服务迁移——优化标准是迁移的总时间。</p><p>云数据中心的虚拟机迁移——虚拟机的宕机时间，在此时间段虚拟机实例会被暂停，占迁移总时间的一小部分。</p><ul><li>计算资源通信方式和质量</li></ul><p>移动边缘计算服务迁移没有保障。</p><p>虚拟机的迁移发生在云计算中心，不同计算节点之间有可靠的专用高速有线网络连接，且参数可以自设定。</p><p><strong>实现方法策略：</strong></p><p>基于决策过程的服务迁移。</p><p>基于虚拟机切换的服务迁移。</p><h4><span id="231-欧洲研究进展">2.3.1 欧洲研究进展</span></h4><h5><span id="基于决策过程的服务迁移"><u>基于决策过程的服务迁移。</u></span></h5><p>使用连续时间马尔科夫决策过程模型。</p><p><a href="https://zhuanlan.zhihu.com/p/28084942" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28084942</a></p><img src="/images/static/边缘计算/book_pictures/a-2.3.1.jpg" alt="a-2.3.1" style="zoom:50%;"><p>途径：考虑迁移策略，转移矩阵与激励，进而解决成本和服务质量的矛盾。</p><p>方法：制定一个迁移策略，当移动设备和数据中心的距离在一定范围时，就决定是否进行服务迁移。</p><p>基于决策的服务方法与两个对比方法（进入新边缘云的有效范围就迁移，距离初始边缘云一定范围就迁移）去最大期望收益。</p><h4><span id="232-美洲研究进展">2.3.2 美洲研究进展</span></h4><h5><span id="基于虚拟机切换的服务迁移"><u>基于虚拟机切换的服务迁移。</u></span></h5><p>问题：最保守的用户移动也会让网络性能显著退化。</p><h5><span id="satyanarayanan-cmu-虚拟机切换概念">Satyanarayanan CMU  虚拟机切换概念</span></h5><p>当用户移动时，虚拟机从一个Cloudlet传输到另一个Cloudlet，已实现较低的端到端时延——通过压缩迁移需要的数据量，在无线接入网中，实现1分钟的服务迁移。</p><p><strong>设计方案：</strong> </p><ul><li>优化总切换时间，而非宕机时间</li><li>动态适应网络带宽和Cloudlet负载</li><li>借助Cloudlet已有的虚拟机状态。</li></ul><p><img src="/images/static/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/book_pictures/a-2.3.2.jpg" alt="a-2.3.2"></p><h5><span id="ibm华生实验室的wang等人">IBM华生实验室的Wang等人</span></h5><p>通过利用<u>移动边缘计算</u>比境中<u>分散的网络和计算资源</u>，采用<u>分层思想</u>构建服务迁移框架<u>以最小化服务迁移的总时间</u>。其服务迁移框架由三部分组成。</p><p>​    如图所示，<u>第1层是基础层</u>， 用来记录所有相关的基础数据，包括操作系统、内核等，可以通过备份把这个基础数据包预先存储在移动边缘计算环境中，以供后续大量的应用程序重复便用。因为每个移动边缘计算环境中都存储有它的备份，所以在每次迁移过程中不需要传送基础层的信息，从而节省了迁移时间。</p><p>​    <u>第2层是应用程序层</u>，包含应用程序的“空”版本和专用数据。当整个应用程序要进行迁移时，则会先备份并把应用程序当作实例挂起。</p><p>​    <u>第3层是实例层</u>，存放应用程序的运行状态。当挂起需要被迁移的实例后，通过<u>增量编码的修改、去重和压缩等同步技术</u>，实现到终点的<u>无缝迁移。</u></p><p>​    </p><img src="/images/static/边缘计算/book_pictures/a-2.3.3.jpg" alt="a-2.3.3" style="zoom:50%;"><p><strong>服务从起始移动边缘计算环境至终点移动边缘计算环境流程</strong>    如图2-15.</p><ol><li>开始迁移正在运行的应用程序。如果终点移动边缘计算环境没有基础包数据，则需要先对基础层的内容进行备份，然后迁移至终点移动边缘计算环境。如果终点移动边缘计算环境已经存放基础包数据，则判断是否有需要迁移的应用程序数据。</li><li>其次，如果终点移动边缘计算环境没有相关的应用程序数据，则备份应用程序层的内容，进行下一步迁移。如果终点移动边缘计算环境已经存放了应用程序数据，则把应用程序作为实例进行迁移。</li><li>然后，当起始移动边缘计算环境确定需要迁移的实例时，暂时挂起要迁移的实例，完成修改、去重和压缩后的增量编码同步。最后，恢复实例，完成服务迁移过程。</li></ol><img src="/images/static/边缘计算/book_pictures/a-2.3.4.jpg" alt="a-2.3.4" style="zoom:50%;"><p>​    Wang等人(32)在设计服务务迁移算法时考虑了成本、网络结构和移动模型异质性等因素，通过底层预测机制预测在每个移动微云Cloudlet上运行的服务成本和迁移成本（与网络状态和用户偏好有关）。</p><p>​    预测机制可以<u>提供最可能的未来成本序列及实际成本和预测成本的偏差上限</u>，这对于需要<u>保证预测准确度</u>的预测方法是有效的。通过<u>预测未来成本参数</u>找到最优的<u>服务放置方法</u>，以<u>最小化平均成本</u>，通过定义一个<u><strong>时间窗口</strong></u>预测未来时间，如图2-16所示132)，其中共有Tmax 个时间片，<u>时间窗的大小是T</u>，即每T个时间片作为一个时间窗。在每个时间窗内，不同时间片之间存在<u>服务迁移</u>，因此需要设计<strong><u>服务迁移策略</u></strong>使得<u><strong>该时间窗</strong></u>内的<strong><u>服务迁移成本最低</u></strong>。不同时间窗之间是相互独立的，<u>不同时间窗</u>连接处的两个时间片之间<u>不进行服务迁移。</u></p><p>​    时间窗不能太大，因为越靠后的时间片，预测误差越大;时间窗也不能太小，否则就失去了优化服务迁移策略的目的。因此，<u>需要对时间窗的大小进行优化</u>。</p><p><strong>Wang等人提出一种找到最优时间窗的方法，考虑了预测误差并最小化服务迁移平均成本的上限。</strong></p><img src="/images/static/边缘计算/book_pictures/a-2.3.5.jpg" alt="a-2.3.5" style="zoom:70%;"><h3><span id="24-群智协同技术">2.4 群智协同技术</span></h3><p><strong>如何群体完成个题难以完成的任务技术？</strong></p><p>​    在移动边缘计算环境下，当大量用户访问边缘云时，具有有上体资源的移动边缘计算服务器可能出现工作负荷过载的现在这种情况下，移动边缘计算系统可以通过群智协同减轻服务器的工作负载， 以平衡服务器的工作负荷，减少用户请求的排队时间。 </p><p>​    然而，边缘云之间应该如何协作并没有固定的策略， 因出，产生了移动边缘计算环境下的群智协同问题。群智协同是一种<u>分布式的问题解决机制</u>，它通过大量用户的相互协作来完成仅靠单个用户难以完成的复杂任务，例如，用户可以利用群智协同来完成移动旅游指导、停车位搜索等具有实时性的复杂任务。</p><p>​    假如边缘云A的工作负荷过载，边缘云B闲置了很多资源，边缘云A和边缘云B可以通过相互协作实现资源共享，从而可以为移动用户提供更多的资源，增强用户体验，提高资源利用率，进而增加云计算服务提供商的收益。群智协同的主要参与者包括任务请求人和任务完成人(也称为工人)，他们通过任务联系到一起。</p><p>​    任务请求人利用群智协同完成自己任务的主要步骤包括:①设计任务:②利用群智协同平台发布任务、等待答案;③拒绝或者接收工人的答案:③根据工人的答案整理结果，完成自己的任务。</p><p>​    工人使用群智协同的主要步骤包括:①查找感兴趣的任务;②接收任务;③回答任务;④提交答案[3。</p><h2><span id="第3章-典型应用场景">第3章 典型应用场景</span></h2><h3><span id="31-车联网">3.1 车联网</span></h3><p>Internet of Vehicles</p><p>车联网体系结构：</p><p>​        <strong>4层架构</strong></p><img src="/images/static/边缘计算/book_pictures/a-3.1.1.jpg" alt="a-3.1" style="zoom:40%;"><p><img src="/images/static/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/book_pictures/a-3.1.2.jpg" alt="a-3.1.2"></p><h3><span id="32-ar-增强现实">3.2 AR 增强现实</span></h3><img src="/images/static/边缘计算/book_pictures/a-3.2.jpg" alt="a-3.2" style="zoom:30%;"><h3><span id="33-医疗服务">3.3 医疗服务</span></h3><img src="/images/static/边缘计算/book_pictures/a-3.4.jpg" alt="a-3.4" style="zoom:27%;"><h3><span id="34公共安全">3.4公共安全</span></h3><p><img src="/images/static/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/book_pictures/a-3.5.1.jpg" alt="a-3.5.1"></p><img src="/images/static/边缘计算/book_pictures/a-3.5.2.jpg" alt="a-3.5.2" style="zoom:50%;"><h2><span id="第4章-工具与实验平台">第4章 工具与实验平台</span></h2><h3><span id="41-ifogsim">4.1 iFogSim</span></h3><h3><span id="42-jade">4.2 JADE</span></h3><h3><span id="43-oai">4.3 OAI</span></h3><h3><span id="44-openstack">4.4 OpenStack</span></h3><h3><span id="45-docker">4.5 Docker</span></h3><h3><span id="46-openlte">4.6 OpenLTE</span></h3><h2><span id="第5章-挑战">第5章 挑战</span></h2><h3><span id="51-系统架构">5.1 系统架构</span></h3><ul><li><p><strong>笼式安全</strong>——安全等级与在运营商完全控制下的安全水平相同。</p></li><li><p><strong>数据压缩和有效性</strong> ——带宽的使用和结果数据的有效性。</p></li><li><p><strong>权衡定理</strong> ——4个特点：移动性，延迟性，性能容量，隐私。   提高隐私性和容量，就意味着性能和延迟的变换（特点对立性）。</p></li><li><p><strong>数据源</strong>—— 输入源，程序，用户对象。   数据完整性的保证。</p></li><li><p><strong>在网络边缘启用QoS</strong>（端到端的服务质量）  运营商的合作，两边协商配置成本高，不易扩展。。。</p></li></ul><h3><span id="52-服务与应用">5.2 服务与应用</span></h3><ul><li><strong>命名，识别和发现资源</strong></li><li><strong>标准化API</strong> ——计算资源来自不同供应商时，为了实现正常沟通和协同，需要标准化api。</li><li><strong>激励机制</strong> ——激励文案和商业模式鼓励使用边缘计算应用。</li><li><strong>实时处理和通信</strong> ——边缘设备计算、通信能力有限。 （视频分析，活动分析难）。</li><li><strong>应用程序开发和测试工具</strong>——开发应用工具。</li><li><strong>边缘服务生态系统</strong></li></ul><h3><span id="53-安全与隐私">5.3 安全与隐私</span></h3><ul><li>*<em>身份认证 *</em>——传统的基于公钥基础设施PKI的身份验证对物联网系统来说不能很好扩展。</li><li><strong>信任机制</strong> ——服务可信赖性，处理不可信任的服务。</li><li>*<em>恶意节点检测 *</em>——恶意计算节点伪装合法节点来交换和手机物联网设备产生的数据。</li><li><strong>数据隐私</strong> —— 资源受限的物联网设备缺乏加密和解密数据的能力。数据量增长，保存在通信层，处理层，所以要保护用户对设备中某些应用生成数据的使用模式。</li><li><strong>入侵检测和访问控制</strong> ——设计优化一套监测系统，以确保只有受信任的参与者才能完成给定操作。检测不当行为或恶意的移动设备。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;移动边缘计算-Moblie-Edge-Computing&quot;&gt;&lt;a href=&quot;#移动边缘计算-Moblie-Edge-Computing&quot; class=&quot;headerlink&quot; title=&quot;移动边缘计算 Moblie Edge Computing&quot;&gt;&lt;/a&gt;移动边缘计算 Moblie Edge Computing&lt;/h1&gt;&lt;p&gt;北京邮电大学出版社&lt;/p&gt;
&lt;p&gt;王尚广，周傲，魏晓娟，柳玉炯   编著&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;终端设备访问云计算数据中心为用户提供服务——增加了&lt;u&gt;网络负荷和数据传输时延&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;移动边缘计算——利用无线接入网络&lt;u&gt;就近&lt;/u&gt;提供移动用户IT所需要的&lt;u&gt;服务和计算功能&lt;/u&gt;，创造一个&lt;u&gt;高性能&lt;/u&gt;，&lt;u&gt;低延迟&lt;/u&gt;与&lt;u&gt;高带宽&lt;/u&gt;的服务环境。&lt;/p&gt;
    
    </summary>
    
    
      <category term="边缘计算" scheme="https://MIchaelFU0403.github.io/categories/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="新手入门" scheme="https://MIchaelFU0403.github.io/tags/%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>软件架构技术课堂笔记2</title>
    <link href="https://michaelfu0403.github.io/2020/04/23/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B02/"/>
    <id>https://michaelfu0403.github.io/2020/04/23/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B02/</id>
    <published>2020-04-23T14:25:31.000Z</published>
    <updated>2020-04-23T14:39:48.162Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="软件架构技术课堂笔记2">软件架构技术课堂笔记2</span></h3><p>&lt;会存在很多问题，日后的学习会进行更正&gt;</p><h3><span id="spring-框架">Spring 框架：</span></h3><blockquote><p>Spring是分层的javaEE应用一站式轻量级开源框架，由Rod Johnson创建；Spring是为简了化企业级系统开发而诞生的；使用Spring，可以用简单的JavaBeans来实现那些EJB的功能。<br>如果一个系统不需要分布式计算或声明式事务支持，EJB并不是最好的选择；Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。<br>Spring的核心是控制反转（IoC）和面向切面编程（AOP）。提供了展现层SpringMVC、持久层SpringJDBC以及业务层是否管理等众多企业级应用技术。Spring IoC和AOP能让代码很好的分层和解耦，从而提高可维护性和可扩展性，便于测试</p></blockquote><a id="more"></a><h3><span id="spring-模块概述">Spring 模块概述：</span></h3><h3><span id="核心容器beanfactory">核心容器(BeanFactory)</span></h3><blockquote><p>核心容器提供 Spring 框架的基本功能(Spring Core)。<br>核心容器的主要组件是 <strong>BeanFactory</strong> ，它是工厂模式的实现，作为<strong>IoC容器</strong>管理Bean。<br><strong>BeanFactory</strong> 使用<strong>控制反转（IOC） 模式</strong>将应用程序的配置和依赖性规范与实际的应用程序代码分开，将类和类之间的依赖从代码中脱离出来，用配置的方式进行依赖关系描述，由IoC容器负责依赖类之间的创建、拼接、管理、获取等工作。 BeanFactory接口是Spring框架的核心接口，实现了容器的许多核心功能。<br><strong>相关jar包：spring-core.jar，spring-beans.jar</strong></p></blockquote><hr><h4><span id="上下文applicationcontext">上下文(ApplicationContext)：</span></h4><p>Spring上下文是一个配置文件，向 Spring框架提供上下文信息。<br><strong>ApplicationContext</strong>是Context模块的核心接口。可用于扫描<br><strong>相关jar包：spring-context.jar</strong></p><hr><h4><span id="spring-ioc容器">Spring IoC容器：</span></h4><blockquote><p><strong>BeanFactory是Spring框架最核心接口</strong>，BeanFactory使得管理不同类型的Java对象成为可能，应用上下文（ApplicationContext）建立在BeanFactory基础上，提供了更多面向应用的功能。一般称BeanFactory为<strong>IoC容器</strong>，称ApplicationContext为<strong>应用上下文（有时也称为Spring容器）</strong>。<br><strong>从用途上划分</strong>，BeanFactory是Spring框架的基础设施。而其子类ApplicationContext由BeanFactory派生而来，提供了更多面向实际应用的功能。<br>创建ApplicationContext对象，代表一个Spring控制反转容器启动。</p></blockquote><hr><h4><span id="applicationcontext的几种常用实现">ApplicationContext的几种常用实现：</span></h4><ol><li><strong>ClassPathXmlApplicationContext</strong>：从类路径下的一个或多个XML文件中加载上下文定义，即加载Bean定义的信息。把应用上下文的定义文件作为类资源。（对应的XML名称）</li><li><strong>FileSystemXmlApplicationContext</strong>：从文件系统中的一个或多个XMl文件中加载上下文定义，即Bean定义的信息。(绝对路径)</li><li><strong>AnnotationConfigApplicationContext</strong>:从一个或多个基于Java的配置类中加载Spring应用上下文。</li></ol><hr><h4><span id="spring-ioc容器启动实例化">Spring IoC容器启动（实例化）</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);  &#x2F;&#x2F;applicationContext为对应配置文件的名字。子类实现父类接口</span><br></pre></td></tr></table></figure><hr><h3><span id="spring容器-bean配置-bean实现类及应用程序四者关系">Spring容器、Bean配置、Bean实现类及应用程序四者关系</span></h3><p><img src="/images/static/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%842_1.png" alt="四者关系"></p><ol><li><strong>Bean.XML中记录Bean的实现及依赖关系</strong></li><li>Spring容器根据各种形式的Bean配置信息在<strong>容器内部建立Bean定义注册表，根据注册表加载、利用Java语言的反射功能实例化实例化Bean。</strong></li><li>并建立Bean和Bean的<strong>依赖关系</strong>。</li><li>最后将准备就绪的Bean放到<strong>Bean缓存池</strong>中，<strong>供外层应用调用</strong>。</li><li>Spring管理的Java对象称为<strong>“beans”。</strong></li></ol><p>Spring装配Bean前先要创建XML文件。</p><ul><li><p>applicationContext.xml 文件中要有<strong>官方给出的bean详细配置</strong></p></li><li><p>除此之外，这里在用到注解时，也要通过<strong>context告知spring容器在创建容器对象时要扫描的包。</strong></p><p><img src="/images/static/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%842_2.png" alt="四者关系"></p></li></ul><hr><h3><span id="spring的依赖注入di的具体流程">Spring的依赖注入DI的具体流程：</span></h3><ol><li>首先先在service层中建立一个接口叫AccountService</li><li>在同路径下建立impl （implement类）AccountServiceImpl去实现AccountService接口，并重写AccountService中的方法。</li><li>在src/com的路径下建立XML配置文件 bean.xml：进行bean的配置信息设置，用于在AccountServiceTest测试类中实现对象的实例化。<br>代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;accountService&quot; </span><br><span class="line">class&#x3D;&quot;com.service.impl.AccountServiceImpl&quot;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></li><li>AccountServiceTest中首先先实例化spring容器AccountServiceTest。之后<br>通过ApplicationContext的getBean方法获取一定名字的bean。通过强转或字节码的形式实例化对象。<br>代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">AccountService as &#x3D; ac.getBean(&quot;accountService&quot;, AccountService.class);</span><br></pre></td></tr></table></figure></li></ol><hr><h3><span id="spring中的依赖注入di可以注入的类型">Spring中的依赖注入(DI)可以注入的类型：</span></h3><p>1.基本类和String<br>2.其他bean类型(必须在注解文件中或者注解配置过的bean)：<br>//例如date类型： 用ref将date类的实例注入到accountService中，其他同上节课,value=“要注入的值”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;accountService1&quot; class&#x3D;&quot;com.service.impl.AccountService_1&quot;&gt;  &lt;!--class为类的位置--&gt;</span><br><span class="line">    &lt;constructor-arg name&#x3D;&quot;birthday&quot; ref&#x3D;&quot;now&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;now&quot; class&#x3D;&quot;java.util.Date&quot;&#x2F;&gt; &lt;!-- now  &#x3D;  new Date() --&gt;</span><br></pre></td></tr></table></figure><p>3.复杂类型(集合类型)<br>复杂类型注入：<br>    1. 标签：list array set(父集标签：list array set。子集标签：value)<br>    2.  map示例：</p><pre><code>&lt;property name=&quot;myMap&quot;&gt;    &lt;map&gt;     &lt;entry key=&quot;testA&quot; value=&quot;aaa&quot;/&gt;        &lt;entry key=&quot;testB&quot;&gt;            &lt;value&gt;bbb&lt;/value&gt;        &lt;/entry&gt;     &lt;/map&gt; &lt;/property&gt;</code></pre><p>3.Properties示例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;myProps&quot;&gt; &lt;props&gt;</span><br><span class="line">        &lt;prop key&#x3D;&quot;testC&quot;&gt;ccc&lt;&#x2F;prop&gt;</span><br><span class="line">        &lt;prop key&#x3D;&quot;testD&quot;&gt;ddd&lt;&#x2F;prop&gt; &lt;&#x2F;props&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>优势：结构相同的，标签可以进行互换</li></ol><hr><h3><span id="三种依赖注入方式">三种依赖注入方式：</span></h3><p>xml：</p><ul><li>使用构造函数<br>标签<code>constructor-arg</code></li></ul><p><strong>构造函数注入</strong>是除<strong>属性注入</strong>之外的另一种常用注入方式，他保证一些必要的属性在Bean实例化时就得到设置，并<strong>确保Bean实例在实例化</strong>后就可以使用。<br><strong>使用构造函数注入的前提是Bean必须提供带参的构造函数</strong>。    </p><hr><ul><li>set方法(属性注入):</li></ul><ol><li><p>实际应用中最常采用的注入方式。<br>通过SetXxx（）方法注入Bean的属性值或依赖对象，属性注入要求Bean提供一个默认的构造函数，并为需要注入的属性提供对应的Setter方法。</p><ol start="2"><li>涉及的标签：property</li><li>出现的位置：bean标签内部</li><li>标签的属性<pre><code>*   name:用于指定注入时所调用的set方法名称*  value:用于提供基本类型和String类型的数据*  ref：用于指定其他bean类型数据</code></pre></li><li>寻找类中set方法:<br>set/get   set - 属性名称 :将属性名称的开头字母转换成小写</li><li>优势：创建对象时没有明确的限制，可直接赋值设置也可以使用默认的构造方法。</li><li>弊端： 如果有某成员必须有值，则获取对象时可能set方法没有执行。<br>例子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id &#x3D;&quot;accountService2&quot; class&#x3D;&quot;com.service.impl.AccountService_2&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;李四&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;age&quot; value &#x3D;&quot;20&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;birthday&quot; ref&#x3D;&quot;now&quot;&#x2F;&gt; </span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>注意：setXX要与name 一致</li></ol></li></ol><hr><ul><li>注解：根据提供的注解.</li></ul><p><strong>(Component,   Controller,   Service,   Repository)</strong></p><ul><li>作用：和xml中配置bean作用功能一样</li><li>属性：value—和bean中id的作用一样，标识作用</li><li>位置：类上(接口的实现类上)  如下所示： </li></ul><p><code>@Service(&quot;accountService&quot;)</code><br><code>//@Component(&quot;accountService&quot;)</code><br><code>public class AccountService_4 implements AccountService{}</code></p><p>用注解的方式时：要在根目录的xml 文件中加入，用于扫描</p><p><code>&lt;!--  告知spring容器在创建容器对象时要扫描的包 --&gt;</code><br><code>&lt;context:component-scan base-package=&quot;com&quot;/&gt;</code></p><p>PS: XML的标签可以是单个&lt;&gt;，也可以有&lt;/&gt;配对</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;软件架构技术课堂笔记2&quot;&gt;&lt;a href=&quot;#软件架构技术课堂笔记2&quot; class=&quot;headerlink&quot; title=&quot;软件架构技术课堂笔记2&quot;&gt;&lt;/a&gt;软件架构技术课堂笔记2&lt;/h3&gt;&lt;p&gt;&amp;lt;会存在很多问题，日后的学习会进行更正&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;Spring-框架：&quot;&gt;&lt;a href=&quot;#Spring-框架：&quot; class=&quot;headerlink&quot; title=&quot;Spring 框架：&quot;&gt;&lt;/a&gt;Spring 框架：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Spring是分层的javaEE应用一站式轻量级开源框架，由Rod Johnson创建；Spring是为简了化企业级系统开发而诞生的；使用Spring，可以用简单的JavaBeans来实现那些EJB的功能。&lt;br&gt;如果一个系统不需要分布式计算或声明式事务支持，EJB并不是最好的选择；Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。&lt;br&gt;Spring的核心是控制反转（IoC）和面向切面编程（AOP）。提供了展现层SpringMVC、持久层SpringJDBC以及业务层是否管理等众多企业级应用技术。Spring IoC和AOP能让代码很好的分层和解耦，从而提高可维护性和可扩展性，便于测试&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://MIchaelFU0403.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://MIchaelFU0403.github.io/tags/java/"/>
    
      <category term="学校" scheme="https://MIchaelFU0403.github.io/tags/%E5%AD%A6%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>软件架构技术课堂笔记1</title>
    <link href="https://michaelfu0403.github.io/2020/04/21/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B01%20/"/>
    <id>https://michaelfu0403.github.io/2020/04/21/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B01%20/</id>
    <published>2020-04-21T13:45:28.000Z</published>
    <updated>2020-04-21T15:01:25.568Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="软件架构技术课堂笔记1">软件架构技术课堂笔记1</span></h3><p>&lt;会存在很多问题，日后的学习会进行更正&gt;</p><h3><span id="什么是架构">什么是架构?</span></h3><p><strong>架构</strong> 是一系列相关的抽象模式，用于指导大型软件系统各方面的设计。是软件系统从整体到部分的最高层次的抽象划分(系统设计规划图）</p><a id="more"></a><p>根据关注的角度不同，架构大概有三种:<strong>（前几年比较流行：MVC）</strong><br><strong>逻辑架构</strong> : 主要描述软件系统中元件之间的关系，例如用户界面，数据库,业务逻辑元件等等。<br><strong>物理架构</strong> : 软件元件是如何安装到硬件上的。<br><strong>系统架构</strong> : 系统的非功能性特征，如扩展性、可靠性、强壮性、灵活性、性能等。</p><p>架构一个软件系统，通常就会用到<strong>分层技术</strong>。<br>现在比较流行的架构 <strong>MVVM(前后端分离)</strong></p><h3><span id="分层技术的基本概念">分层技术的基本概念</span></h3><p>1.软件开发主要任务，是要保证软件的高效运转和功能的正常实现。分层技术通过对软件内部结构进行解析，赋予不同层次结构的不同功能，从而提高软件功能的丰富程度和使用性能。</p><p>2.分层技术为软件的不同层次结构分配不同的解决过程，各个层次结构间组成一个严密的封闭系统。不同层面结构彼此平等。分层技术最主要的应用领域是软件架构开发。</p><p>3.分层技术是将软件按照一定逻辑关系分解成多个面，每个层面都有各自的功能，组合起来则形成完整的软件。各分层之间具有一定独立性，需要完善软件功能或者对软件进行升级改造时，只需要对涉及到的分层进行完善修改，对其它层面几乎没有影响，使软件升级和改造工作变得更加简单，提高工作效率。</p><p>4.分层技术通过分层模式来定义各个功能层次的接口。按照这种设计方式，<br>软件复用性得以大幅提高，对于软件开发、设计十分有利。开发之后的<br>各个层面能够充分利用标准接口，有效实现自动对接。</p><h3><span id="软件分层技术">软件分层技术</span></h3><p>分层技术是当前软件开发设计中使用频率十分高的一种设计方式，多层分布技术已成为今后软件开发设计的主要方向之一。</p><p>软件分层的目的就是为了架构一个好的系统，通过分层：<br>1.<strong>降低耦合</strong>，降低层与层之间的依赖。有利于应对需求变更，有利于排错，有利于后期的维护。</p><p>2.<strong>简化问题复杂度</strong>，各层分工明确。例如OSI七层模型和简化的tcpip协议的四层模型。把一个复杂问题分解，达到化繁为简的效果。但是，一般针对系统大小而言的，如果一个小的系统,也可能会把简单问题复杂化（如多人协调工作，要用到分层设计）。</p><p><strong>软件分层技术作用特点:</strong><br>1.<strong>有利于团队开发，分工合作</strong>。开发人员可以只关注整个结构中的其<br>中某一层，三层架构中，基本可以将工作分为界面设计人员、业务<br>实现人员、数据库设计人员。只要各层接口在开发前规定好，那么，<br>各层可以独立开发升级和维护。</p><p>2.<strong>有利于标准化</strong>。在开发过程中可以将每层的代码进行规范，固定开发语言的风格，可以忽略数据库的差异，设计完善的数据访问层可以将数据库的差异完全屏蔽，可以快速安全地实现数据库的切换等。</p><p>3.方便用新的实现来<strong>替换原有层次的实现</strong>，便于系统维护/升级。各层间通过接口解耦，接口与实现分离，从而可以非常方便的替换掉实现，或者升级实现等。</p><p>5.<strong>逻辑复用</strong>。例如原来基于B/S开发的程序现在要改成C/S，那么只要业务层的接口没有改变，那么业务层和数据层都可以直接复用。</p><p>6.<strong>方便部署</strong>。将各层开发成组件，则可以独立部署。分层可以把各层部署在不同的地方，<strong>实现分布式系统</strong>。</p><h3><span id="mvc-模型-视图-控制器">MVC   (模型-视图-控制器)</span></h3><p> Model   负责存储系统的中心数据，将数据保存至一个模型中，方便使用。<br>  View:    显示界面（html, jsp,asp,php…）。<br> Controller:    处理用户输入的信息，进行向模型发送数据。</p><h3><span id="spring框架">Spring框架</span></h3><blockquote><p>Spring框架的作用<br>1.软件架构中利用Spring框架管理系统的各个组件(Action、Service、DAO)，使用Spring的Ioc和AOP机制实现应用程序中的Bean组件等的关联，从而实现了低耦合调用，增强系统可维护性和扩展性。<br>2.Spring通过控制反转(IoC) 技术实现低耦合。</p></blockquote><h3><span id="spring概述">Spring概述</span></h3><blockquote><p>Spring用于管理组件，组件的管理需要进行配置<br>Spring为组件提供服务,服务的使用也需要配置<br>Spring是-个轻量级的框架，提供管理组件和提供服务的实现类。</p></blockquote><hr><h4><span id="spring-frame-下载的集成框架包中">Spring Frame 下载的集成框架包中：</span></h4><blockquote><ol><li>dist (开发者代码  当前版本可使用的)<ul><li>jar包（类zip，解压内容）</li><li>javadoc.jar 文档说明</li><li>source 源码</li></ul></li><li>docs 开发文档</li><li>schema  XML文档约束</li></ol><p><strong>schema</strong>是新的XML文档约束；DTD出现的比较早. Schema要比DTD强大很多； Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。( XML Schemas Definition )(xmlns : XML namespace)</p></blockquote><p>###Spring 常见核心jar包</p><p><strong>core</strong> （核心工具类的jar包）<br><strong>beans</strong> （访问配置文件，创建和管理bean的主要内容）<br><strong>context</strong> （提供基础的Ioc功能上的扩展服务）<br><strong>epression</strong> （Spring的表达式语言）<br><strong>第三方依赖包</strong>，Apache 的commons.logging    (日志处理的内部包)</p><p><em>移除某个包后变红反映的是</em></p><blockquote><ol><li><strong>耦合</strong>：程序之间的依赖关系<br>包括：</li></ol><ul><li>类之间的依赖</li><li>方法之间的依赖</li></ul><ol start="2"><li>解耦操作：<br>降低程序间的依赖关系（编译期不依赖，运行时才依赖 ）<br>如何进行解耦：</li><li>解耦的思路：</li></ol><ul><li>使用反射创建对象，避免使用new关键字<br>（如案例中的 new     com.mysql.jdbc.Driver）</li><li>读取配置文件来获取创建对象的全限定类名（运行期，创建对象，工厂模式）</li></ul></blockquote><blockquote><p>数据库的使用方式<br>1.注册驱动<br>2.获取连接<br>3.获取操控数据的预处理对象<br>4.执行sql返回执行结果<br>5.遍历结果集<br>6.关闭资源</p></blockquote><h4><span id="beanxml">Bean.xml</span></h4><p>xml放在src目录下<br>xml的两种约束形式  限制随意标签的修改，不像html，可以修改写错。<br>用于作为配置文件。（dtd  ，xsd ）<br>Spring framework learn 文档说明 core<br>把创建对象交给spring来管理</p><h4><span id="bean-属性">Bean 属性：</span></h4><ol><li><p>Id  创建对象唯一表示</p></li><li><p>Class  类文件权限名称</p></li><li><p>Scope：表示当前对象的作用范围</p><ul><li>singleton:默认值，表示当前对象为单例对象</li><li>Prototype：表示当前对象为多例对象  </li><li>request：Spring创建bean对象，将对象存储在request域中。</li><li>session：Spring创建bean对象，将对象存储在session域中。</li><li>global session: 分布式环境web项目，如果没有，则与session一样。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;singleton</span><br><span class="line">默认：us1&#x3D;&#x3D;us2 (则为单例模式)</span><br><span class="line">UserService usl &#x3D; (UserService) ac. getBean( s: &quot; userService&quot; ) ;&#x2F;&#x2F;强转</span><br><span class="line">UserService us2 &#x3D; ac. getBean( s:&quot; userService&quot; , UserService. class)</span><br><span class="line"> &#x2F;&#x2F; 转化为UserService的字节码</span><br><span class="line">us1&#x3D;&#x3D;us2 (则为单例模式) &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Init-method:  在指定类中初始化方法名称（如果有该方法，则自动进行）</p></li><li><p>Destroy:  在指定类中销毁方法名称（释放容器时执行）<br><code>主线程结束 spring容器还未关闭释放，则无法调用destroy方法</code></p></li></ol><p><em>代码演示节选：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import org. spr ingframework. context. Appl icationContext;</span><br><span class="line">import org. spr ingframework. context. support. ClassPathXmlApplicat ionContext ;</span><br><span class="line">public class TestDemo2</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">UserService us &#x3D; new UserService() ;</span><br><span class="line">us. add() ;</span><br><span class="line">&#x2F;&#x2F;1.获取核心容器对象</span><br><span class="line">ApplicationContext ac &#x3D;    </span><br><span class="line">new ClassPathXmlApplicationContext ( configLocation:”bean.xml&quot;) ;  </span><br><span class="line">&#x2F;&#x2F;bean目录字符串 接口实现类</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.给句id获取Bean对象</span><br><span class="line">&#x2F;&#x2F;0bject obj &#x3D; ac. getBean( &quot;userService&quot;);</span><br><span class="line">UserService us1 &#x3D;(UserService) ac.getBean(&quot;userService&quot;);</span><br><span class="line"></span><br><span class="line">System.out.printlnn(usl) ;&#x2F;&#x2F;打印usl 看对象是否创立成功</span><br><span class="line">Usl.add();&#x2F;&#x2F;调用对象的方法</span><br></pre></td></tr></table></figure><h4><span id="小结-spring-配置步骤">小结： spring 配置步骤：</span></h4><ol><li>导入相关的jar包并添加</li><li>在类的根目录下建立一个非中文的任意名称的xml、文件（bean.xml)</li><li>让spring管理资源，在配置文件中配置要创建的对象</li><li>测试<br>1）ApplicationContext 对象  spring容器的顶级接口，超类，<br>2）根据 id 获取对象</li></ol><p><img src="/images/static/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%841.png" alt="图"></p><h3><span id="实现类">实现类：</span></h3><ol><li>ClassPathXmlApplicationContext:可以加在类路径下的配置文件，要求配置<br>文件必须在类路径下，如果不在，加载不了。(常用)</li><li>FileSystemXmlApplicationContext:可以加在磁盘任意路径下配置文件(绝对<br>路径–必须要求访问权限)</li><li>AnnotationConfigApplicationContext:用于读取注解创建的容器</li></ol><h4><span id="类的介绍">类的介绍：</span></h4><p>BeanFactory： spring 容器的顶级接口<br>ApplicationContext ：BeanFactory 的子接口</p><h4><span id="applicationcontext-和-beanfactory-区别">ApplicationContext 和 BeanFactory 区别:</span></h4><p><strong>创建对象的时间点不一样。</strong><br>ApplicationContext ，只要读取配置文件，默认情况就会创建对象。<br>BeanFactory 什么时候用到该对象则才创建对象。</p><h3><span id="bean注入方法">Bean注入方法：</span></h3><ol><li>方法：Spring 容器调用无参构造方法注入，创立对象。</li></ol><p><code>userService us1 =(UserService) ac.getBean(&quot;userService&quot;); //类名</code></p><blockquote><p>bean属性：<br>    <strong>name:</strong>指定参数在构造方法中的名称<br>    <strong>index:</strong>指定参数列表中的索引位置<br>    <strong>type:</strong>指定参数列表中的参数类型 （多个相同会出问题）<br>    <strong>value:</strong>赋值，基本类型或String类<br>    <strong>ref:</strong>    可以赋值其他bean类型的对象</p></blockquote><h4><span id="使用构造方法的注入过程">使用构造方法的注入过程</span></h4><p>若想要调用有参数的构造方法。则：<br>使用构造方法的注入过程方式<br>要求：需要提供一个对应参数列表的构造函数<br>标签： constructor-arg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;”userService ” class&#x3D;”com.test.UserService”&gt;</span><br><span class="line"> &lt;constructor-arg name&#x3D;”name” value&#x3D;”张三”&gt;&lt;&#x2F;constructor-arg&gt;  </span><br><span class="line">&lt;!-- （参数名 参数值） --&gt;</span><br><span class="line"> 或者：&lt;constructor-arg index&#x3D;”0” value&#x3D;”李四”&gt;&lt;&#x2F;constructor-arg&gt; （</span><br><span class="line"> &lt;!-- (索引位置 参数值） --&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>== 比较地址的值<br>equals  实际的值</p><p>比较对象 需重写equals方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;软件架构技术课堂笔记1&quot;&gt;&lt;a href=&quot;#软件架构技术课堂笔记1&quot; class=&quot;headerlink&quot; title=&quot;软件架构技术课堂笔记1&quot;&gt;&lt;/a&gt;软件架构技术课堂笔记1&lt;/h3&gt;&lt;p&gt;&amp;lt;会存在很多问题，日后的学习会进行更正&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是架构&quot;&gt;&lt;a href=&quot;#什么是架构&quot; class=&quot;headerlink&quot; title=&quot;什么是架构?&quot;&gt;&lt;/a&gt;什么是架构?&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;架构&lt;/strong&gt; 是一系列相关的抽象模式，用于指导大型软件系统各方面的设计。是软件系统从整体到部分的最高层次的抽象划分(系统设计规划图）&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://MIchaelFU0403.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://MIchaelFU0403.github.io/tags/java/"/>
    
      <category term="学校" scheme="https://MIchaelFU0403.github.io/tags/%E5%AD%A6%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>Get to know Markdown</title>
    <link href="https://michaelfu0403.github.io/2020/04/18/markdown%20grammar/"/>
    <id>https://michaelfu0403.github.io/2020/04/18/markdown%20grammar/</id>
    <published>2020-04-18T01:44:28.000Z</published>
    <updated>2020-04-20T14:17:15.698Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="welcome-to-markdown">Welcome to Markdown</span></h1><h1><span id="第一次学习markdown总结一些常用的方法">第一次学习Markdown，总结一些常用的方法。</span></h1><a id="more"></a><!-- toc --><ul><li><a href="#introducing-markdown">Introducing Markdown</a></li><li><a href="#tutorial">Tutorial</a><ul><li><a href="#1-headings"><strong>1. Headings</strong></a></li><li><a href="#2-toc"><strong>2. TOC</strong></a></li><li><a href="#3-citation-a-single-line"><strong>3. Citation (A single line)</strong></a></li><li><a href="#4-citation-multiple-lines"><strong>4. Citation (Multiple lines)</strong></a></li><li><a href="#5-nesting"><strong>5. Nesting</strong></a></li><li><a href="#6-code-block-in-a-single-line"><strong>6. Code block in a single line</strong></a></li><li><a href="#7-code-block-in-lines"><strong>7. Code block in lines</strong></a></li><li><a href="#8-self-defining-the-color-of-code"><strong>8. Self-defining the color of code</strong></a></li><li><a href="#9-insertion-of-links"><strong>9. Insertion of links</strong></a></li><li><a href="#10-insertion-of-photos"><strong>10. Insertion of photos</strong></a></li><li><a href="#11-insertion-of-videos"><strong>11. Insertion of videos</strong></a></li><li><a href="#12-ordered-list"><strong>12. Ordered list</strong></a></li><li><a href="#13-unsorted-list"><strong>13. Unsorted list</strong></a></li><li><a href="#14-nesting-list"><strong>14. Nesting list</strong></a></li><li><a href="#15-nesting-list-with-code"><strong>15. Nesting list with code</strong></a></li><li><a href="#16-latex"><strong>16. LaTeX</strong></a></li><li><a href="#17-style-of-fonts"><strong>17. style of fonts</strong></a><ul><li><a href="#italic">italic</a></li><li><a href="#boldface">boldface</a></li><li><a href="#italic-boldface">italic + boldface</a></li><li><a href="#delated-line">delated line</a></li><li><a href="#keyboard">keyboard</a></li></ul></li><li><a href="#18-to-be-continue"><strong>18. To be continue</strong></a></li></ul></li></ul><!-- tocstop --><h1><span id="introducing-markdown">Introducing Markdown</span></h1><blockquote><p>Markdown is a plain text formatting syntax designed to be converted to HTML. Markdown is popularly used as format for readme files, … or in text editors for the quick creation of rich text documents.  - <a href="http://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Wikipedia</a></p></blockquote><h1><span id="tutorial">Tutorial</span></h1><h3><span id="1-headings"><strong>1. Headings</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">##### h5</span><br><span class="line">###### h6</span><br><span class="line">####### h7      &#x2F;&#x2F; 错误代码</span><br><span class="line">######## h8     &#x2F;&#x2F; 错误代码</span><br><span class="line">######### h9    &#x2F;&#x2F; 错误代码</span><br><span class="line">########## h10  &#x2F;&#x2F; 错误代码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h1</span><br><span class="line">&#x3D;&#x3D;&#x3D;</span><br><span class="line">h2</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3><span id="2-toc"><strong>2. TOC</strong></span></h3><p>Generating a catalogue based on the given headings</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure><h3><span id="3-citation-a-single-line"><strong>3. Citation (A single line)</strong></span></h3><p>Citing the code or sentences by using <code>&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello world!</span><br></pre></td></tr></table></figure><p>Example:</p><blockquote><p>hello world!</p></blockquote><h3><span id="4-citation-multiple-lines"><strong>4. Citation (Multiple lines)</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello world!           &gt; hello world!</span><br><span class="line">hello world!        or   &gt; hello world!</span><br><span class="line">hello world!             &gt; hello world!</span><br></pre></td></tr></table></figure><p>Example:</p><blockquote><p>hello world!<br>hello world!<br>hello world!</p></blockquote><h3><span id="5-nesting"><strong>5. Nesting</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; aaaaaaaaa</span><br><span class="line">&gt;&gt; bbbbbbbbb</span><br><span class="line">&gt;&gt;&gt; cccccccccc</span><br></pre></td></tr></table></figure><p>Example:</p><blockquote><p>aaaaaaaaa</p><blockquote><p>bbbbbbbbb</p><blockquote><p>cccccccccc</p></blockquote></blockquote></blockquote><h3><span id="6-code-block-in-a-single-line"><strong>6. Code block in a single line</strong></span></h3><p>using ` to make the code block in one line</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">the inner part of this bracket all in a single line</span><br><span class="line"> (&#96;</span><br><span class="line">&lt; div&gt;   </span><br><span class="line">   &lt; div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">   &lt; div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">   &lt; div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt; &#x2F;div&gt;</span><br><span class="line">&#96;)</span><br></pre></td></tr></table></figure><p>Example:<br>(<code>&lt; div&gt;     &lt; div&gt;&lt;/div&gt;  &lt; div&gt;&lt;/div&gt;  &lt; div&gt;&lt;/div&gt;&lt; /div&gt;</code> )</p><h3><span id="7-code-block-in-lines"><strong>7. Code block in lines</strong></span></h3><p>using 3 ` to make the code blocks in lines<br>(Tab) making the structures of code clear</p><p>Example:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;   </span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></p><h3><span id="8-self-defining-the-color-of-code"><strong>8. Self-defining the color of code</strong></span></h3><p>Example:<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    num+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure></p><h3><span id="9-insertion-of-links"><strong>9. Insertion of links</strong></span></h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  百度一下</span><br><span class="line">[百度1](http:&#x2F;&#x2F;www.baidu.com&#x2F;)</span><br></pre></td></tr></table></figure><p>  Example:百度一下<br><a href="http://www.baidu.com/" target="_blank" rel="noopener">百度1</a></p><h3><span id="10-insertion-of-photos"><strong>10. Insertion of photos</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）photos in Internet ![圣人惠](https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1587239535004&amp;di&#x3D;a2c85429b04af968f770863353ee9fab&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F3704f527edd7fa1c7af02772780d8aeb8b0e1b42.jpg)</span><br><span class="line">（2）photos in local disk ![saya](&#x2F;images&#x2F;6.png)</span><br></pre></td></tr></table></figure><p> Example:<br> （1）<br> <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587239535004&di=a2c85429b04af968f770863353ee9fab&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F3704f527edd7fa1c7af02772780d8aeb8b0e1b42.jpg" alt="圣人惠"><br>（2）<img src="/images/6.png" alt="壁纸"></p><h3><span id="11-insertion-of-videos"><strong>11. Insertion of videos</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id&#x3D;&quot;video&quot; controls&#x3D;&quot;&quot; preload&#x3D;&quot;none&quot; poster&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;poster.png&quot;&gt;</span><br><span class="line">      &lt;source id&#x3D;&quot;mp4&quot; src&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;trailer.mp4&quot; type&#x3D;&quot;video&#x2F;mp4&quot;&gt;</span><br><span class="line">      &lt;source id&#x3D;&quot;webm&quot; src&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;trailer.webm&quot; type&#x3D;&quot;video&#x2F;webm&quot;&gt;</span><br><span class="line">      &lt;source id&#x3D;&quot;ogv&quot; src&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;trailer.ogv&quot; type&#x3D;&quot;video&#x2F;ogg&quot;&gt;</span><br><span class="line">      &lt;p&gt;Your user agent does not support the HTML5 Video element.&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;video&gt;</span><br></pre></td></tr></table></figure><p> Example:<br> <video id="video" controls preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png"><br>      <source id="mp4" src="http://media.w3.org/2010/05/sintel/trailer.mp4" type="video/mp4"><br>      <source id="webm" src="http://media.w3.org/2010/05/sintel/trailer.webm" type="video/webm"><br>      <source id="ogv" src="http://media.w3.org/2010/05/sintel/trailer.ogv" type="video/ogg"><br>      <p>Your user agent does not support the HTML5 Video element.</p><br>    </video></p><h3><span id="12-ordered-list"><strong>12. Ordered list</strong></span></h3><p>There is a space behind the dot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. one</span><br><span class="line">2. two</span><br><span class="line">3. three</span><br></pre></td></tr></table></figure><p>Example:</p><ol><li>one</li><li>two</li><li>three</li></ol><h3><span id="13-unsorted-list"><strong>13. Unsorted list</strong></span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* one</span><br><span class="line">* two</span><br><span class="line">* three</span><br></pre></td></tr></table></figure><p>Example:</p><ul><li>one</li><li>two</li><li>three</li></ul><h3><span id="14-nesting-list"><strong>14. Nesting list</strong></span></h3><p>The function of * and - are the same.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. one</span><br><span class="line">    1. one-1</span><br><span class="line">    2. two-2</span><br><span class="line">2. two</span><br><span class="line">    * two-1</span><br><span class="line">    - two-2</span><br></pre></td></tr></table></figure><p>Example:</p><ol><li>one<ol><li>one-1</li><li>two-2</li></ol></li><li>two<ul><li>two-1</li></ul><ul><li>two-2</li></ul></li></ol><h3><span id="15-nesting-list-with-code"><strong>15. Nesting list with code</strong></span></h3><p>changing a line + 2 TAB</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* one</span><br><span class="line"></span><br><span class="line">    int a &#x3D; 10;</span><br></pre></td></tr></table></figure><p>Example:</p><ul><li><p>one</p><p>  int a = 10;  </p></li></ul><h3><span id="16-latex"><strong>16. LaTeX</strong></span></h3><h3><span id="17-style-of-fonts"><strong>17. style of fonts</strong></span></h3><h4><span id="italic">italic</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)   *斜体*    (2)  &lt;i&gt;斜体&lt;&#x2F;i&gt;     (3)_斜体_</span><br></pre></td></tr></table></figure><p>Example:<br>(1)   <em>斜体</em>    (2)  <i>斜体</i>     (3)<em>斜体</em></p><h4><span id="boldface">boldface</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br></pre></td></tr></table></figure><p>Example:<br><strong>加粗</strong></p><h4><span id="italic-boldface">italic + boldface</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)  ***加粗+斜体***   (2)  **_加粗+斜体_**</span><br></pre></td></tr></table></figure><p>Example:<br>(1)  <strong><em>加粗+斜体</em></strong>   (2)  <strong><em>加粗+斜体</em></strong></p><h4><span id="delated-line">delated line</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>Example:<br><del>删除线</del></p><h4><span id="keyboard">keyboard</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;</span><br></pre></td></tr></table></figure><p>Example:<br><kbd>Ctrl</kbd></p><h3><span id="18-to-be-continue"><strong>18. To be continue</strong></span></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Welcome-to-Markdown&quot;&gt;&lt;a href=&quot;#Welcome-to-Markdown&quot; class=&quot;headerlink&quot; title=&quot;Welcome to Markdown&quot;&gt;&lt;/a&gt;Welcome to Markdown&lt;/h1&gt;&lt;h1 id=&quot;第一次学习Markdown，总结一些常用的方法。&quot;&gt;&lt;a href=&quot;#第一次学习Markdown，总结一些常用的方法。&quot; class=&quot;headerlink&quot; title=&quot;第一次学习Markdown，总结一些常用的方法。&quot;&gt;&lt;/a&gt;第一次学习Markdown，总结一些常用的方法。&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://MIchaelFU0403.github.io/categories/Markdown/"/>
    
    
      <category term="新手入门" scheme="https://MIchaelFU0403.github.io/tags/%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>The first blog : Hello world</title>
    <link href="https://michaelfu0403.github.io/2020/03/18/The-first-blog-Hello-world/"/>
    <id>https://michaelfu0403.github.io/2020/03/18/The-first-blog-Hello-world/</id>
    <published>2020-03-18T01:44:28.000Z</published>
    <updated>2020-04-20T14:10:02.358Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#_po-2首诗_"><em>PO 2首诗</em></a><ul><li><a href="#红瓦青垣">红瓦青垣</a></li><li><a href="#桥于江上冷月夜江">桥于江上，冷月夜江</a></li></ul></li></ul><!-- tocstop --><h1><span id="po-2首诗"><em>PO 2首诗</em></span></h1><a id="more"></a><center><h3><span id="红瓦青垣">红瓦青垣</span></h3><p>夏晴，看桃霞卷云。<br>冬夜，品月雪凉风。<br>翠雨骤雨，垣墙默立。<br>云卷云舒，楼影悦动。<br>漫步楼宇庭轩，<br>壮志将栏杆拍遍。<br>逡巡杏林石原，<br>豁达挟飞仙遨游。<br>凭依墙落，温热岁月。<br>五十载过客学子思绪万千，<br>白驹过日夜军号嘹亮不绝。<br>古人力览卷帙哲思丘谷，<br>今士潜心文理考究人生。</p><hr><h3><span id="桥于江上冷月夜江">桥于江上，冷月夜江</span></h3><p>日，至江北寻好友相聚。<br>夜，独步于江浔，上桥。<br>江风透骨，风衣难挡。<br>隔岸灯影，明且长。<br>浓云轻笼长桥，缀月光。<br>眼迷蒙，思向远方。<br>青石板，黄土窑。黄河水，同有桥。<br>暮秋过，叶微黄。冬月至，雪苍茫。<br>隔水望，千帆远。一朝别，家命难忘。<br>冷夜月江，氤氲了日期，切盼归乡。</p></center>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#_po-2首诗_&quot;&gt;&lt;em&gt;PO 2首诗&lt;/em&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#红瓦青垣&quot;&gt;红瓦青垣&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#桥于江上冷月夜江&quot;&gt;桥于江上，冷月夜江&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;h1 id=&quot;PO-2首诗&quot;&gt;&lt;a href=&quot;#PO-2首诗&quot; class=&quot;headerlink&quot; title=&quot;PO 2首诗&quot;&gt;&lt;/a&gt;&lt;em&gt;PO 2首诗&lt;/em&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://MIchaelFU0403.github.io/categories/web/"/>
    
    
      <category term="新手入门" scheme="https://MIchaelFU0403.github.io/tags/%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
