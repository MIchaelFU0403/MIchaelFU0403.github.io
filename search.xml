<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MEC-相关通信网络基本概念</title>
    <url>/2020/11/03/MEC-%E7%9B%B8%E5%85%B3%E9%80%9A%E4%BF%A1%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3><span id="目录">目录</span></h3><!-- toc -->

<ul>
<li><a href="#ran">RAN</a></li>
<li><a href="#sla">SLA</a></li>
<li><a href="#核心网">核心网</a></li>
<li><a href="#公用网">公用网</a></li>
<li><a href="#信令系统signalling-systems">信令系统（signalling systems）</a></li>
<li><a href="#c-ran">C-RAN</a></li>
<li><a href="#回程链路">回程链路</a></li>
<li><a href="#rrh-rru">RRH、RRU</a></li>
<li><a href="#前传">前传</a></li>
<li><a href="#enodeb">eNodeB</a></li>
<li><a href="#下行链路">下行链路</a></li>
<li><a href="#上行链路">上行链路</a></li>
<li><a href="#capex">CAPEX</a></li>
<li><a href="#opex">OPEX</a></li>
<li><a href="#bbu">BBU</a></li>
<li><a href="#prb">PRB</a></li>
<li><a href="#南向接口">南向接口</a></li>
<li><a href="#北向接口">北向接口</a></li>
<li><a href="#潮汐效应">潮汐效应</a></li>
<li><a href="#d2d">D2D</a></li>
<li><a href="#无线mesh网络">无线mesh网络</a></li>
<li><a href="#csi-信道状态信息">CSI （信道状态信息）</a></li>
</ul>
<!-- tocstop -->

<h3><span id="ran">RAN</span></h3><p>无线接入网（Radio Access Network），简称RAN。又称为居民宽带网RBB（Residential BroadBand Network）。所谓居民接入网就是在居民家中的电话、计算机或电视机与宽带主干网之间的一个中间网络，它起到接口作用，目的是使用户能够方便和经济地享用各种宽带多媒体信息。无线接入网（Radio Access Network），简称RAN 。无线接入网包括的设备有：基站（NODE B ）、无线网络控制器（RNC），主要的功能就是控制用户通过无线接入到移动通信网络中来。</p>
<h3><span id="sla">SLA</span></h3><p>SLA：Service-Level Agreement的缩写，意思是服务等级协议。是关于网络服务供应商和客户间的一份合同，其中定义了服务类型、服务质量和客户付款等术语。</p>
<p>典型的SLA 包括以下项目：</p>
<ul>
<li>分配给客户的最小带宽；</li>
<li>客户带宽极限；</li>
<li>能同时服务的客户数目；</li>
<li>在可能影响用户行为的网络变化之前的通知安排；</li>
<li>拨入访问可用性；</li>
<li>运用统计学；</li>
<li>服务供应商支持的最小网络利用性能，如99.9%有效工作时间或每天最多为1分钟的停机时间；</li>
<li>各类客户的流量优先权；</li>
<li>客户技术支持和服务；</li>
<li>惩罚规定，为服务供应商不能满足 SLA 需求所指定。</li>
</ul>
<h3><span id="核心网">核心网</span></h3><p>简单点说，可以把移动网络划分为三个部分，基站子系统，网络子系统，和系统支撑部分比如说安全管理等这些。核心网部分就是位于网络子系统内，核心网的主要作用是把A口上来的呼叫请求或数据请求，接续到不同的网络上。</p>
<p>专用网</p>
<p>指专用于一些的保密性要求较高的部门的网络，比如企业内部专用网、军队专用网，尤其是涉及国家机密的部门。之所以称为“专用网”是因为这种网络是为本机构的主机用于机构内部的通信，而不是用于和网络外非本机构的主机通信。如果专用网不同网点之间的通信必须经过公用的因特网，但又有保密的要求，那么所有通过因特网传送的数据都必须加密。</p>
<h3><span id="公用网">公用网</span></h3><p>一般是国家的邮电部门建造的网络.”公用”的意思就是从所有愿意按邮电部门规定交纳费用的人都可以使用。</p>
<p>也指网络服务提供商建设，供公共用户使用的通信网络。公用网络的通信线路是共享给公共用户使用的。</p>
<p>垂直总体结构：从垂直方向上将公用网络分为3种。即应用层、传送网和业务网。 </p>
<ul>
<li>应用层：提供用户信息服务的功能，建立在各类业务网的平台之上，为用户提供各类信息和娱乐服务。有：家庭购物、远程教学、会议电视、文件传送、金融服务等等。</li>
<li>业务网：基于传送网之上，是提供各种通信业务的网络。包括：PSTN/ISDN、分组网（X.25）、数字数据网（DDN）、移动通信网（GSM/CDMA）、帧中继网（FR）、有线电视（CATV）业务网、Internet、未来B-ISDN等。</li>
<li>传送网：分为电路层、通道层和物理层，通道层和物理层合在一起称为传送层。 </li>
</ul>
<p>水平总体结构：</p>
<ul>
<li>核心网：是传送主体骨干网络，是除了接入网和用户住地网以外的全部网络。</li>
<li>用户接入网：是由业务节点接口和相关用户网络接口之间的一系列传送实体组成。</li>
<li>用户住地网：是指用户终端至用户网络接口之间所包含的机线设备，由用户室内布线系统组成。 </li>
</ul>
<h3><span id="信令系统signalling-systems">信令系统（signalling systems）</span></h3><p>是指电信网中交换节点（交换局、网路控制点等）为用户建立接续和进行网路管理采用的一种信息交换系统。任何一种信令系统都包含全部信号的产生、传送和接收规范以及信令程序。移动通信信令在移动通信系统中，是区别于通信用的有用信号，把话音信号以外的信号统称为“信令”。</p>
<h3><span id="c-ran">C-RAN</span></h3><p>是根据现网条件和技术进步的趋势，提出的新型无线接入网构架。C-RAN是基于集中化处理(Centralized Processing)，协作式无线电(Collaborative Radio)和实时云计算构架(Real-time Cloud Infrastructure)的绿色无线接入网构架(Clean system)。其本质是通过实现减少基站机房数量，减少能耗，采用协作化、虚拟化技术，实现资源共享和动态调度，提高频谱效率，以达到低成本，高带宽和灵活度的运营。C-RAN的总目标是为解决移动互联网快速发展给运营商所带来的多方面挑战（能耗，建设和运维成本，频谱资源），追求未来可持续的业务和利润增长。</p>
<h3><span id="回程链路">回程链路</span></h3><p>回程链路（backhaul）是指从接入网络或者小区站点（cellsite）到交换中心的连接。交换中心连接至骨干网络，而骨干网络连接至核心网络。因而，回程链路网络是任何电信网络结构的中间层，它位于接入网络和骨干网络之间，为这两个网络提供了重要连接。举例来说，用户在网吧用Wi-Fi上网时，Wi-Fi设备必须连回ISP（InternetService Provider）端，而此链接任务便可由WiMAX担任。这项功能有助于服务提供商降低回程传输的成本。</p>
<h3><span id="rrh-rru">RRH、RRU</span></h3><p>RRH和RRU有什么区别？RRU和RRH其实都是射频拉远单元, 只是使用的覆盖方式不一样, RRU是针对宏站的室外覆盖, RRH是针对室内分布系统的室内覆盖。</p>
<h3><span id="前传">前传</span></h3><p>FrontHaul（前向回传）主要是从天线的BBU（Building Base band Unit：基带处理单元）到基站控制器RRU（Radio Remote Unit：射频拉远单元）或RRH（Remote Radio Head：射频拉远头）之间的连接</p>
<h3><span id="enodeb">eNodeB</span></h3><p>Evolved Node B，即演进型Node B简称eNB，LTE中基站的名称，相比现有3G中的Node B，集成了部分RNC的功能，减少了通信时协议的层次。eNB的功能包括：RRM功能；IP头压缩及用户数据流加密；UE附着时的MME选择；寻呼信息的调度传输；广播信息的调度传输；以及设置和提供eNB的测量等。</p>
<h3><span id="下行链路">下行链路</span></h3><p>移动通信系统中，下行链路是指信号从基站到移动台的物理信道。下行链路是由基站发射机、合路器、双工器、馈线及其他损耗、天线增益、路径损耗、建筑物损耗、人体损耗、手机接收灵敏度组成。在点到多点系统中，由集中点到分散点的传输链路。例如：在移动通信中，由基站到移动台的链路；在卫星通信中，由卫星到地球站的链路。</p>
<h3><span id="上行链路">上行链路</span></h3><p>上行链路是针对移动台侧来说的，移动台到基站方向称之为上行。反向链路是针对基站侧来说的，移动台到基站方向称之为反向链路。因此，上行链路又称为反向链路。</p>
<h3><span id="capex">CAPEX</span></h3><p>CAPEX，全称为Capital Expenditure，即资本性支出，一般是指资金或固定资产、无形资产、递延资产的投入。这类资产在使用过程中会持续多个计费期间，需要在使用过程中将其资本化，并分期将成本转为费用。如固定资产的折旧，无形资产和递延资产的摊销等。对电信运营商来说，网络设备、计算机、仪器等一次性支出的都属于CAPEX。</p>
<h3><span id="opex">OPEX</span></h3><p>在电信运营商领域，被称为运营成本,计算公式为:OPEX=维护费用+营销费用+人工成本(+折旧)。运营成本主要是指当期的付现成本。CAPEX一般是指资金、固定资产的投入.对电信运营商来说,有关的网络设备、计算机、仪器等一次性支出的项目都属于CAPEX,其中网络设备占最大的部分。OPEX指的是企业的管理支出。</p>
<h3><span id="bbu">BBU</span></h3><p>RRU（射频拉远单元）和BBU（基带处理单元）之间需要用光纤连接。一个BBU可以支持多个RRU。采用BBU+RRU多通道方案，可以很好地解决大型场馆的室内覆盖。RRH(Remote Radio Head，射频拉远头)是用于移动宽带网络基站中的新技术设备，主要效益在于提升既有讯号传输效率，并且在更容易建置的网络架构下，扩大其网络覆盖率。</p>
<h3><span id="prb">PRB</span></h3><p>物理资源模块（Physical Resource Block，PRB），是指是频域上12个连续的载波的资源。PRB对应的是频域上12个连续的载波（在15K载波间隔的情况下是180K），时域上是一个时隙（半个子帧，0.5 ms）的资源。</p>
<h3><span id="南向接口">南向接口</span></h3><p>管理其他厂家网管或设备的接口，即向下提供的接口。提供对其他厂家网元的管理功能，支持多种形式的接口协议，包括SNMP、TR069、SYSLOG、SOAP、SSH等接口，其中主要的是SNMP v3 和TR069（即CWMP,客户端广域网管理协议）</p>
<h3><span id="北向接口">北向接口</span></h3><p>北向接口（Northbound Interface）是为厂家或运营商进行接入和管理网络的接口，即向上提供的接口。网络中使用接口编程开发各种应用系统管理被管理对象，管理的方法是采集和分析被管理对象在运行中产生的各种数据。在电信网和NGN网络（下一代融合网络）中管理是分层实现的，如图1所示，可以将这种网络管理分成三层：应用层、数据处理层和数据管理层。其中应用层和数据处理层之间的数据交互定义有接口，由于应用层位于数据处理层之上，因此这种接口称之为北向接口。</p>
<h3><span id="潮汐效应">潮汐效应</span></h3><p>在通信系统中“潮汐效应”是指工作时间人们在CBD区域大量聚集，下班后又向居民区大量迁徙的现象。这种现象引发了移动通信系统中话务量的流动，使得热点区域在特定时刻出现突发大话务量，导致网络拥塞、无法接入；对于建网初期的容量规划也带来一定的困难。而在应对该类型区域内大话务量流动的同时，实现降低建网成本，提升运营核心竞争力，成为摆在运营商面前的一道棘手难题。</p>
<h3><span id="d2d">D2D</span></h3><p>Device-to-Device，简称D2D，是计算机专业术语，指设备到设备。Device-to-Device通信是一种在系统的控制下，允许终端之间通过复用小区资源直接进行通信的新型技术，在一定程度上解决无线通信系统频谱资源匮乏的问题。D2D技术可以应用于移动蜂窝网络，以提高资源利用率和网络容量。每一个D2D通信链路占用的资源与一个蜂窝通信链路占用的相等。</p>
<h3><span id="无线mesh网络">无线mesh网络</span></h3><p>无线mesh网络，由mesh routers（路由器）和mesh clients（客户端）组成，其中mesh routers构成骨干网络，并和有线的internet网相连接，负责为mesh clients提供多 跳的无线internet连接。无线Mesh网络（无线网状网络）也称为“多跳（multi-hop）”网络，它是一种与传统无线网络完全不同的新型无线网络技术。</p>
<h3><span id="csi-信道状态信息">CSI （信道状态信息）</span></h3><p>许多IEEE802.11标准使用OFDM调制信号，将其通过多个正交子载波进行传送，每个子载波上传送的信号都有不同的信号强度和相位。最近，一些普通的 IEEE 802． 11n 标准的商用无线网卡( 如Intel 5300)能以 CSI 的形式提供不同子载波详细的幅度和相位信息。具体来说，利用现成的 Intel 5300 网卡以及微调过的驱动程序，可以以 CSI 的形式输出 WiFi 带宽范围内的 CFR 的一个采样版本[ 6]:H =[ H( f1) ，H( f2) ，…，H( fi) ，…，H( fN) ]T，i∈[ 1，30]。每个CSI刻画了一个子载波的幅度和相位。</p>
]]></content>
      <categories>
        <category>无线通信网络</category>
      </categories>
      <tags>
        <tag>论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>A Survey on Mobile Edge Networks: Convergence of Computing, Caching and Communications</title>
    <url>/2020/10/27/%20Convergence%20of%20Computing,%20Caching%20and%20Communications/</url>
    <content><![CDATA[<h2><span id="摘要">摘要</span></h2><p>随着智能设备的爆炸性增长和许多新应用的出现，流量已经成倍增长。由于<u>backhaul回程链路</u>上的沉重负担和较长的<u>迟延</u>，传统的集中式网络体系结构无法满足此类用户需求。因此，提出了将<u>网络功能和内容带到网络边缘</u>的新架构，即移动边缘计算和缓存。移动边缘网络在蜂窝网络的边缘提供云计算和缓存功能。</p>
<p>​    1. <strong>在本次调查中，我们对移动边缘网络的最新研究成果进行了详尽的回顾。我们首先概述移动边缘网络，包括定义，体系结构和优点。</strong></p>
<p>​    2. <strong>接下来，分别对网络边缘的计算，缓存和通信技术问题进行了全面概述。讨论了mobileedge网络的应用和用例。</strong></p>
<p>​    3. <strong>随后，讨论了诸如云技术，SDN / NFV和智能设备等移动边缘网络的关键推动力。</strong></p>
<p>​    4. <strong>最后，还提出了开放的研究挑战和未来的方向。</strong></p>
<a id="more"></a>

<h2><span id="目录">目录</span></h2><!-- toc -->

<ul>
<li><a href="#introduction">Introduction</a><ul>
<li><a href="#11-本文的主要贡献">1.1 本文的主要贡献</a></li>
<li><a href="#12-本文的其余部分">1.2 本文的其余部分</a></li>
</ul>
</li>
<li><a href="#overview-of-mobile-edge-networks">Overview of Mobile Edge Networks</a><ul>
<li><a href="#a-what-is-mobile-edge-networks">A. What is Mobile Edge Networks？</a></li>
<li><a href="#b-architecture-of-mobile-edge-networks">B. Architecture of Mobile Edge Networks</a><ul>
<li><a href="#b-1-移动边缘计算">B-1 移动边缘计算</a><ul>
<li><a href="#backhaul">Backhaul</a></li>
<li><a href="#cdn">CDN</a></li>
<li><a href="#cdn基础架构"><strong>CDN基础架构：</strong></a></li>
</ul>
</li>
<li><a href="#b-2-雾计算">B-2 雾计算</a></li>
<li><a href="#b-3-微云cloudlet">B-3 微云Cloudlet</a></li>
<li><a href="#b-4-边缘缓存">B-4 边缘缓存</a></li>
<li><a href="#b-5-总结对比">B-5 总结对比</a></li>
</ul>
</li>
<li><a href="#c-advantages-of-mobile-edge-networks">C. Advantages of Mobile Edge Networks</a></li>
</ul>
</li>
<li><a href="#computing-at-mobile-edge-networks">Computing at Mobile Edge Networks</a><ul>
<li><a href="#3-a-objective">3-A Objective</a><ul>
<li><a href="#1-能耗最小化">1) 能耗最小化</a></li>
<li><a href="#2最大限度地提高容量">2)最大限度地提高容量</a></li>
<li><a href="#3最小化时延">3)最小化时延</a></li>
<li><a href="#知识小补充">知识小补充：</a></li>
</ul>
</li>
<li><a href="#3-b-computation-offloading">3-B Computation Offloading</a><ul>
<li><a href="#1-单用户情况-singlei-user-case">1） 单用户情况 singlei User Case</a></li>
<li><a href="#2-多用户情况-multi-user-case">2） 多用户情况 Multi-user Case</a></li>
<li><a href="#3-卸载到mec服务器-offloaded-to-mec-server">3） 卸载到MEC服务器   Offloaded to MEC Server</a></li>
<li><a href="#4-卸载到设备-offloaded-to-devices">4） 卸载到设备 Offloaded to devices</a></li>
<li><a href="#5-mobility-awareness-移动性意识">5） Mobility Awareness 移动性意识</a></li>
</ul>
</li>
<li><a href="#3-c-cooperation-between-the-edge-and-the-core">3-C Cooperation between the edge and the core</a></li>
<li><a href="#4-d-platforms">4-D Platforms</a></li>
</ul>
</li>
<li><a href="#caching-at-mobile-edge-networks">Caching at Mobile Edge Networks</a><ul>
<li><a href="#4-a-cashing-places-缓存的位置">4-A Cashing Places 缓存的位置</a><ul>
<li><a href="#1-mbs-caching-mbs缓存">1) MBS Caching （MBS缓存）</a></li>
<li><a href="#2-sbs-caching-sbs缓存">2) SBS Caching （SBS缓存）</a></li>
<li><a href="#3-device-caching-设备缓存">3) Device Caching  （设备缓存）</a></li>
</ul>
</li>
<li><a href="#4-b-content-popularity-内容热度">4-B. Content Popularity 内容热度</a><ul>
<li><a href="#1-static-model-静态模型">1) Static Model 静态模型</a></li>
<li><a href="#2-dynamic-model-动态模型">2) Dynamic Model  动态模型</a></li>
</ul>
</li>
<li><a href="#4-c-caching-policies-and-algorithms-缓存策略和算法">4-C. Caching Policies and Algorithms  缓存策略和算法</a><ul>
<li><a href="#1conventional-caching-policies-传统的缓存策略">1)Conventional Caching Policies   传统的缓存策略</a></li>
<li><a href="#2-user-preference-based-policies-基于用户偏好的策略">2) User Preference Based Policies  基于用户偏好的策略</a></li>
<li><a href="#3-learning-based-policies-基于学习的策略">3) Learning Based Policies  基于学习的策略</a></li>
<li><a href="#4-non-cooperative-caching-非协作缓存">4) Non-Cooperative Caching  非协作缓存</a></li>
<li><a href="#5-cooperative-caching-协作缓存">5) Cooperative Caching 协作缓存</a></li>
</ul>
</li>
<li><a href="#4-d-caching-of-different-file-types-不同文件类型的缓存">4-D. Caching of Different File Types   不同文件类型的缓存</a></li>
<li><a href="#4-e-mobility-awareness-移动意识">4-E. Mobility Awareness 移动意识</a></li>
<li><a href="#4-f-impact-on-system-performance-对系统性能的影响">4-F. Impact on System Performance 对系统性能的影响</a></li>
</ul>
</li>
<li><a href="#advances-in-communication-techniques-with-synergy-of-computing-and-caching">Advances in Communication Techniques with Synergy of Computing and Caching</a><ul>
<li><a href="#a-mmwave-communication-毫米波通信">A. mmWave Communication (毫米波通信)</a></li>
<li><a href="#b-d2d-communication-d2d通信">B. D2D Communication (D2D通信)</a></li>
<li><a href="#c-transmission-schemes-传输方案">C. Transmission Schemes (传输方案)</a></li>
<li><a href="#d-interference-management-干扰管理">D. Interference Management (干扰管理)</a></li>
<li><a href="#e-communication-resources-allocation-and-scheduling通信资源分配和安排">E. Communication Resources Allocation and Scheduling(通信资源分配和安排)</a></li>
<li><a href="#f-synergy-of-communication-computing-and-caching通讯计算和缓存的协同作用">F. Synergy of Communication, Computing and Caching(通讯，计算和缓存的协同作用)</a></li>
</ul>
</li>
<li><a href="#applications-and-usecase">Applications and Usecase</a><ul>
<li><a href="#a-dynamic-content-delivery-动态内容交付">A. Dynamic Content Delivery 动态内容交付</a></li>
<li><a href="#b-augmented-realityvirtual-reality-增强现实虚拟现实">B. Augmented Reality/Virtual Reality 增强现实/虚拟现实</a></li>
<li><a href="#c-intensive-computation-assistance-密集计算辅助">C. Intensive computation assistance 密集计算辅助</a></li>
<li><a href="#d-video-streaming-and-analysis-视频流和分析">D. Video Streaming and Analysis 视频流和分析</a></li>
<li><a href="#f-connected-vehicles-互联车辆">F. Connected Vehicles 互联车辆</a></li>
<li><a href="#g-cognitive-assistance-认知援助">G. Cognitive Assistance 认知援助</a></li>
<li><a href="#h-wireless-big-data-analysis-无线大数据分析">H. Wireless Big Data Analysis 无线大数据分析</a></li>
</ul>
</li>
<li><a href="#key-enables">Key Enables</a><ul>
<li><a href="#a-cloud-technology-云技术">A. Cloud Technology 云技术</a></li>
<li><a href="#b-software-defined-network-软件定义的网络">B. Software Defined Network 软件定义的网络</a></li>
<li><a href="#c-network-function-virtualization-网络功能虚拟化">C. Network Function Virtualization 网络功能虚拟化</a></li>
<li><a href="#d-smarter-mobile-devices-更智能的移动设备">D. Smarter Mobile Devices 更智能的移动设备</a></li>
</ul>
</li>
<li><a href="#open-challenges-and-future-directions">Open Challenges and Future Directions</a><ul>
<li><a href="#a-open-research-challenges-开放研究挑战">A. Open Research Challenges 开放研究挑战</a><ul>
<li><a href="#1-heterogeneity-异质性">1) Heterogeneity 异质性</a></li>
<li><a href="#2-computation-modeling-计算建模">2) Computation Modeling 计算建模</a></li>
<li><a href="#3-enabling-realtime-analytics-启用实时分析">3) Enabling Realtime Analytics 启用实时分析</a></li>
<li><a href="#4-user-mobility-用户移动型">4) User Mobility 用户移动型</a></li>
<li><a href="#5-pricing-policy-定价策略">5) Pricing Policy 定价策略</a></li>
<li><a href="#6scalability-可扩展性">6）scalability 可扩展性</a></li>
<li><a href="#7-security-安全">7） Security 安全</a></li>
<li><a href="#8privacy">8）Privacy</a></li>
<li><a href="#9user-participation">9）User Participation</a></li>
</ul>
</li>
<li><a href="#b-discussions-on-future-directions">B. Discussions on Future Directions</a><ul>
<li><a href="#1-utilization-of-wireless-big-data-无线大数据的利用">1) Utilization of Wireless Big Data 无线大数据的利用</a></li>
<li><a href="#2-online-caching-在线缓存">2) Online Caching 在线缓存</a></li>
<li><a href="#3-context-awareness上下文感知">3) Context Awareness上下文感知</a></li>
<li><a href="#4smart-user-association-智能用户协会">4）Smart User Association 智能用户协会</a></li>
<li><a href="#5-integration-集成">5) Integration 集成</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<!-- tocstop -->

<h2><span id="introduction">Introduction</span></h2><p>在过去的几十年中，移动蜂窝网络一直在稳步发展，从第一代（1G）纯语音系统到当前的第四代（4G）<strong>全IP LTE-Advanced</strong>网络。随着<strong>WCDMA，OFDMA，MIMO，CoMP等物理层以及异构网络（HetNet）和云无线接入网（C-RAN）等网络层的技术进步</strong>，系统容量和平均数据速率得到了极大的提高。在过去10年中，移动数据流量增长了4000倍，并且从2015年到2020年将继续以每年53％的速度增长。特别是，移动视频流量占了一半以上总移动数据流量，并且这个百分比一直在增长。此外，移动设备的计算能力越来越智能，并且出现了新的机器类型设备，例如可穿戴设备和人类设备之外的传感器。这导致了下一代移动网络中的大规模M2M连接（machine to machine）。</p>
<p>​    机器类型通信（MTC）在无线网络中带来了广泛的新应用和服务。[2]中的作者介绍了蜂窝系统MTC的现状和挑战。最重要的挑战包括<u>大量的MTC设备</u>，<u>小的数据突发</u>，<u>低延迟和低功耗</u>。已经提出了各种解决方案来适应这些挑战[3]，[4]。由于MTC设备的处理能力受到限制，一种有希望的解决方案是<strong><u>将其任务转移到具有强大处理能力的地方</u></strong>。MTC的无处不在的连通性导致了<u><strong>强大的异构网络规范</strong></u>。为了适应从4G到新兴的5G系统的此类MTC应用，已经进行了研究工作[5]。</p>
<p>​    初步的移动计算方案采用了2级层次结构，最初称为“<strong>服务器”</strong>和“<strong>客户端”</strong> [6]。后来，术语“<strong>云</strong>”用于表示<strong>具有计算和信息资源的服务器的集合</strong>，这导致了对移动云计算（MCC）的研究。与传统的计算卸载技术相比，移动云计算考虑了各种与移动相关的因素，例如<strong>设备能量，带宽利用率，网络连接性，移动性，上下文感知和位置感知</strong>[7]，[8]。</p>
<p>​    针对MCC的不同方面，已经发表了许多调查文章。在[9]和[10]中，作者提出了有关移动云计算的一般性问题，包括体系结构，技术挑战和应用程序。在[11]中，讨论了有关移动云平台和访问方案的现有工作。作者比较了两个移动云平台，即<strong>Hyrax平台</strong>[12]和<strong>基于虚拟机（VM）的cloudlet **[13]，然后回顾了利用用户的位置和上下文进行智能访问的方案[14]。[7]中的作者详细说明了影响计算卸载决策的实体，并提供了详细的应用程序模型分类和最新的移动云应用程序模型。[15]中的作者基于关键问题以及解决这些问题的方法（如</strong>运营问题，端用户问题，服务水平问题，安全性，上下文感知和数据管理<strong>）提出了详细的移动云计算分类法。用户身份验证对于确保基于云的计算和通信非常重要。在[16]中，作者调查了MCC中最先进的身份验证机制，并将其与云计算中的机制进行了比较。    **MCC的优点可归纳如下。</strong></p>
<ul>
<li>首先，它可以为移动设备提供足够的资源并具有很大的灵活性。</li>
<li>其次，由于资源的集中管理，可以降低MCC的成本。</li>
<li>最后，所有任务在云中处理，MCC支持多种平台。图1说明了MCC的一般体系结构，它包含2个层：云层和移动设备。</li>
</ul>
<img src="/images/static/边缘计算/survey/ Convergence of Computing, Caching and Communications1.png" alt=" Convergence of Computing, Caching and Communications1" style="zoom:40%;">

<p>​    尽管移动云计算有其优点，它仍然面临不可避免的问题。由于<u>从移动设备到Internet云的距离很长</u>，所以就有<strong>较长的延迟</strong>和<strong>回程带宽限制</strong>。</p>
<hr>
<p>​    部署在基站中的云服务器的<strong><u>移动边缘计算</u></strong>（MEC）是解决该问题的有前途的解决方案，因为计算能力更接近于移动设备[17]。<strong>MEC的优点</strong>包括<u><strong>低延迟，邻近，高带宽，实时无线网络信息和位置感知</strong></u>。MEC被欧洲5G PPP（5G基础设施公共私有伙伴关系）[2]确认为下一代5G网络的关键技术之一。</p>
<p>​    [19]中的作者从不同方面描述了MEC的分类（taxonomy），包括其特征，访问技术，应用，目标等。他们还确定了MEC中的一些未解决问题。在[20]中，作者根据技术指标对部署在移动边缘的几个应用程序进行了分类：<strong>功耗，延迟，带宽使用和可伸缩性</strong>。还分析了MEC利益相关者可以获得的好处。对于<strong>移动用户和网络运营商</strong>来说，主要的好处是<strong>减少了延迟</strong>，从而有了<strong>快速的服务</strong>。对于<strong>应用程序服务提供商</strong>（ASP），他们可以受益于<strong>用户相关信息的利用</strong>。</p>
<p>​    </p>
<hr>
<p>​    <strong><u>雾计算</u></strong>是另一个支持未来物联网（IoT）应用程序的边缘规范[21]。它使用诸如<strong>边缘路由器</strong>之类的<strong>近用户边缘设备</strong>来执行大量的计算任务。尽管在某些方面它是与MEC类似的概念，但它的特点是<strong>更适合IoT的环境[22]。</strong>OpenFog联盟由Cisco系统，ARM控股，戴尔，英特尔，微软和普林斯顿大学于2015年成立，旨在促进雾计算的发展和兴趣。在[22]中强调了雾计算的代表性应用和研究问题的各方面。</p>
<p>​    <strong>1.增强现实和实时视频分析</strong>，<strong>2.内容交付以及 ，3.移动大数据分析</strong>将是受益于雾计算的三种驱动场景。</p>
<p>​    雾服务的服务质量（QoS）指标包括四个方面：<strong>连接性，可靠性，容量和延迟</strong>。接口和编程模型，资源管理，安全性和隐私性是计算遇到的主要挑战。在[23]中，作者调查除云计算（如安全数据存储和安全计算）外，雾计算还面临着新的安全和隐私挑战。边缘模式中的安全威胁和挑战在[24]中进行了分析。作者在以下方面提出了<strong>具体的挑战和有希望的解决方案</strong>：身份和身份验证，访问控制系统，协议和网络安全，信任管理，入侵检测系统，隐私和虚拟化。</p>
<hr>
<p>​    学术界提出的一种相似的边缘计算概念称为<strong><u>微云</u>Cloudlet</strong> [25]，[13]。cloudlet是遥远的“云”的扩展。它是一个“盒子中的数据中心”，它是自我管理的，节能的，并且易于部署在诸如咖啡店或办公室之类的商业场所。部署cloudlet基础架构的一种方法是将cloudlet和WiFi接入点硬件集成到单个实体中。但是，广泛部署的cloudlet的管理具有挑战性。解决方案是使用硬件VM（虚拟机）技术对cloudlet基础架构进行临时定制[25]。</p>
<hr>
<p>​    通过<strong>移动蜂窝网络</strong>对大规模多媒体服务的需求不断增长，对<strong>网络容量</strong>和<strong>backhaul回程链路</strong>提出了巨大挑战。<strong><u>移动边缘缓存和交付技术</u></strong>的出现是应对这些挑战的有前途的解决方案[26]。在传统的集中式移动网络体系结构中，最终<strong>用户的内容请求</strong>由<strong>远程Internet内容提供商</strong>提供。在这种情况下，必须通过整个移动网络传输重复的流量，这会导致<strong>网络拥塞和网络资源</strong>的浪费。在<strong>网络边缘缓存流行的内容</strong>（例如网关，基站和最终用户设备）可以<strong>避免重复传输相同的内容</strong>，并且由于<strong>减少了等待时间</strong>而提高了用户的<strong>体验质量</strong>。</p>
<p>​    <strong><u>缓存</u></strong>的概念在蜂窝网络中并不是什么新鲜事物。它已被用于<strong>Web缓存</strong>和<strong>以信息为中心的网络</strong>中。[27]研究了网络缓存和预取技术以提高网络性能。提出了缓存策略的分类，例如基于新近度的策略（例如LRU）least recency-based policies，基于频率的策略（例如LFU）least frequency-based policies，基于大小的策略size-based policies，基于功能的策略 function-based policies 和随机策略randomized policies。此外，[28]中的作者描述了<strong>缓存替换策略</strong>的优缺点，并概述了现代代理缓存中的潜在研究主题。[29]和[30]中的作者分别研究了以信息为中心的网络中的缓存机制及其缓存的能量效率。<strong>但是，由于无线蜂窝网络的特性，上述缓存技术不能直接应用。</strong>蜂窝网络中的缓存方案应进行彻底研究。</p>
<hr>
<p>​    尽管上述边缘规范具有优点，但它们使得无线网络变得异构化并且难以以传统方式进行管理。网络等新兴技术<strong>网络功能虚拟化（NFV）,软件定义的网络（SDN）</strong>是使网络灵活且易于维护的有前途的解决方案。</p>
<p>​    NFV网络功能虚拟化是最近提出的一种网络架构，它利用IT虚拟化技术在标准通用硬件的基础上虚拟化网络节点功能，从而使通信网络基础设施变得更具成本 效益[31]。</p>
<p>​    SDN软件定义的网络是将控制平面和数据平面的功能分开的计算网络体系结构。在传统的移动网络中，控制平面和用户平面（或数据平面）都集成在宏基站 macro base station上。这种网络架构无法满足未来5G网络中爆炸性的流量和连接增长的需求。基于SDN的概念，zhang el al.提出了新的架构。[32]提出了一种<strong>宏辅助数据纯载波</strong>方案(macro-assisted data-only carrier scheme)，将<strong>控制功能和数据功能</strong>分别划分为<strong>宏基站</strong>（MBS）和<strong>小型基站</strong>（SBS）。Pentikousis等[33]引入并验证了软件定义的<strong>移动网络架构</strong>，该架构提高了运营商的能力并缩短了新服务的上市时间。</p>
<hr>
<p>表I显示了有关移动计算和缓存的现有调查文章的摘要。</p>
<p>​                        <img src="/images/static/边缘计算/survey/ Convergence of Computing, Caching and Communications4.png" alt=" Convergence of Computing, Caching and Communications4" style="zoom:100%;"></p>
<p>移动边缘网络的上述优势和进步促使我们进行全面的文献调查。</p>
<h3><span id="11-本文的主要贡献">1.1 本文的主要贡献</span></h3><p>1）提出了对<strong>移动边缘网络体系结构的全面调查</strong>，包括<strong>MEC，雾计算，Cloudlets和边缘缓存</strong>。总结了不同边缘计算方案的比较。指出了<strong>移动边缘网络的优势。</strong></p>
<p>2）对移动边缘计算和缓存的关键技术进行了全面综述。特别是对于网络边缘的计算，阐述了与<strong>计算卸载</strong>，<strong>边缘与核心网络之间的协作</strong>，与5<strong>G相结合</strong>以及所提出的平台相关的文献。作为<strong><u>边缘缓存</u></strong>，综述了<strong>内容流行度，缓存策略，调度和移动性管理</strong>等方面的研究进展。</p>
<p>3）全面总结了移动边缘网络的应用和用例。指出了移动边缘网络的关键推动力，包括<strong>云技术</strong>，<strong>软件定义网络</strong>，<strong>网络功能虚拟化</strong>和<strong>更智能的移动设备。</strong></p>
<p>4）确定了与移动边缘网络相关的开放性问题和挑战，例如<strong>网络异构性</strong>，<strong>实时分析，定价，可伸缩性，无线大数据的利用，上下文感知</strong>等。</p>
<h3><span id="12-本文的其余部分">1.2 本文的其余部分</span></h3><p>在第二部分，概述了移动边缘网络，包括定义，体系结构和优点。</p>
<p>在第三部分中，对移动边缘网络中与计算相关的问题进行了详尽的文献调查。</p>
<p>在第四部分中，对边缘缓存的研究工作进行了全面调查。</p>
<p>在第五部分中，讨论了通信技术与计算和缓存协同作用的进步。</p>
<p>在第六部分中，解释了移动边缘网络的应用和用例。</p>
<p>在第七部分中，总结了移动边缘网络的关键促成技术。</p>
<p>第八部分中显示了开放的挑战和未来的方向。</p>
<p>最后，在第九部分中得出结论。（为了方便起见，所有缩写的摘要显示在表II中。）</p>
<hr>
<h2><span id="overview-of-mobile-edge-networks">Overview of Mobile Edge Networks</span></h2><p>移动边缘网络概述</p>
<p>​    随着信息和电信技术的发展，移动蜂窝网络的发展在过去的二十年中经历了四代。同时，用户对移动网络的要求也变得越来越严格，例如超高数据速率和极低的延迟。而且，由于诸如虚拟现实和物联网之类的新型智能设备和新应用的出现，出现了各种新的要求。传统的以基站为中心的网络体系结构不能再满足这些要求。<u>在未来的5G系统中</u><em>，<u>移动蜂窝网络架构</u></em>已从<strong>以BS为中心</strong>发展到<strong>以设备为中心</strong>[34]和<strong>以内容为中心的网络</strong>，其中<strong>重心从网络核心移向边缘</strong>[35]。</p>
<p>​    在本节中，我们将首先</p>
<ol>
<li>解释什么是移动边缘网络。</li>
<li>然后介绍了移动边缘网络的体系结构。</li>
<li>最后，我们讨论了移动边缘网络的优势。</li>
</ol>
<hr>
<h3><span id="a-what-is-mobile-edge-networks">A. What is Mobile Edge Networks？</span></h3><p>​    <strong><u>移动边缘网络</u>的核心思想是<u>利用SDN和NFV技术使网络功能，内容和资源更接近最终用户，即网络边缘</u>。<u>网络资源</u>主要包括<u>计算，存储或缓存</u>以及通信资源。</strong></p>
<p>​    尽管某些文献中的缓存包含在计算资源中[20]，但由于它们涉及的服务类型和问题不同，因此在本文中我们将分别讨论它们。</p>
<p>​    <strong>移动网络中的边缘计算</strong>是从<strong>移动云计算</strong>发展而来的，移动云计算是一种将计算能力和数据存储从移动设备转移到云中以利用云平台强大的计算和存储能力的架构[10]。然而，<strong>移动云计算</strong>面临着诸如<strong>长时延和高回程带宽消耗</strong>之类的挑战，因此<strong>不适合实时应用</strong>。[10]中的作者详细列出了MCC面临的技术挑战。在移动通信方面，由于无线网络的特性（例如，稀缺的无线资源，业务拥塞和多种无线接入技术（multi-RAT））所带来的挑战包括<strong>低带宽，服务可用性和异构性</strong>。在计算方面，环境变化下的高效，动态的计算卸载，以及用户和数据的安全性问题，数据访问的效率和上下文感知都面临挑战。相比之下，<strong>边缘计算使网络边缘具有云计算功能。</strong></p>
<p>​    工业界和学术界提出了<strong>三种</strong>不同的边缘计算方案：<strong>移动边缘计算，雾计算和cloudlet</strong>。移动边缘计算是由标准组织欧洲电信联盟标准协会（ETSI）提出的[17]。它基于<u>虚拟化平台</u>，该平台使应用程序可以在网络边缘运行。同时，<u>NFV的基础结构可以被应用程序重用</u>，这对网络运营商是有利的。<u>MEC服务器</u><strong>可以部署在网络边缘的各个位置</strong>，例如LTE宏基站（eNodeB）macro base station，3G无线电网络控制器3G Radio Network Controller （RNC）以及聚集点aggregation point。部署位置可能会受到延迟，所需资源，可用性，可扩展性和成本的影响。MEC应用程序可以根据诸如延迟，所需资源，可用性，可扩展性和成本之类的技术参数，智能，灵活地无缝部署在不同的MEC平台上。ETSI MEC的目标是为第三方应用<u><strong>提供标准的体系结构和行业标准化的API</strong></u> [36]。</p>
<p>​    <strong>雾计算</strong>是另一种边缘计算架构，旨在适应思科最初提出的物联网应用[36]。雾计算是云计算范例向无线网络边缘的扩展[21]。雾计算源于类比，即雾比云更接近人。同样，与大型数据中心相比，物联网设备到雾计算平台的距离更近。Cisco认为雾计算的必要性是，<strong>物联网应用的2层部署不足以满足低延迟</strong>，移动性和位置感知的需求[36]。<strong>该解决方案是一个多层体系结构，在设备和主云之间部署了一个中间雾平台。</strong>雾计算的主要特征是它是一个完全分布式的多层云计算架构，其中<strong>雾节点部署在不同的网络层</strong>中[37]。</p>
<p>​    <strong>微云Cloudlet</strong>的概念是由CMU的一个学术团队开发的[25]。它可以部署在<strong>Wi-Fi网络</strong>和<strong>蜂窝网络</strong>中。当设备移动时，cloudlets的关键特征是对<strong>边缘节点</strong>的应用程序<strong>近乎实时的配置</strong>以及<strong>边缘节点之间虚拟机映像的切换</strong>[36]。</p>
<p>​    <strong>移动边缘缓存</strong>被提出是为了应对未来移动网络中<strong>大量内容交付</strong>的挑战。<strong>存储的先进性</strong>使网络能够利用网络中不同位置的大量低成本存储资源。蜂窝网络的业务负载在时空域中是动态变化的[38]。<strong>主动缓存</strong>是一种通过在<strong>非高峰时段</strong>主动缓存<strong>流行内容</strong>来利用这种流量动态性的方法，从而减少了峰值流量需求[39]。由于缓存单元部署在网络边缘，因此可以利用许多信息来<strong>提高缓存效率。</strong>例如，<u>可以利用用户的社交结构通过D2D（device to device）通信来缓存和分发内容。</u></p>
<p>​    在上述讨论的基础上，我们将<strong><u>移动网络</u></strong>定义为：“借助<strong><u>SDN和NFV</u></strong>技术，在<strong><u>移动网络边缘</u></strong>部署和利用灵活的<strong><u>计算和存储资源</u></strong>，包括无线接入网、边缘路由器、网关和移动设备等的移动网络体系结构。</p>
<hr>
<h3><span id="b-architecture-of-mobile-edge-networks">B. Architecture of Mobile Edge Networks</span></h3><p>移动边缘网络引入了新的处理计算和存储资源的方式。工业界和学术界都提出了关于MEN（mobile edge networks）架构的建议。<br>我们将介绍具体的体系结构，包括ETSI MEC、雾计算、Cloudlet和边缘缓存。<br>然后，我们将对这些建议进行总结，并给出MEN的总体架构。</p>
<h4><span id="b-1-移动边缘计算">B-1 移动边缘计算</span></h4><p>移动边缘计算已经引起了产业界和学术界的广泛关注。<br>在行业方面，ETSI于2014年12月在MEC上推出了行业规范小组(ISG)。ISG生产的规范支持在标准的MEC环境中托管第三方创新应用程序[17]。该集团已经发布了关于服务场景、要求、架构和API的几个规范。<br>图2显示了MEC的体系结构。MEC服务器位于基站附近。<br>它们可以处理用户请求并直接响应UE（user end），或者将请求转发到远程数据中心和内容分发网络(CDN)[40]。</p>
<hr>
<p>名词解释：</p>
<h5><span id="backhaul">Backhaul</span></h5><p> <a href="https://zhuanlan.zhihu.com/p/145532668" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/145532668</a></p>
<hr>
<h5><span id="cdn">CDN</span></h5><p><a href="https://www.zhihu.com/question/36514327?rf=37353035" target="_blank" rel="noopener">https://www.zhihu.com/question/36514327?rf=37353035</a></p>
<p>CDN的意图就是尽可能的减少资源在转发、传输、链路抖动等情况下顺利保障信息的连贯性</p>
<p>CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。 </p>
<h5><span id="cdn基础架构"><strong>CDN基础架构：</strong></span></h5><p>最简单的CDN网络由一个DNS服务器和几台缓存服务器组成：</p>
<ol>
<li><p>当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器。</p>
</li>
<li><p>CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。</p>
</li>
<li><p>用户向CDN的全局负载均衡设备发起内容URL访问请求。</p>
</li>
<li><p>CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。</p>
</li>
<li><p>区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。</p>
</li>
<li><p>全局负载均衡设备把服务器的IP地址返回给用户。</p>
</li>
<li><p>用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</p>
</li>
</ol>
<hr>
<img src="/images/static/边缘计算/survey/ Convergence of Computing, Caching and Communications2.png" alt=" Convergence of Computing, Caching and Communications2" style="zoom:60%;">



<h4><span id="b-2-雾计算">B-2 雾计算</span></h4><p>​    雾计算是一个主要针对物联网用例设计的平台。其成分雾结点分布广泛。</p>
<p>​    Fog的主要特征是它利用多个终端用户客户端或近用户边缘设备之间的协作来帮助处理和存储移动设备[41]。与云相比，雾计算在三个方面具有优势：<strong><u>开发存储</u></strong>、<strong><u>计算和控制功能</u></strong>、在终端用户或<strong>接近终端用户时进行通信和联网[</strong>42]。</p>
<p>​    在雾计算看来，<strong>边缘</strong>是<strong>核心网络的一部分，是数据中心。</strong>雾和云相辅相成，使<strong>计算、存储和通信</strong>在云和端点之间的连续过程中的<strong>任何位置</strong>都成为可能。</p>
<p>​    雾计算也被集成到C-RAN体系结构中以形成FogRAN体系结构[43]。雾计算的体系结构如图3所示，它包括三层：<strong>云层、雾层和设备层。</strong>雾层可以根据需要<strong>包含多个层。</strong>雾节点可以是<strong>小型基站、车辆、WiFi接入点甚至用户终端</strong>，这些设备选择最合适的雾节点进行关联。</p>
<hr>
<h4><span id="b-3-微云cloudlet">B-3 微云Cloudlet</span></h4><p>​    Cloudlet提案是一个三层架构：“设备-云-云”[36]。<br>​    Cloudlet可以部署在<u><strong>WiFi接入点或LTE基站[13]</strong></u>。许多新应用程序需要1毫秒的端到端延迟。<br>理论上，1ms的传播延迟需要微云Cloudlet<strong>在300km内</strong>以光速传递，而现实中，为了保证延迟要求，小云块应该布置得更近一些。5G蜂窝网络和云端的结合将使这成为可能[44]。图4说明了Cloudlet系统的一般架构。<br>​    为了克服单一云小程序能力有限的问题，需要不同云小程序之间的协作来满足用户需求[45]。<br>表三总结了不同移动计算体系结构的比较。</p>
<hr>
<h4><span id="b-4-边缘缓存">B-4 边缘缓存</span></h4><p>​    移动边缘网络中的缓存已被证明是有益的。<br>由于不同类型基站的密集部署，未来的移动网络将是<strong>异构</strong>的。因此，缓存可以部署<strong>在移动网络中的各个位置</strong>。<br>在传统蜂窝系统中，用户请求的内容必须从<strong>远离移动网络</strong>的Internet  <strong>CDN节点取回</strong>。<br>​    然后，在移动核心网实现内容缓存。但是，<strong>回程链路backhaul</strong>仍然受到约束。<br>另外，随着<strong>基站和低成本存储单元</strong>的发展，在<strong>宏基站</strong>macro base station和<strong>小型基站上</strong>small bs部署Cache<strong>成为可能。<br>​    在未来的5G网络中，</strong>D2D<strong>通信可以根据用户之间的社会关系，</strong>利用用户设备上的存储单元**进行内容共享，如图5所示，给出了边缘缓存的总体架构。</p>
<p> 小蜂窝用户SUE   small cell user equipment</p>
<img src="/images/static/边缘计算/survey/ Convergence of Computing, Caching and Communications3.png" alt=" Convergence of Computing, Caching and Communications3" style="zoom:70%;">

<hr>
<h4><span id="b-5-总结对比">B-5 总结对比</span></h4><p>![ Convergence of Computing, Caching and Communications5](/images/static/边缘计算/survey/ Convergence of Computing, Caching and Communications5.png)</p>
<hr>
<h3><span id="c-advantages-of-mobile-edge-networks">C. Advantages of Mobile Edge Networks</span></h3><p>研究人员发现，与传统的集中式网络架构相比，移动边缘网络具有多方面的优势。</p>
<p><strong>1)降低时延</strong>：<u>由于处理和存储能力接近终端用户，可以显著降低通信时延。</u></p>
<p>受益于此的主要应用是计算卸载和视频内容交付。[46]的工作表明，使用MEC和云相结合的解决方案可以在不影响网络性能的情况下减少卸载包延迟。作者在[47]中证实，在WiFi和LTE网络中，通过边缘计算平台卸载可以大大改善高度交互和计算密集型应用(如增强现实和认知辅助)的延迟。Gaoet al[13]目前来自Wi-Fi和4G LT网络的实验结果表明，与云卸载相比，将负载转移到Cloudlets可以将响应时间提高51%。</p>
<p><strong>2)带宽减少</strong>：<u>对于带宽需求大的应用和计算密集型应用，在移动边缘网络基础设施中部署边缘服务器可以节省高达67%的运营成本。</u><br>研究结果表明，使用主动缓存方案可以节省高达22%的回程成本[39]。如果提高了存储能力，则有可能获得更高的收益。</p>
<p><strong>3)高能效：</strong>实验结果表明，对于WiFi网络和LTE网络中的不同应用，<u>边缘计算都能显著降低能耗[47]。</u><br>[49]对云计算中使用中心数据中心(DC)和雾计算中使用纳米数据中心(DC)的应用的能耗进行了比较，结果表明，使<strong>用纳米DC可以节能</strong>，其节能效果受接入<u>网络类型、纳米DC的活动时间与空闲时间的比例以及应用类型等</u>因素的影响。研究发现，与云卸载相比，移动设备通过云卸载的能耗最高可降低42%[13]。</p>
<p><strong>4)邻近服务：</strong>移动教育网络的架构在提供邻近服务方面具有很大优势，<u>因为边缘服务器离终端用户更近，并且可以利用D2D通信技术[50]。</u></p>
<p><strong>5)上下文信息的利用：</strong>部署在无线接入网络中不同位置的MEC服务器可以获得详细的上下文信息，包括<u>网络级信息、设备级信息</u>[50]。有了这些信息，<u>可以更有效地分配网络资源，改善用户体验。</u>例如，基于位置的应用程序可以直接部署在MEC服务器上，而不是部署在远离用户的互联网云上</p>
<hr>
<h2><span id="computing-at-mobile-edge-networks">Computing at Mobile Edge Networks</span></h2><p>​    计算(算力)是移动网络中的主要资源。最近出现了许多计算密集型应用程序，例如作为增强现实、高清视频流和互动游戏。然而，移动设备的计算能力受到很大的限制。另外，对于当前移动设备的电池容量而言，这些计算任务的功耗非常高。边缘计算范例可以将计算任务卸载到功能强大的边缘服务器。边缘网络的计算有多大好处？为了找到这个问题的答案，已经做了很多工作。在这一部分中，我们将综述关于这一问题的最新研究成果。</p>
<hr>
<h3><span id="3-a-objective">3-A Objective</span></h3><p>​    边缘计算的好处是多方面的。不同的应用或系统可能具有不同的性能要求。我们将介绍一些边缘计算可以达到的常见性能目标。</p>
<hr>
<h4><span id="1-能耗最小化">1) 能耗最小化</span></h4><p>​    对边缘计算的能效进行了大量的评估工作，针对网络端和设备端的能耗最小化提出了各种优化方案。在5G异构网络中进行计算卸载时，需要同时考虑<strong>任务计算</strong>和<strong>文件传输</strong>的能量开销。<br>​    </p>
<p><strong>Zhang某等人。[51]设计了一种节能的计算卸载方案，在时延约束下，联合优化无线资源分配和卸载，最小化卸载系统的能耗。</strong></p>
<p>​        首先根据设备的能力和要求将其分为三种类型。</p>
<ol>
<li>然后，它们把MBS和SBS的无线信道，迭代的根据移动设备的优先级分配给移动设备，直到无线资源用完或所有设备都被分配了所需的信道。</li>
<li>在每步迭代步骤中，该方案保证了系统获得最小的能量开销。</li>
<li>结果表明，该方案在无负载计算的情况下具有较低的能耗，特别是在移动设备数量较多的情况下。</li>
</ol>
<p>​    在[52]中，作者研究了<strong>雾与云之间的能量感知</strong>相互作用。结果表明，<strong><u>在不明显降低网络性能的情况下，可以降低数据中心的整体能耗</u></strong>。</p>
<hr>
<h4><span id="2最大限度地提高容量">2)最大限度地提高容量</span></h4><p>​    下一代5G网络需要比当前4G LTE网络高1000倍/每区域 移动数据量支持[53]。<br>这就要求在RAN、回传和前传（fronthaul backhaul）有更大的容量。卸载是解决RAN中的挑战的技术组合之一，此外还有更多的频谱、网络密集化和更高的频谱效率[54]。将雾和云操作相结合的策略可以实现较高的系统容量，同时为请求的服务提供低延迟[55]。</p>
<hr>
<h4><span id="3最小化时延">3)最小化时延</span></h4><p>时延是影响用户体验的重要性能指标。下一代5G网络的延迟要求是1ms往返时间(RTT)，几乎比4G的10ms RTT减少了10倍[34]。对于实时应用，将任务卸载到云带来的延迟是不可接受的。增强高密度SBS的计算能力是一种更可行的方法。</p>
<p>​    作者在[56]<strong>中提出了一种适用于延迟敏感应用的分布式云感知功率控制算法</strong>。</p>
<p>​    在[57]中，提出了<strong>功耗约束下的时延最小化问题</strong>。针对MEC系统设计了一种最优计算任务调度策略。LTE下行链路中的一般业务流的延迟可以通过部署在eNodeB[58]处的MEC<strong>服务器的服务级别调度</strong>来最小化。</p>
<p>​    <strong><u>雾还提供低延迟，但容量限制较低，而雾和云的联合运行可以最大限度地减少服务延迟，同时保证容量需求[55]。</u></strong></p>
<hr>
<h4><span id="知识小补充">知识小补充：</span></h4><p>D2D（Device to Device）通信是指UE不经过基站可以直接进行通信，每一个D2D通信链路占用的资源与一个蜂窝通信链路占用的相等，可以提高资源利用率和网络容量。而M2M是5G通信的一个研究热点，不仅包括UE还包括各种Machine之间的通信。</p>
<hr>
<h3><span id="3-b-computation-offloading">3-B Computation Offloading</span></h3><p>​    边缘计算的<strong><u>主要目的</u></strong>之一是进行<strong><u>计算卸载</u></strong>，以打破移动设备在计算能力、电池资源和存储可用性等方面的限制。何时以及如何卸载计算任务是一个难题。在单一用户、多用户以及车载网络[59]、[60]、[61]等多种场景下，已经提出了多种方法来解决这一问题。此外，在下一代异构网络中，通过利用D2D通信[51]、[62]，<strong><u>计算任务不仅可以卸载到服务器上，还可以卸载到设备上</u></strong>。表中显示了有关计算卸载的文献摘要。</p>
<hr>
<h4><span id="1-单用户情况-singlei-user-case">1） 单用户情况 singlei User Case</span></h4><p>​    对于单用户情况，需要分析在移动设备上执行移动应用(移动执行)还是卸载到云上的最佳选择[8]。<br><strong>一个共同的设计目标</strong>是为<strong><u>移动设备节省能源。</u></strong><br>考虑无线网络中的随机（stochastic）信道条件，需要得到最优的调度策略。<br>​    <strong>在[61]中，根据<u>能量消耗模型和无线信道模型</u>推导了一种基于阈值的调度策略。</strong></p>
<p>​    <strong>在[59]中</strong>，针对具有<strong><u>能量采集装置</u></strong>的MEC系统，提出了一种<strong>低复杂度</strong>的在线算法。该算法称为基于<strong>李雅普诺夫优化</strong>（Lyapunov optimization-based）的动态计算卸载算法，它联合确定卸载决策、CPU周期频率和卸载发射功率。</p>
<p>​    作者在[63]中研究了<strong><u>以最小化设备能耗和应用程序执行延迟为目标</u></strong>的<strong>部分计算卸载问题。</strong><br>他们同时考虑<strong><u>单服务器方案和多服务器</u></strong>方案。结果表明，当器件具有动态定压能力时，局部执行是最优的，而总卸载不是最优选择。</p>
<hr>
<h4><span id="2-多用户情况-multi-user-case">2） 多用户情况 Multi-user Case</span></h4><p>​    多用户情况下的卸载问题比单用户情况下的卸载问题更为复杂。在这个问题上已经做了很多研究工作。</p>
<p>​    Chen等人[64]证明了<strong>多用户计算卸载问题</strong>是<u><strong>NP-hard</strong></u>问题，并提出了一种有效的计算卸载决策的<strong>分布式博弈论</strong>方法。</p>
<p>​    在[65]中，作者对<strong>无线资源</strong>和<strong>计算资源</strong>进行了联合优化，以<strong>最小化</strong>具有时延约束的<strong>MIMO</strong>multi-cell系统中用户的<strong>总能量消耗</strong>，其中<strong>多个用户将计算任务卸载到一个公共云服务器</strong>。<br>针对这一<strong>非凸问题</strong>，提出了一种基于<strong>逐次凸逼近技术</strong>的迭代算法。</p>
<p>​    Huang et al等人。[66]研究同时<strong>采用时分多址(TDMA)和正交频分多址(OFDMA)的多用户移动边缘计算卸载系统</strong>的最优资源分配问题。</p>
<p>​    作者在[67]中将多用户<strong>计算卸载问题转化为多背包问题</strong>，并提出了一个求解该问题的<strong>启发式算法。</strong></p>
<p>​    在[68]中，考虑了密集cell间干扰环境和MEC计算资源的限制。提出了一种<strong>自适应顺序卸载博弈方法</strong>，通过自适应<strong>调整卸载用户数</strong>来<strong>减小排队延迟</strong>。</p>
<p>作者在[69]中提出了一种<strong>在线数据流任务</strong>的<strong>机会式计算卸载方案。</strong><br>使用从12个用户收集的500万个活动的事件数据流对该方案进行了15天的评估，结果显示数据显著减少了98%</p>
<hr>
<p>​    <strong>启发式算法</strong>（heuristic algorithm)是相对于<a href="https://baike.baidu.com/item/最优化" target="_blank" rel="noopener">最优化</a>算法提出的。一个问题的最优算法求得该问题每个实例的<a href="https://baike.baidu.com/item/最优解/5208902" target="_blank" rel="noopener">最优解</a>。启发式算法可以这样定义：一个基于直观或经验构造的算法，在可接受的花费（指计算时间和空间）下给出待<strong>解决组合优化问题</strong>每一个实例的一个<a href="https://baike.baidu.com/item/可行解/962143" target="_blank" rel="noopener">可行解</a>，该可行解与最优解的偏离程度一般不能被预计。现阶段，启发式算法以仿自然体算法为主，主要有<a href="https://baike.baidu.com/item/蚁群算法/9646604" target="_blank" rel="noopener">蚁群算法</a>、<a href="https://baike.baidu.com/item/模拟退火法/10423893" target="_blank" rel="noopener">模拟退火法</a>、<a href="https://baike.baidu.com/item/神经网络/16600562" target="_blank" rel="noopener">神经网络</a>等。</p>
<hr>
<h4><span id="3-卸载到mec服务器-offloaded-to-mec-server">3） 卸载到MEC服务器   Offloaded to MEC Server</span></h4><p>卸载到MEC服务器：卸载计算任务的<strong>常见位置</strong>是MEC服务器。</p>
<p>在[70]中提出的REPLISOM架构将<strong>多个物联网设备</strong>产生的<strong>存储对象卸载</strong>到位于LTE     eNodeB的<strong>边缘云。</strong></p>
<p>在[71]中，基于<strong>协商卸载策略的通信协议</strong>将视频呼叫过程中的<strong>视频编码过程卸载到MEC边缘服务器</strong>，降低了移动设备在视频呼叫过程中的<strong>能耗。</strong></p>
<p>[72]针对<strong>多用户雾计算场景</strong>中的负载均衡问题，提出了一种<strong>低复杂度的雾聚类算法</strong>。<br>提出了一种两层无线接入点聚类算法，该算法比单一的集中式和分散式策略[60]获得更好的体验质量。</p>
<p>[73]文中综合考虑了<strong>能耗、时延和执行单位</strong>成本，设计了<strong>任务卸载的最优方案。</strong><br>他们根据移动设备有限的能量和计算单元定义了<strong>机会消费的概念</strong>。</p>
<h4><span id="4-卸载到设备-offloaded-to-devices">4） 卸载到设备 Offloaded to devices</span></h4><p>随着智能设备技术的进步，使用<strong>D2D技术</strong>可以利用更多的计算资源。</p>
<p>​    可以利用共处一地的移动设备的集合来在边缘提供云服务[62]。</p>
<p>在这种情况下，<strong>计算任务</strong>可以被卸载到附近的<strong>移动设备，</strong>而<strong>不是MEC服务器</strong>，任务调度问题需要重新研究，这与卸载到服务器上的任务调度问题不同。</p>
<hr>
<h4><span id="5-mobility-awareness-移动性意识">5） Mobility Awareness 移动性意识</span></h4><p>在移动边缘网络中，用户移动性是不可忽视的。<br>由于用户的移动性，<strong>用户和MEC服务器之间的联系时间是动态的</strong>，这将影响卸载策略，特别是在哪里以及卸载什么。</p>
<p>作者在[75]中提出了一个移动性模型，该模型认为<strong>任意两个用户之间的相互联系时间服从指数分布</strong>。</p>
<p>在此模型的基础上，在文献[74]中提出了<strong>移动性感知的计算卸载策略。</strong></p>
<hr>
<h3><span id="3-c-cooperation-between-the-edge-and-the-core">3-C Cooperation between the edge and the core</span></h3><p>​    尽管移动边缘网络具有时延低、能量效率高等优点，但是移动边缘网络的计算资源仍然有限。<u>要发挥<strong>边缘网络</strong>和<strong>核心网络云平台</strong>的优势，两者之间的<strong>合作</strong>是很有价值的。</u><br>​    文献[76]研究了<strong>雾云联合计算系统中的工作量分配问题</strong>。作者设计了一种近似方案来权衡功耗和延迟，仿真结果表明雾和云之间的协作可以显著提高云计算的性能。<br>​    在[77]中提出了一种结合<strong>雾计算和公共/私有物联网云的混合方法</strong>来支持<strong>集成物联网应用</strong>。提出的解决方案可以提高<u>任务请求的成功执行数量</u>。<br>​    在[55]中，作者将<strong>雾和云</strong>的操作相结合，以同时<strong>提高延迟性能和系统容量</strong>。</p>
<hr>
<h3><span id="4-d-platforms">4-D Platforms</span></h3><p>​    在对移动边缘计算进行理论探讨的基础上，初步实现了<strong><u>移动边缘计算服务器。</u></strong><br><strong>诺基亚</strong>网络在2014年推出了一个真实的MEC平台：无线应用云服务器(RACS)[78]。<br>RACS使用<strong><u>VM虚拟机</u></strong>管理程序部署<strong><u>执行MEC应用程序的虚拟机映像。</u></strong><br>​    [79]根据工业物联网过程的操作需求，提出了一种自适应操作平台adaptive operation platform(AOP)来管理雾计算基础设施。AOP包括几个功能元素：<strong>Model Building元素、Rule Mapper元素和Rule Deployer元素</strong>。<br>​    在[80]中，作者<strong>以M2M Fog平台为例，</strong>评估了将Fog节点连接到LTE Network的三种不同部署：基于<u><strong>宏蜂窝的遗留部署、基于D2D的部署和基于小蜂窝的部署</strong></u></p>
<hr>
<h2><span id="caching-at-mobile-edge-networks">Caching at Mobile Edge Networks</span></h2><p>要在移动网络中开发缓存技术，需要研究很多问题。<br><strong><u>在哪里缓存？缓存什么？如何缓存？</u></strong><br>传统的以<strong>内容为中心的网络缓存方案</strong>没有考虑无线网络的<strong><u>动态流量负载</u></strong>和<strong><u>干扰等特性</u></strong>[81]。<br>在这一部分中，我们将综述在移动边缘网络中所做的研究工作。<br>相关问题包括。</p>
<ol>
<li>缓存位置</li>
<li>内容描述</li>
<li>缓存策略</li>
<li>内容交付等。</li>
</ol>
<p>有关边缘缓存的文献摘要如表V所示。</p>
<hr>
<h3><span id="4-a-cashing-places-缓存的位置">4-A Cashing Places 缓存的位置</span></h3><p>在移动网络中有许多可以部署高速缓存单元的地方。<br>在基于全IP的蜂窝网络中，可以部署缓存的<strong><u>三个主要位置是核心网、无线接入网(RAN)和用户设备。</u></strong><br>目前广泛部署的缓存位置是演进包核心(EPC)[26]。evolved packet core<br>通过在<u>移动核心网络</u>缓存内容，移动通信量可以减少三分之一到三分之二。此外，在EPC处部署缓存在技术上比在RAN处更容易。<br>边缘网络的缓存位置如下所述</p>
<hr>
<h4><span id="1-mbs-caching-mbs缓存">1) MBS Caching    （MBS缓存）</span></h4><p>在异构网络中，MBSs具有更大的覆盖范围，可以为更多的用户提供服务。<br>以MB为单位进行缓存可以获得更好的<strong><u>缓存命中概率</u></strong>。</p>
<p>在[82]中，研究了MBS的<strong><u>反应式和主动式缓存的性能</u></strong>。提出了一种结合边缘缓存的视频感知回传和无线信道调度技术。结果表明，该算法可以显著提高视频容量，降低视频的失速概率。</p>
<p>作者在[83]中研究了MBS缓存的存储分配问题。他们提出了一种启发式方法来解决NP-Hard问题。</p>
<hr>
<h4><span id="2-sbs-caching-sbs缓存">2) SBS Caching    （SBS缓存）</span></h4><p>SBS缓存：SBS密集部署在下一代异构网络中。<br>因此，<strong>SBSs处的缓存是另一个不错的选择，因为SBSs距离终端用户更近，并且通常提供更高的数据速率。</strong><br>许多文献研究了SBSS[84]，[85]，[86]，[87]，[88]的缓存性能。</p>
<hr>
<h4><span id="3-device-caching-设备缓存">3) Device Caching    （设备缓存）</span></h4><p>设备缓存：<strong>D2D</strong>通信是下一代5G网络的关键技术之一。<br><strong>移动设备中的存储资源是可以利用的</strong>。<br>如果仔细设计缓存策略，在移动设备上缓存内容可以极大地提高用户的QOE。<br>文献[89]考虑了用户之间的社会关系和共同兴趣，提出了一种基于缓存的D2D通信方案。<br>在[90]中，提出了一种利用设备缓存能力的机会主义协作D2D传输方案。<br>在该方案中，将D2D用户分成簇，并在簇内的用户处缓存不同的热门文件。<br>实验结果表明，在热度分布不对称的情况下，与现有的D2D缓存方案相比，该策略可以提供5~6倍的吞吐量增益。</p>
<hr>
<h3><span id="4-b-content-popularity-内容热度">4-B. Content Popularity 内容热度</span></h3><p>在决定在边缘网络中缓存什么内容时，应该考虑内容的普及度来最大化缓存的命中概率，即用户请求的内容在边缘网络中被缓存的概率。</p>
<h4><span id="1-static-model-静态模型">1) Static Model 静态模型</span></h4><p>静态模型：目前关于移动缓存的研究大多假设内容热度是静态的，采用<strong>独立参考模型(IRM</strong>)：<strong>内容请求</strong>是根据一个<strong>独立的泊松过程</strong>产生的，其比率与内容热度相关，采用幂律模型[91]。<br>常用的流行模型是在网络缓存中观察到的zipfmodel[92]。</p>
<h4><span id="2-dynamic-model-动态模型">2) Dynamic Model  动态模型</span></h4><p><strong>动态模型：</strong>静态IRM模型不能反映时变的真实内容热度[91]。<br>动态流行度模型称为<strong>散粒噪声模型</strong>(SNM)，它是在[93]中提出的。<br>在[94]中，作者分析了<strong>用户生成内容</strong>(UGC)热度分布的统计特性，并讨论了利用长尾视频需求的机会。该模型使用两个参数对每个内容进行建模：持续时间反映内容的生命周期，高度反映内容的瞬时受欢迎程度。在[94]中，作者分析了<strong>用户生成内容(UGC)热度分布的统计特性</strong>，并讨论了<strong>利用长尾视频需求的机会</strong>。</p>
<hr>
<h3><span id="4-c-caching-policies-and-algorithms-缓存策略和算法">4-C. Caching Policies and Algorithms  缓存策略和算法</span></h3><p>在移动缓存中已经提出了各种缓存策略和算法。<br>对<strong>有线网络中一些传统的缓存策略进行了修改</strong>，使之适用于无线网络，并提出了<strong>基于学习的缓存策略</strong>和<strong>协作缓存策略</strong>等新的缓存策略。<br>文献[95]详细回顾了信息中心网络中传统的缓存策略和转发机制。<br>我们将在下面给出无线移动网络中的缓存策略的分类，如表VI.</p>
<hr>
<h4><span id="1conventional-caching-policies-传统的缓存策略">1)Conventional Caching Policies   传统的缓存策略</span></h4><p>内容替换策略，例如最不频繁使用(LFU)和最近最少使用(LRU)，已经在大量的高速缓存策略中被采用[95]、[96]。<br>这些策略对于<strong>大小一致的对象</strong>来说是简单而有效的。<br>但是，这些策略忽略了对象的<strong>下载延迟和大小</strong>。<br>在<strong>内容递送网络</strong>content deliver networks中使用的另一种主动缓存策略是MPV策略，其基于<strong>全球视频流行分布</strong>来缓存<strong>最受欢迎的视频[82]。</strong><br>然而，与CDN相比，<strong>RAN的缓存大小</strong>非常有限。<br>对于RAN缓存，MPV策略实现的命中概率<strong>可能过低。</strong></p>
<hr>
<h4><span id="2-user-preference-based-policies-基于用户偏好的策略">2) User Preference Based Policies  基于用户偏好的策略</span></h4><p>基于用户偏好的策略：在[82]中，作者提出了一种<strong>基于用户偏好模型</strong>(UPP)user preference profile的缓存策略，发现本地视频热度与全国视频热度有很大的不同，用户可能对<strong>特定的</strong>视频类别表现出强烈的偏好。<br>每个用户的UPP被定义为用户请求<strong>特定视频类别的视频的概率</strong>.</p>
<hr>
<h4><span id="3-learning-based-policies-基于学习的策略">3) Learning Based Policies  基于学习的策略</span></h4><p>基于学习的策略：事实上，内容的<strong>受欢迎程度</strong>是<strong>随时间变化的</strong>，事先是不知道的。<br>因此，对及时的<strong><u>内容热度进行跟踪和估计</u></strong>是一个重要的问题。<br>基于机器学习技术，文献[97]提出了基于学习的缓存策略。<br>作者在[97]中从<strong>强化学习的角度</strong>解决了SBSs中的分布式缓存问题。<br>通过<u>采用编码缓存</u>，将缓存问题归结为<u>考虑网络连通性的线性规划问题</u>，编码缓存方案的性能优于未编码缓存方案作者在[98]采用<u>基于Q学习</u>的策略解决缓存替换问题。</p>
<hr>
<h4><span id="4-non-cooperative-caching-非协作缓存">4) Non-Cooperative Caching  非协作缓存</span></h4><p>现有的一些缓存策略<u>决定每个基站缓存的内容</u>，没有考虑基站之间的协作，<u>不考虑协作</u>。<br>在[82]中，该方案基于特定小区内的UPP实际使用情况做出缓存决策，而不考虑其他小区内的缓存对缓存的影响。<br>在[98]中，缓存替换问题被建模为<u>马尔可夫决策</u>过程(MDP)，使用<u>Q-学习方法</u>以分布式的方式解决，而不需要在BS之间交换关于缓存数据的额外信息。<br>该策略优于传统的LFU、LRU和随机化策略</p>
<hr>
<h4><span id="5-cooperative-caching-协作缓存">5) Cooperative Caching 协作缓存</span></h4><p>在设计缓存策略时，很多已有的工作都研究了缓存位置之间的协作问题。</p>
<p>在[99]中，为了最大化缓存服务的业务量和最小化带宽成本，提出了一种轻量级协作缓存管理算法；</p>
<p>在[100]中，研究了<strong>毫微微基站</strong>femto base stations与用户设备(UE)之间的内容缓存和分发的协作问题。<br>将协同缓存问题描述为<u>整数线性规划问题</u>，并用<u>次梯度法求解。</u>内容分发策略被描述为一个<u>不平衡分配</u>问题，并使用Hungrian算法进行求解。</p>
<p>在[101]中，作者探索了可伸缩视频编码(SVC)技术在小区间协同视频缓存和调度中的应用，以进一步提高缓存容量和用户服务质量；</p>
<p>在[102]中，作者研究了RAN中缓存之间的协作，得出了<u><strong>每个基站缓存内容的最佳冗余率。</strong></u></p>
<p>在[90]中，D2D用户之间的协作被用于启用高速缓存的D2D通信。</p>
<p>文献[103]提出了一种基于网络编码的内容放置方法。<br>该策略增加了用户可用的数据量，同时实现了数据的公平分布。<br>在[88]中，作者联合设计了缓存和路由方案，以最大化小小区基站在BS带宽约束下所服务的内容请求。<br>该问题归结为<strong>设施选址问题</strong>，并使用<strong>有界近似算法</strong>求解。</p>
<hr>
<h3><span id="4-d-caching-of-different-file-types-不同文件类型的缓存">4-D. Caching of Different File Types   不同文件类型的缓存</span></h3><p>用于缓存的最常见文件类型是多媒体文件，例如流行的视频和音频文件。物联网是下一代5G网络的主要用例之一，因此随着IoT数据量的增加以及与多媒体数据相比物联网数据具有不同的特性，物联网数据的缓存也很重要。</p>
<p>1）<strong>大型数据文件或多媒体数据</strong>：现有的大多数文献[82]，[94]，[101]中都研究了<strong>大型多媒体数据</strong>特别是视频文件的缓存设计。多媒体数据的特点是许多用户对它们有相同的兴趣热门视频。因此，在RAN中缓存受欢迎的文件可以<strong>从高命中率中受益。</strong></p>
<p>2）<strong>IoT数据：</strong>运行在数十亿台设备上的物联网应用程序生成的低速率监控、测量和自动化数据需要缓存以减少总流量负载。然而，<u>物联网数据与多媒体数据的不同之处</u>在于，<u>物联网数据</u>具有<strong>较短的生命周期</strong>。因此，需要不同的缓存策略。</p>
<p>在[104]中，作者提出了一个<strong>既考虑通信成本又考虑瞬时物联网数据项新鲜度的模型</strong>。网络负载可以显著降低，特别是对于<strong>高请求的数据。</strong></p>
<hr>
<h3><span id="4-e-mobility-awareness-移动意识">4-E. Mobility Awareness 移动意识</span></h3><p><u><strong>用户移动性</strong></u>是无线网络的一项独特功能，因此在网络边缘进行缓存时应考虑这一点。在此问题上已经做了很多工作。</p>
<p>[105]的作者提出了一种<u>以内容为中心的无线网络</u>中的移动感知缓存的通用框架。对用户移动性的时空特性都进行了建模。</p>
<p>在[106]中，考虑了<u>用户的移动性模式，</u><u>并且将移动性感知缓存问题表述为旨在最大化缓存效用的优化问题</u>，并且作者提出了<u>多项式时间启发式</u>解决方案来解决该问题。</p>
<p>在[107]中分析了<strong>用户移动性</strong>对边缘缓存<strong>命中性能</strong>的影响。</p>
<p>在[108]中，将用户移动性建模为<u>离散时间马尔可夫链</u>。作者考虑了一种场景，其中<strong>已编码内容文件</strong>的段存储在具有主基站初始化的小区中的一组基站中。缓存算法旨在最大程度地减少使用<u>主基站进行文件传输的可能性。</u></p>
<p>与假定用户移动性之前的工作不同, 在[109]中，<u>当用户移动性未知时</u>，基于移动性预测算法研究切换用户的内容服务的连续性。</p>
<p> 在[110]中，作者利用以信息为中心的网络和移动Follow-MeCloud方法来<u>增强位于移动网络边缘的内容缓存的迁移</u>。与现有解决方案相比，所提出的contentrelocation算法可将内容可用性提高多达500％。</p>
<hr>
<h3><span id="4-f-impact-on-system-performance-对系统性能的影响">4-F. Impact on System Performance 对系统性能的影响</span></h3><p>1）<u><strong>Capacity容量</strong></u>：有关边缘缓存的现有工作已证明，在<strong>网络边缘进行缓存可以显着提高系统容量</strong>。例如，在[82]中提出的解决方案与<strong>RAN中</strong>没有缓存相比，可以将容量提高3倍。</p>
<p>2）<u><strong>Delay 延迟</strong></u>：由于缓存与最终用户的接近，在网络边缘进行缓存可以显著<strong>减少内容传递延迟</strong>。在[82]中，通过联合调度<strong>RAN backhaul</strong>和<strong>无线信道</strong>来减少视频会话的初始延迟和停顿，因此提高了视频QoE。在[111]中，推导了<strong>交付延迟与前传资源</strong>之间的权衡tradeoff折中。</p>
<p>3）<u><strong>Spectral Efficiency 频谱效率</strong></u>：在[112]中，作者使用<u>随机几何理论</u>将启用缓存的2层HetNet与传统的没有缓存的HetNet进行了比较。数值结果表明，与没有缓存的微微BS密度相比，启用缓存的助手密度cashe-enabled helper density可以降低3/4，以实现相同的区域频谱效率（ASE）。<u>给定一个区域内的总容量，存在一个最佳的启用缓存的SBS密度，该密度可最大化ASE。</u></p>
<p>4）<u><strong>Energy Efficiency 能源效率</strong></u>：<strong>能源效率</strong>是下一代5G网络的另一个重要性能指标。</p>
<p>在[113]中，分析了缓存对BS的影响时的<strong>下行网络的能量效率</strong>。结果表明，<u>当文件目录大小较小且在多个微小BS处进行缓存比在宏BS处进行缓存时，</u>能源效率将得到提高。</p>
<p>在[114]中，展示了在<strong>软件定义的异构网络中</strong>，能源效率和小单元密度之间的基本权衡。<strong>启用缓存的异构网络</strong>的能源效率远高于当前的<strong>LTE网络</strong></p>
<hr>
<h2><span id="advances-in-communication-techniques-with-synergy-of-computing-and-caching">Advances in Communication Techniques with Synergy of Computing and Caching</span></h2><p>利用计算机的协作和进取来推进通信技术</p>
<p><strong>计算和缓存资源与通信系统的</strong>结合将在很大程度上改变通信网络的设计理念。5G与MEC的结合将使某些跨域和跨域使用案例变得可行，例如汽车服务和电子医疗服务[50]。通过协调集群中启用云的小型cell，可以在<strong>通信网络内部</strong>创建<strong>分布式光数据中心[</strong>115]，[51]。在本节中，我们将讨论通信技术以及通信，计算和缓存的协同作用。</p>
<h3><span id="a-mmwave-communication-毫米波通信">A. mmWave Communication (毫米波通信)</span></h3><p>在未来的网络中使用<strong>毫米波频谱</strong>可以实现高数据速率传输。</p>
<p>整合5G的各种方案已经提出了具有传统蜂窝网络的BS，例如独立的毫米波系统以及毫米波BS和4G BS的混合系统[34]。毫米波频谱主要用于<strong>数据通信</strong>。<strong>毫米波基站所使用的<u>窄波束</u></strong>可以提高基站与大量用户之间的链路质量。</p>
<p>但是，这种部署方式也带来了新的挑战，即<strong>连接持续时间短</strong>和<strong>高移动性用户</strong>的频繁切换，使视频流遭受长时间延迟的困扰。[116]中的作者提出了一种基于缓存的mm-wave框架，该框架在BS处为切换用户预缓存内容。所提出的解决方案可以为5G毫米波小型小区中的高移动性用户提供一致的高质量视频流。</p>
<h3><span id="b-d2d-communication-d2d通信">B. D2D Communication (D2D通信)</span></h3><p>D2D通信可实现附近的终端设备之间的直接传输。它被公认为5G网络的主要技术之一。</p>
<p><strong><u>使用D2D通信的优点包括单跳通信，更高的频谱效率，更低的传输功率，覆盖范围扩展和频谱重用</u></strong>[117]，[118]。另外，<u>借助D2D通信，可以将大型MTC设备<strong>从MBS卸载到SBS</strong></u>，从而提高了整体网络容量并避免了MBS的流量拥塞[119]。</p>
<p>许多以前的D2D通信研究都集中在频谱复用，对等发现，功率控制，连接建立和干扰管理[120]，[121]。利用边缘缓存和计算的概念，在大量智能设备上使用计算和存储资源引起了研究人员的注意。许多研究人员正在研究通过D2D通信进行的计算分流和内容共享问题[62]，[89]，[90]</p>
<h3><span id="c-transmission-schemes-传输方案">C. Transmission Schemes (传输方案)</span></h3><p><strong><u>普遍部署的低成本缓存促进了以内容为中心的传输的发展</u></strong>。移动网络中的这些缓存将内容移动到最终用户附近。</p>
<p>但是，如何提高小型蜂窝中小型缓存的有效性是一个挑战。由于缓存的内容对于本地用户而言很受欢迎，因此对同一文件的某些请求可能会在附近发生。因此，<u>可以通过<strong>单个多播传输</strong>来保留这些请求[87]。</u>与使用单播传输的缓存方案相比，支持多播的方案可以将成本降低多达88％。当所请求的内容在某些时隙中都不同时，可以采用交织的传输方案来平衡每个SBs的顺序时隙的流量[122]。</p>
<h3><span id="d-interference-management-干扰管理">D. Interference Management (干扰管理)</span></h3><p>在未来的超密集异构网络中，干扰是一个关键挑战。小型小区网络干扰管理的潜在技术之一是干扰队列alignment（IA）。在[122]中，作者研究了利用缓存和计算技术开发的以内容为中心的通信的IA问题。<strong>利用以内容为中心的缓存原理，简化了干扰网络的拓扑结构，简化了干扰管理</strong>。由于云计算平台的高计算能力，IA的解决方案可以轻松计算。所提出的框架减少了回程负载和CSI反馈的开销，同时提高了吞吐量。</p>
<h3><span id="e-communication-resources-allocation-and-scheduling通信资源分配和安排">E. Communication Resources Allocation and Scheduling(通信资源分配和安排)</span></h3><p>随着通信系统中缓存和计算资源的集成，通信资源的分配和调度与传统网络有所不同。<u>除了缓存放置之外，通信资源的调度也影响缓存的效率</u>。在[82]中，视频感知回程调度和缓存的联合设计可以将容量提高到比传统策略高50％以上。</p>
<p>当无线信道带宽受到限制时，对<u>无线信道调度的精心设计会导致明显更高的视频容量。</u></p>
<p>在[101]中研究了<u><strong>结合协作缓存和SVC</strong></u>的联合缓存和视频计划策略。</p>
<h3><span id="f-synergy-of-communication-computing-and-caching通讯计算和缓存的协同作用">F. Synergy of Communication, Computing and Caching(通讯，计算和缓存的协同作用)</span></h3><p>通过使<strong><u>移动网络具有更高的计算能力，可以节省稀缺的通信资源</u></strong>。在[123]中，提出了一种内容瘦身系统，该系统可以检测冗余视频内容并通过计算从原始帧中裁剪出来，仅<u>发送必要的视频内容</u>。与H.264相比，该方案可将传输带宽消耗至少降低50％，而不会牺牲视频质量和视觉体验。</p>
<p><u><strong>应用类型，用户移动性和通信资源将影响部署计算和缓存资源的最佳位置[124]</strong></u>。</p>
<p>对于需要计算任务的低带宽，高持久性用例，由于毫微微小区的频繁切换和低计算能力，不应在<strong>毫微微小区部署计算资源，尤其是在回程传输延迟最小的情况下。</strong></p>
<p>对于高带宽位置限制服务需要存储资源（例如AR），则应将计算和缓存资源部署在尽可能靠近最终用户的位置。总之，应根据<strong>服务类型利用部署在网络不同层上的计算和缓存资源，并考虑回程容量。</strong></p>
<hr>
<h2><span id="applications-and-usecase">Applications and Usecase</span></h2><p>新的应用是网络架构发展的主要动力。新兴应用程序对数据速率，等待时间等的要求越来越严格。在本节中，我们将总结移动边缘网络中的应用程序和用例，如表VII所示。</p>
<h3><span id="a-dynamic-content-delivery-动态内容交付">A. Dynamic Content Delivery 动态内容交付</span></h3><p>随着多媒体内容需求的增加，回程链路backhaul在传统的集中式网络体系结构中面临拥塞问题。<u><strong>缓存边缘网络</strong></u>可以基于<u>网络状态信息和用户的上下文感知信息</u>来提供<strong>动态内容交付</strong>[19]，[125]。由于内容放置在靠近移动用户的位置，因此移动用户的QoE有了显着提高。</p>
<h3><span id="b-augmented-realityvirtual-reality-增强现实虚拟现实">B. Augmented Reality/Virtual Reality 增强现实/虚拟现实</span></h3><p>增强现实（AR）和虚拟现实（VR）技术被视为将改变我们生活方式的最有前途的应用程序。此应用程序需要用户状态的实时信息，例如用户所面对的位置和方向。MEC服务器能够利用本地上下文信息并具有强大的处理能力，非常适合AP / VR应用[126] 。</p>
<h3><span id="c-intensive-computation-assistance-密集计算辅助">C. Intensive computation assistance 密集计算辅助</span></h3><p>为了降低设备成本，通常会牺牲计算能力。因此，对于具有大量计算任务的此类应用，需要非常低的处理时间和低等待时间的计算分载是必要的。<strong>MEC服务器具有很高的计算能力，并且可以在很短的时间内处理卸载的计算任务</strong>。而且，MEC服务器可以从多个来源收集信息，这有助于那些设备执行需要来自多个来源的信息的任务[126]。</p>
<h3><span id="d-video-streaming-and-analysis-视频流和分析">D. Video Streaming and Analysis 视频流和分析</span></h3><p>据观察，视频流量占当前网络中全部移动数据流量的一半以上，并且这一百分比仍在增加。<strong>*<u>边缘缓存</u>*</strong> 的采用避免了许多冗余视频流通过<u><strong>核心网络传输到Internet CDN</strong></u>。在网络边缘的功能更强大的云平台上而不是在产生视频的源上使用MEC服务器允许视频分析[126]，[127]。</p>
<h3><span id="f-connected-vehicles-互联车辆">F. Connected Vehicles 互联车辆</span></h3><p>边缘计算方法可以在互联车辆，V2X通信和汽车安全服务中发挥重要作用，例如高速公路上的积冰实时预警和协调的换道操作[36]。<u>运行在MEC服务器上的应用程序</u>紧邻车辆，并可以提供低延迟的路边功能[130]。由于<strong>边缘网络</strong>能够从<u>无处不在的传感器设备中收集和分析实时数据</u>，因此可以实现交通控制和智能停车[19]。</p>
<h3><span id="g-cognitive-assistance-认知援助">G. Cognitive Assistance 认知援助</span></h3><p>认知援助应用程序用于增强人类的感知和认知能力。[136]中的作者演示了cloudlet如何在该cloudlet中提供帮助只是一个<strong>无线跳远</strong>的云代理。</p>
<p>因此，它是认知辅助的理想选择。所有对<strong>延迟敏感的处理任务</strong>都被卸载到用户设备<strong>关联的cloudlet中</strong>。<strong>当用户从一个小云的附近移开时，将使用移交给附近的另一个小云。</strong></p>
<h3><span id="h-wireless-big-data-analysis-无线大数据分析">H. Wireless Big Data Analysis 无线大数据分析</span></h3><p>大数据通常从三个维度进行表征：<strong>容量，速度和多样性</strong>。[37]中的作者建议地理分布是表征大数据的第四维度。例如，大量传感器和执行器自然分布。</p>
<p>雾计算作为管理分布式网络，计算和存储资源的分布式智能平台，是处理这些大数据的有前途的选择。与在核心网络上执行的大数据分析相比，在网络边缘进行大数据分析将减少带宽消耗和网络延迟[19]。</p>
<h2><span id="key-enables">Key Enables</span></h2><p>在本节中，将介绍使移动边缘网络的概念成为现实的关键技术。这些技术为移动边缘网络提供了灵活性，可扩展性和运营效率。</p>
<h3><span id="a-cloud-technology-云技术">A. Cloud Technology 云技术</span></h3><p>移动边缘网络的概念是将云计算功能扩展到移动网络的边缘。云技术的进步使在诸如基站和网关之类的大容量通用服务器上部署虚拟机更加容易[19]。云可以提供强大的处理能力和大量资源。事实证明，云和物联网的集成有助于交付新服务[137]。移动边缘网络与云计算功能集成在一起，并为服务管理和提供提供有效的解决方案。</p>
<h3><span id="b-software-defined-network-软件定义的网络">B. Software Defined Network 软件定义的网络</span></h3><p>SDN技术使网络变得智能，可编程且更加开放[138]。SDN的主要思想是将<strong>控制平面和数据平面分开</strong>。SDN的优势包括在通用硬件上创建网络控制平面，通过API公开网络功能，远程控制网络设备以及将网络智能逻辑地分离到不同的基于软件的控制器中[138]。</p>
<p>SDN技术克服了大规模管理复杂性的缺点服务器和应用程序的部署[139]。</p>
<p>SDN规范的应用将使MEC平台所需的不同级别的管理成为可能[140]。</p>
<h3><span id="c-network-function-virtualization-网络功能虚拟化">C. Network Function Virtualization 网络功能虚拟化</span></h3><p>网络功能虚拟化（NFV）是为未来5G网络提出的SDN的一项补充技术。</p>
<p>NFV的目的是通过使用<strong>软件技术</strong>将<strong>一组网络功能从专用硬件移动到通用计算平台来虚拟化一组网络功能</strong>，<strong>从而可以提供与传统移动网络相同的服务。</strong>结果，管理大型异构设备的能力得到了提高。以及网络的可扩展性和灵活性[5]。</p>
<p>若使用NFV，网络运营商的资本支出（CAPEX）和运营支出（OPEX）都有可能减少。</p>
<p><strong>网络虚拟化导致虚拟网络嵌</strong>入（VNE）问题，目前正在研究VNE算法[141]。NFV的应用改变了电信行业的面貌，并带来了许多好处，例如缩短了上市时间，近乎实时地优化网络配置和拓扑以及支持多租户[142]。</p>
<h3><span id="d-smarter-mobile-devices-更智能的移动设备">D. Smarter Mobile Devices 更智能的移动设备</span></h3><p>在传统的蜂窝网络一代（2G，3G，4G）中，系统设计的方向是在网络基础架构方面进行完全控制。但是，随着移动设备变得越来越强大和智能，这种设计理念应该改变为在设备侧利用智能[35]。在未来的网络中，设备将以更智能的方式发挥更积极的作用。<strong><u>D2D通信是一项重要技术。</u></strong>在当前网络中，数据流量已成为语音的主要流量类型，已不再是语音。</p>
<p>在许多情况下，附近的设备想共享内容或彼此交互，例如游戏和社交网络。直接D2D通信可以从多个方面提高网络效率。首先，它节省了大量信令资源，减少了传输延迟；</p>
<p>其次，<strong>与借助基站进行传输相比，它可以节省大量能量</strong>。此外，由于到设备通信的路径损耗比BS低得多，因此可以<strong>提高频谱效率。</strong>预计D2D通信将在5G networking中获得本地支持。另一种有用的技术是本地缓存，旨在在数据存储和数据传输之间取得平衡。对于无线设备，信息的边际成本不可忽略。由于当今的移动设备中安装了越来越多的存储单元，因此在设备上缓存诸如视频或音频文件之类的流行内容显然比通过单播重复传输此类内容更便宜，而且效率更高，因为需求是异步的。</p>
<h2><span id="open-challenges-and-future-directions">Open Challenges and Future Directions</span></h2><p>移动边缘网络是一种在移动网络中的一种革命。<br>它具有许多新特性，使得现有的3g/4g蜂窝系统具有更好的性能和灵活性。<br>因此，本文对未来研究有着广泛的应用前景和机遇，本文指出了当前边缘网络面临的主要开放挑战，并揭示了可能的非边界方向。</p>
<h3><span id="a-open-research-challenges-开放研究挑战">A. Open Research Challenges 开放研究挑战</span></h3><p>下一代电力系统的严格要求，如超高吞吐量、极低的节能、高能效等，对学术界和工业界都面临着巨大挑战。<br>我们总结了与下面移动边缘网络相关的研究问题：</p>
<h4><span id="1-heterogeneity-异质性">1)  Heterogeneity 异质性</span></h4><p>在未来的网络中，随着物联网技术和物联网应用的发展，异构、通信、设备等异构性成为了一种新的技术。这种异质性导致其他相关问题，例如异步和非正交[34]。在统一的决策过程中，处理这种异质性的决策需要充分地研究。</p>
<h4><span id="2-computation-modeling-计算建模">2)  Computation Modeling 计算建模</span></h4><p>为了验证分析和仿真工作的准确性，计算资源的模型必须准确。目前的文献中,计算资源建模为CPU周期每秒的[66]。虽然该模型分析简单，但是否充分反映了计算的特点仍是一个问题。因此，需要建立更精确的计算模型。</p>
<h4><span id="3-enabling-realtime-analytics-启用实时分析">3)  Enabling Realtime Analytics 启用实时分析</span></h4><p>支持实时分析:很多新应用都需要实时分析，比如VR/AR和e-Health。动态资源管理应该确定将分析任务调度到保证延迟和吞吐量的最合适的边缘服务器[132]。</p>
<h4><span id="4-user-mobility-用户移动型">4)  User Mobility 用户移动型</span></h4><p>用户移动性是移动边缘网络的一个关键挑战。它对缓存和计算卸载决策有不可忽视的影响。用户的频繁移动性会导致边缘服务器之间的频繁切换，应该实现同时<strong>考虑水平和垂直移动性</strong>的移动性管理技术，允许用户无缝地访问边缘服务器[19]。</p>
<h4><span id="5-pricing-policy-定价策略">5)  Pricing Policy 定价策略</span></h4><p>在移动边缘网络中，存储、计算和通信资源是根据用户需求动态分配的。因此，最优定价策略不同于遗留系统。从商业的角度来看，系统中所有利益相关者的利益应该得到平衡。当用户非常关注价格时，边缘云的利润受到定价策略的显著影响[143]。文献[144]从博弈论的角度阐明了视频缓存系统的定价和资源分配问题。</p>
<h4><span id="6scalability-可扩展性">6）scalability 可扩展性</span></h4><p>可伸缩性是与遗留系统相比，mo网络提供的一个重要特性，如物联网，越来越多的移动设备需要通过应用负载平衡机制[19]来扩展服务。一个灵活的边缘节点可以提供网络可扩展性[145]的云子空间。</p>
<h4><span id="7-security-安全">7） Security 安全</span></h4><p>边缘云服务器的部署由于对移动设备信息的利用而带来了新的安全挑战[146]。安全解决方案的发展速度无法跟上新的安全挑战的步伐。</p>
<p>许多现有的安全协议都使用全连接[147]，这在移动电子商务网络中并不现实，<strong>因为许多链路在违约</strong>。阿德芬斯这项技术是在[146]中针对恶意节点移动边缘计算平台HoneyBot提出的。</p>
<p><strong>Honeybot节点可以检测、跟踪和隔离D2D内部攻击。</strong>这种技术的速度和精度受到Honeybot的位置和数量的影响节点云计算的安全解决方案可能不适合,对于边缘计算，因为边缘设备的工作环境将面临许多不同于管理良好的云的新威胁[148]。</p>
<p><strong>网关和智能电表不同级别的认证是另一个重要的安全问题。</strong>针对身份认证问题，已经提出了一些解决方案，如基于公钥基础设施（PKI）的解决方案[149]、基于Diffie-Hellman密钥交换的解决方案[150]，光纤陀螺计算也需要入侵检测技术。针对不同的ent应用，已经提出了一些检测方法[148]。</p>
<p>例如，基于签名的方法<strong>观察行为模式，并根据数据库检查可能的错误行为。</strong></p>
<p>基于异常的入侵检测方法通过<strong>比较观察到的行为和预期的行为来检查偏差。</strong></p>
<h4><span id="8privacy">8）Privacy</span></h4><p>隐私问题处理隐藏细节。<br>用户间的共享和计算合作，使得用户之间的隐私受到了关注。<br>如何利用移动设备的资源，而无需使用隐私仍然是一个挑战。<br>在典型的用例中，智能网格、智能电表数据的加密以及聚集结果在雾中的数据隐私。<br>原始数据只能在操作中心上运行[151]。<br>此外，还开发了许多数据管理器，用于mcc在协作移动设备之间执行privacypolicies和对一组客户端的重新配置[24]。</p>
<p>这些机制使得移动边缘网络中协作式网络中心的隐私机制设计成为现实。<br>大多数的私有现存解决方案只需要<strong>一个可信平台模块(Tpm)，它可以部署在边缘数据中，</strong>比如个人网络、用户、用户和边缘数据中心之间的关系。因此，隐私助手实体可以在边缘数据中心中进行操作[24]。<br>在这些多用户添加中可以实现各种数据的交换和服务，边缘范式有助于增强某些服务的非用户特性。<br>例如，基于位置服务的用户可以被保护，从而可以在可信边缘服务器[152]中保护一个用户访问平台。</p>
<h4><span id="9user-participation">9）User Participation</span></h4><p>用户参与：<strong>移动边缘网工程中的一个主要思想，就是给用户提供利用用户终端的有效资源的机会。</strong><br>使用工具可以通过工具包来增强用户的能力，用户在技术设计[137]中发挥了积极作用。用户之间的合作依赖于用户参与。<br>设计计算卸载策略时，需要考虑用户激励机制[64]。</p>
<hr>
<h3><span id="b-discussions-on-future-directions">B. Discussions on Future Directions</span></h3><h4><span id="1-utilization-of-wireless-big-data-无线大数据的利用">1) Utilization of Wireless Big Data 无线大数据的利用</span></h4><p>移动边缘网络中产生的无线网络是对网络进行分析和设计的一个重要组成部分。<br>Context aware方法还需要对大量的信息数据进行分析。<br>例如，用户信息big data可以用于边缘caching systems[153]中的卸载估计。<br>因此，无线大用户的充分利用为电子邮件的性能提供了新的机会。</p>
<h4><span id="2-online-caching-在线缓存">2) Online Caching 在线缓存</span></h4><p>缓存问题包括：缓存放置和内容传递。<br>在放置阶段中，缓存更新已经完成了许多操作。<br>然而，在交付阶段，即在线缓存时，更高效的缓存更新规则是未来的研究方向[154]。</p>
<h4><span id="3-context-awareness上下文感知">3) Context Awareness上下文感知</span></h4><p>移动边缘网络是利用上下文信息进行开发的工具。<br>诸如用户位置、其他用户、环境中的资源以及环境中的资源等非用户信息[155]。<br>实时上下文感知应用程序可以在MEC平台[50]中实现。<br>不同的上下文信息(应用程序、网络和设备级别)可以用来主动地分配资源[156]。</p>
<h4><span id="4smart-user-association-智能用户协会">4）Smart User Association 智能用户协会</span></h4><p>在缓存启用超缓存中，缓存可能改变用户关联的方式，即传统的最近距离或基于SINR的方法[157]。<br>用户可能与bs关联，它缓存了它所要求的缓存。<br>这样，最近的bs可能会对用户进行干扰。<br>缓存感知用户associationmay克服了回程容量限制和enhanceusers‘QoE[158]。<br>可以有多个用户，用户将选择最佳访问模式(159)</p>
<h4><span id="5-integration-集成">5) Integration 集成</span></h4><p>各种资源中移动边缘的networks 体系结构：计算、存储和集成。<br>这些资源的高效集成将使所有用户和用户都能获得最佳性能，并没有得出结论。<br>需要进一步开发更全面的资源管理。<br>网络演进与本课题的研究</p>
<h2><span id="conclusion">Conclusion</span></h2><p>​    本文概述并总结了在移动边缘网络上的研究成果，移动边缘网络是计算，缓存和通信资源的范式集成。提出了用于边缘计算和缓存的拟议架构，包括ETSI MEC，雾计算，Cloudlet和边缘缓存。</p>
<p>​    分别讨论了计算，缓存和通信的相关问题。对于边缘计算计算，对所提出的计算卸载进行了广泛的调查和分类。提出了边缘与核心之间的合作问题以及一些现有的边缘计算平台。</p>
<p>​    对于边缘缓存，我们对缓存的位置，内容和方式进行了详细的分类。然后讨论了通信技术的进步以及与计算和缓存的协同作用。</p>
<p>​    新颖的应用和用例是移动边缘网络架构的驱动力。我们总结了这些应用程序，并使用了移动边缘网络可以启用的情况。这种新的范式面临许多挑战和机遇。指出了这一热点话题的未来研究方向。</p>
<hr>
<p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883826" target="_blank" rel="noopener"> 论文地址 </a></p>
]]></content>
      <categories>
        <category>边缘计算</category>
      </categories>
      <tags>
        <tag>Survey</tag>
      </tags>
  </entry>
  <entry>
    <title>Mobile edge computing—A key technology towards 5G 白皮书阅读</title>
    <url>/2020/10/23/Mobile%20edge%20computing%E2%80%94A%20key%20technology%20towards%205G/</url>
    <content><![CDATA[<p><a href="https://infotech.report/Resources/Whitepapers/f205849d-0109-4de3-8c47-be52f4e4fb27_etsi_wp11_mec_a_key_technology_towards_5g.pdf" target="_blank" rel="noopener">survey 地址</a></p>
<h2><span id="introduction">Introduction</span></h2><p>本白皮书旨在介绍移动边缘计算的概念和相关的主要市场驱动因素，并讨论移动边缘计算的业务和技术优势。文中给出了一些可以从该技术中获益的服务场景示例和可能的部署场景。白皮书解释了什么是标准化的以及如何标准化,通过使用标准化的API，移动边缘计算技术朝着5G的创新方向发展。它概述了MEC行业规范小组正在制定的规范。</p>
<a id="more"></a>



<h2><span id="目录">目录</span></h2><!-- toc -->

<ul>
<li><a href="#intelligent-video-acceleration">Intelligent Video Acceleration</a></li>
<li><a href="#connected-cars">Connected Cars</a></li>
<li><a href="#internet-of-the-thing-gatewayiot">Internet of the thing Gateway（IoT）</a></li>
<li><a href="#deployment-scenarios-部署方案">Deployment scenarios 部署方案</a></li>
<li><a href="#etsi-industry-specification-groupon-mobile-edge-computing-行业规范">ETSI Industry Specification Groupon Mobile Edge Computing 行业规范</a></li>
<li><a href="#proofs-of-concept-概念证明">Proofs of Concept 概念证明</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<!-- tocstop -->

<p>ETSI ISG MEC鼓励概念验证（PoC）来证明MEC实现的可行性。PoCs 将帮助建立对该技术的认识和信心，并开发一个多样化的开放式MEC生态系统。本白皮书描述了MEC PoC框架和积极参与的要求。</p>
<p>运营商可以在价值链中重新定位自己，并重新定义个性化服务。他们可以利用自己的网络，并将其开放给授权的第三方（以安全的方式），向顶级（OTT）玩家和应用程序开发人员提供灵活、灵活和快速地向移动用户、企业和垂直部门部署创新应用程序和服务的能力。运营商将能够创造新的收入来源，通过开发提供增值的新型应用程序取悦客户，并开拓新的市场机会。此外，支持网络和服务参数更紧密集成的应用程序将提高服务体验和网络资源的利用率</p>
<hr>
<h2><span id="intelligent-video-acceleration">Intelligent Video Acceleration</span></h2><p>通过智能视频加速可以提高终端用户的体验质量（QoE）和无线网络资源的利用率。互联网媒体和<strong>文件传输目前通常通过TCP协议使用超文本传输协议（HTTP）</strong>进行流式传输或下载。可用容量可以在几秒钟内发生一个<strong>数量级的变化</strong>（由于无线信道条件的变化，设备进入/离开网络）。<u><strong>TCP可能无法快速适应无线接入网（RAN）中快速变化的条件</strong></u>。这可能导致宝贵的无线电资源利用不足，并导致次优用户体验。</p>
<p>图4显示了一个智能视频加速服务场景的示例，它试图克服上述挑战。在这种情况下，驻留在MEC服务器中的无线电分析应用程序向视频服务器提供关于在无线电下行链路接口处估计可用的吞吐量的指示。该信息可用于协助TCP拥塞控制决策（例如，选择初始窗口大小、在拥塞避免阶段设置拥塞窗口的值、以及在“无线链路”上的条件恶化时调整拥塞窗口的大小）。该信息还可用于确保应用级编码与无线电下行链路处的估计容量相匹配。</p>
<p>视频服务器可以使用该信息来帮助TCP拥塞控制决策（例如，通过确保应用级编码与无线电下行链路处的估计容量相匹配）。内容的启动时间和视频暂停次数都可以减少，从而提高视频质量和吞吐量。</p>
<hr>
<p>  在理论中，拥塞控制有两种实现方式：</p>
<ul>
<li><strong>端到端拥塞控制</strong>：在这种拥塞控制方法中，由发送数据的端系统自己来判断是否拥塞，然后调整传输速率。比如说发送的数据已经超时却还没有接收到确认报文，数据往返时延过高，接收到对同一个数据段的重复确认……都可以认为是网络拥塞的现象；若发送端检测到这种现象，就应该降低发送数据的速率，若没有，则可以慢慢提高速率；</li>
<li><strong>网络辅助的拥塞控制</strong>：由网络中的路由器来告诉发送方，网络的拥塞情况。一般有两种方式：（1）路由器直接向发送端发送报文，告知网络拥塞情况；（2）路由器更改数据段中的某个标志，来提示网络中的拥塞情况，然后数据将这个标志携带到目的主机，再由目的主机根据这个标志，向发送端发送报文，告知拥塞情况（被包含在确认报文中）。</li>
</ul>
<hr>
<h2><span id="connected-cars">Connected Cars</span></h2><p>联网车辆的数量正在迅速增长，并将在未来几年继续增长。车辆和路侧传感器与路边装置的通信旨在通过交换关键安全和,面向5G操作数据的移动边缘计算akey技术。该通信还可用于提供增值服务，如寻车器、停车位置和支持娱乐服务</p>
<p>LTE可以显著加快连接车辆通信的部署。LTE蜂窝可以提供“超视距”的可视性，即在300-500米的车辆之间的直接通信范围之外。它还可以满足连接车辆通信的严格延迟要求，在某些情况下低于100毫秒。消息可以通过LTE实时分发，无需建立全国范围的数字短程通信（DSRC）网络。汽车可以利用其日益内置的LTE连接；在DSRC存在的部署中，LTE将能够对其进行补充</p>
<hr>
<p>其他理解：</p>
<p><a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2019&amp;filename=DNZS201928116&amp;v=vQlR5l2T%25mmd2BFMHdcSHFpHRGjmH6Bojane8hRyUrOR3m%25mmd2F8vuDXGo1e31MIS1HLIRhmb" target="_blank" rel="noopener">https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2019&amp;filename=DNZS201928116&amp;v=vQlR5l2T%25mmd2BFMHdcSHFpHRGjmH6Bojane8hRyUrOR3m%25mmd2F8vuDXGo1e31MIS1HLIRhmb</a></p>
<hr>
<h2><span id="internet-of-the-thing-gatewayiot">Internet of the thing Gateway（IoT）</span></h2><p>在电信网络上生成其他消息，并且需要网关来聚合消息并确保低延迟和安全性。由于某些连接的设备的性质，需要实时能力，并且需要一组传感器和设备才能提供高效服务。</p>
<p>IoT设备通常在处理器和内存容量方面受到资源限制。需要汇总通过靠近设备的移动网络连接的各种IoT设备消息。这也提供了分析处理能力和低延迟响应时间。</p>
<p>各种设备通过不同的连接形式进行连接，例如3G，LTE，Wi-Fi或其他无线电技术。通常，消息很小，经过加密，并且采用不同形式的协议。需要一个低延迟的聚合点来管理各种协议，消息分发和分析处理。MEC服务器提供了解决这些挑战的能力。</p>
<p>移动边缘计算可用于远程连接和控制设备，分析并提供实时配置和分析。MEC支持将IoT服务聚合和分发到高度分布式的移动基站环境中，并使应用程序能够实时响应。这样可以减少数据的往返时间，并可以从核心网络和云中的应用程序中进行抽象。IoT应用程序可以在LTE基站站点上部署的MEC服务器上运行，以提供此功能。</p>
<hr>
<h2><span id="deployment-scenarios-部署方案">Deployment scenarios 部署方案</span></h2><p>移动边缘计算服务器可以部署在多个位置。</p>
<p>例如LTE宏基站（eNodeB）站点， LTE macro base station</p>
<p>3G无线电网络控制器（RNC）站点， 3G radio network controller</p>
<p>多无线电接入技术（RAT）cell聚合站点，multi-radio access technology</p>
<p>以及在聚合点（也可能在核心网络的边缘）。 Aggregation site</p>
<p>Multi-RAT cell聚合站点可以位于企业内部（例如医院，大型公司总部）的室内，也可以位于特殊公共覆盖场景（例如体育场，购物中心）的室内/室外，以控制提供多个本地多RAT接入点房屋的无线电覆盖范围。通过此部署选项，可以从基站群集直接交付与本地相关的快速服务。部署MEC平台的位置可能取决于多种因素，包括可伸缩性，物理部署限制，性能标准（例如延迟）以及将公开哪些网络信息。请注意，某些MEC服务在某些部署选项中可能不可用/不适用。</p>
<p>在特定MEC平台上部署MEC应用程序可能取决于特定MEC服务的可用性以及其他参数，例如等待时间要求，所需资源，特定VNF的可用性，可伸缩性，成本等。</p>
<p>MEC将利用NFV基础设施。NFV平台可以专用于MEC或与其他网络功能或应用程序共享。MEC还将（尽可能）使用NFV管理和编排实体和接口。</p>
<hr>
<h2><span id="etsi-industry-specification-groupon-mobile-edge-computing-行业规范">ETSI Industry Specification Groupon Mobile Edge Computing 行业规范</span></h2><p>移动边缘计算（MEC）上的ETSI行业规范组（ISG）产生了规范的组规范，该规范将使能够在多供应商MEC环境中托管第三方应用程序。该小组于2014年12月成立，计划在2年内交付第一套规范。它规定了要求和参考体系结构，包括构成MEC解决方案关键要素的组件和功能元素。</p>
<p>当第一个文档达到要求的成熟度时，将开始进行平台服务，API和接口的工作。MEC平台API将与应用程序无关，并且将在保证SLA的情况下在每台移动边缘服务器上顺利移植增值应用程序（请参见图7）</p>
<p><img src="/images/static/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/survey/survey1.png" alt="survey1"></p>
<p>除了技术工作外，在ISG MEC下还成立了一个行业支持工作组（IEG WG），其任务是推动行业中的Mobile Edge Computing并加速其发展。这将有助于为价值链中的所有参与者建立有利于可持续业务的有利市场条件。</p>
<p>The IEG group is developingtwo Group Specifications: </p>
<p>1.ETSI GS MEC-IEG 005 [2] Proof of ConceptFramework, specifyingthe process and criteria that a Proof of Concept demonstration must adhere to.This specification has already been published;</p>
<p><u>概念框架证明，规定了概念证明演示必须遵守的过程和标准。此规范已经发布</u></p>
<p>2.ETSI GS MEC-IEG 004 Service Scenarios, which presentsa number of examples of service scenarios, business and consumer benefits which can be enabled by Mobile Edge Computing</p>
<p><u>其中提供了可通过移动边缘计算实现的许多服务方案，业务和消费者利益的示例</u></p>
<p>ETSI ISG向ETSI的成员和非成员开放，以参与并为这项创新技术做出贡献。邀请行业参与者积极参与移动边缘计算并为之做出贡献，并参加PoC活动。</p>
<hr>
<h2><span id="proofs-of-concept-概念证明">Proofs of Concept 概念证明</span></h2><p>为了确保移动边缘计算的成功和广泛部署，不仅要有及时且高质量的规范，还有必要。至关重要的是验证正在制定的规范，并证明已满足用例。此外，必须证明MEC概念对于价值链中的所有主要利益相关者都是可行且有价值的，以便吸引尽可能广泛的受众。</p>
<p>MEC概念验证的公开演示有助于建立对该技术的商业意识和信心，并有助于建立多样化，开放的MEC生态系统。</p>
<p><strong>为了展示移动边缘计算的概念，ISG MEC开发了一种概念证明过程，在GS MEC-IEG005 [2]中进行了指定</strong></p>
<p><strong>PoC提议可以由PoC团队提交，该团队由<u>至少一个移动网络运营商</u>，<u>至少一个基础设施供应商</u>和<u>至少一个内容或应用程序提供商</u>组成。</strong></p>
<p><strong>GS MEC-IEG 005 [2]指定了概念验证演示必须遵循的过程和标准，才能被接受为MEC PoC。已经建立了一个Wiki网站 <a href="http://mecwiki.etsi.org" target="_blank" rel="noopener">http://mecwiki.etsi.org</a></strong></p>
<p><strong>来协助PoC团队。该站点托管PoC项目建议模板和PoC主题列表，这些是需要PoC输入或反馈的特定区域。一个PoC项目可以解决一个或几个PoC主题。</strong></p>
<hr>
<h2><span id="conclusion">Conclusion</span></h2><p>移动边缘计算支持创新的服务方案，可以确保增强的个人体验和优化的网络运营，以及开拓新的商机。本白皮书中描述了一些示例，以演示应用程序如何利用用户和对象的接近性以及网络和上下文信息来创造价值。移动边缘计算吸引了一个新的价值链和能源系统，所有参与者都可以从更紧密的协作中受益。移动运营商可以在新价值链中扮演关键角色，并吸引OTT服务提供商，开发人员和Internet参与者在新的尖端技术上进行创新，同时使上下文感知应用程序可以在移动订户附近运行。移动订户可以享受根据其需求和喜好量身定制的独特，真正可喜的个性化移动宽带体验。</p>
<p>MEC基于虚拟化平台，是对NFV的补充，并与新兴的分布式云方法完全吻合。它被公认为是未来5G时代的关键技术，可以满足对超低延迟和刺激创新的苛刻要求。</p>
<p>MEC技术由ETSI ISG MEC定义，该技术于2014年12月推出，旨在在2年内开发出第一套规范。可交付成果将包括服务方案，需求，体系结构和API规范，并辅以PoC框架规范和白皮书，旨在加速MEC技术在市场上的采用。</p>
<p>MEC支持不同的部署选项，因为根据技术和业务要求，MEC服务器可以位于无线接入网中的不同位置。</p>
<p>已经建立了MEC概念验证（PoC）程序来证明MEC实施的可行性。MEC PoC获得的结果和经验教训将反馈给ISG MEC规范活动</p>
<p>MEC ISG正在开发基础，以实现开放的无线电接入网络，该网络可以在网络边缘托管第三方创新应用程序和内容。ISG向ETSI的成员和非成员开放，以参与这项创新技术并为此做出贡献，并参加PoC活动。</p>
]]></content>
      <categories>
        <category>边缘计算</category>
      </categories>
      <tags>
        <tag>Survey</tag>
      </tags>
  </entry>
  <entry>
    <title>移动边缘计算</title>
    <url>/2020/10/19/%E7%A7%BB%E5%8A%A8%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1><span id="移动边缘计算-moblie-edge-computing">移动边缘计算 Moblie Edge Computing</span></h1><p>北京邮电大学出版社</p>
<p>王尚广，周傲，魏晓娟，柳玉炯   编著</p>
<h2><span id="前言">前言</span></h2><p>终端设备访问云计算数据中心为用户提供服务——增加了<u>网络负荷和数据传输时延</u>。</p>
<p>移动边缘计算——利用无线接入网络<u>就近</u>提供移动用户IT所需要的<u>服务和计算功能</u>，创造一个<u>高性能</u>，<u>低延迟</u>与<u>高带宽</u>的服务环境。</p>
<a id="more"></a>

<h2><span id="目录">目录</span></h2><!-- toc -->

<ul>
<li><a href="#第1章-基本概述">第1章 基本概述</a><ul>
<li><a href="#11-移动边缘计算的由来">1.1 移动边缘计算的由来</a><ul>
<li><a href="#提出的原因">提出的原因：</a></li>
<li><a href="#边缘计算架构">边缘计算架构：</a></li>
<li><a href="#移动边缘计算的特点">移动边缘计算的特点：</a></li>
</ul>
</li>
<li><a href="#12-相似解决方案">1.2 相似解决方案</a><ul>
<li><a href="#相似解决方案">相似解决方案：</a><ul>
<li><a href="#121-移动云计算">1.2.1. 移动云计算</a></li>
<li><a href="#122-雾计算">1.2.2. 雾计算</a></li>
<li><a href="#123-微云">1.2.3. 微云</a></li>
<li><a href="#124-移动边缘计算">1.2.4. 移动边缘计算</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#13-移动边缘计算与5g">1.3 移动边缘计算与5G</a></li>
<li><a href="#14-研究问题划分">1.4 研究问题划分</a><ul>
<li><a href="#141-特征-characteristics">1.4.1 特征 Characteristics</a></li>
<li><a href="#142-参与者-actors">1.4.2 参与者 Actors</a></li>
<li><a href="#143-接入技术-access-technologies">1.4.3 接入技术 Access Technologies</a></li>
<li><a href="#144-应用-application">1.4.4 应用 Application</a></li>
<li><a href="#145-目标-objectives">1.4.5 目标 Objectives</a></li>
<li><a href="#146-计算平台-computational-platforms">1.4.6 计算平台 Computational Platforms</a></li>
<li><a href="#147-关键使能技术-key-enablers">1.4.7 关键使能技术 Key Enablers</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#第2章-关键技术">第2章 关键技术</a><ul>
<li><a href="#21-边缘云放置技术">2.1 边缘云放置技术</a><ul>
<li><a href="#211-国外研究进展">2.1.1 国外研究进展</a><ul>
<li><a href="#澳洲国立xu等人有容量限制边缘云放置问题">澳洲国立Xu等人：有容量限制边缘云放置问题</a></li>
<li><a href="#澳洲国立-jia-提出了基于密度的边缘云放置算法">澳洲国立 Jia 提出了基于密度的边缘云放置算法。</a></li>
</ul>
</li>
<li><a href="#212-国内研究进展">2.1.2 国内研究进展</a><ul>
<li><a href="#南京大学-xiang-基于移动用用地理位置信息的自适应移动边缘云的放置方法">南京大学 Xiang <strong>基于移动用用地理位置信息的自适应移动边缘云的放置方法。</strong></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#22-计算卸载技术">2.2 计算卸载技术</a><ul>
<li><a href="#221-国外研究进展">2.2.1 国外研究进展</a><ul>
<li><a href="#eduardo-杜克-2010-maui-最早的计算卸载实现模型">Eduardo 杜克 2010 MAUI ,最早的计算卸载实现模型。</a></li>
<li><a href="#intel-byung-gon-clonecloud计算卸载模型">Intel Byung-Gon CloneCloud计算卸载模型。</a></li>
<li><a href="#karim-佐治亚理工-cosmos以风险控制方式进行卸载决策">Karim 佐治亚理工  COSMOS以风险控制方式进行卸载决策。</a></li>
<li><a href="#根特大学的tim等人在增强现实用物计把cloudlet当作云端实现计算卸载">根特大学的Tim等人”在增强现实用物计把Cloudlet当作云端实现计算卸载。</a></li>
<li><a href="#mahadev-cmu-在2009年提出cloudlet扩展移动设备的能力">Mahadev CMU 在2009年提出Cloudlet扩展移动设备的能力。</a></li>
<li><a href="#karim-佐治亚理工-提出协调同域移动设备提供云服务-femtoclouds-提供了动态的配置的多设备的自发性服务云">Karim 佐治亚理工  提出协调同域移动设备提供云服务。FemtoClouds 提供了动态的，配置的，多设备的自发性服务云。</a></li>
<li><a href="#cloudlet">* Cloudlet</a></li>
<li><a href="#里昂大学的golchayi提出了自发临近云spc通过附近的一组移部身动设备以协作的方式执行任务卸载">里昂大学的GolchayI提出了自发临近云SPC:通过附近的一组移部身动设备以协作的方式执行任务卸载。</a></li>
</ul>
</li>
<li><a href="#222-国内研究进展">2.2.2 国内研究进展</a></li>
</ul>
</li>
<li><a href="#23-服务迁移技术">2.3 服务迁移技术</a><ul>
<li><a href="#231-欧洲研究进展">2.3.1 欧洲研究进展</a><ul>
<li><a href="#u基于决策过程的服务迁移-u"><u>基于决策过程的服务迁移。</u></a></li>
</ul>
</li>
<li><a href="#232-美洲研究进展">2.3.2 美洲研究进展</a><ul>
<li><a href="#u基于虚拟机切换的服务迁移-u"><u>基于虚拟机切换的服务迁移。</u></a></li>
<li><a href="#satyanarayanan-cmu-虚拟机切换概念">Satyanarayanan CMU  虚拟机切换概念</a></li>
<li><a href="#ibm华生实验室的wang等人">IBM华生实验室的Wang等人</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#24-群智协同技术">2.4 群智协同技术</a></li>
</ul>
</li>
<li><a href="#第3章-典型应用场景">第3章 典型应用场景</a><ul>
<li><a href="#31-车联网">3.1 车联网</a></li>
<li><a href="#32-ar-增强现实">3.2 AR 增强现实</a></li>
<li><a href="#33-医疗服务">3.3 医疗服务</a></li>
<li><a href="#34公共安全">3.4公共安全</a></li>
</ul>
</li>
<li><a href="#第4章-工具与实验平台">第4章 工具与实验平台</a><ul>
<li><a href="#41-ifogsim">4.1 iFogSim</a></li>
<li><a href="#42-jade">4.2 JADE</a></li>
<li><a href="#43-oai">4.3 OAI</a></li>
<li><a href="#44-openstack">4.4 OpenStack</a></li>
<li><a href="#45-docker">4.5 Docker</a></li>
<li><a href="#46-openlte">4.6 OpenLTE</a></li>
</ul>
</li>
<li><a href="#第5章-挑战">第5章 挑战</a><ul>
<li><a href="#51-系统架构">5.1 系统架构</a></li>
<li><a href="#52-服务与应用">5.2 服务与应用</a></li>
<li><a href="#53-安全与隐私">5.3 安全与隐私</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<h2><span id="第1章-基本概述">第1章 基本概述</span></h2><h3><span id="11-移动边缘计算的由来">1.1 移动边缘计算的由来</span></h3><h4><span id="提出的原因">提出的原因：</span></h4><ol>
<li><p>所有的业务部署到云计算中心，造成<u>网络负荷</u>和较<u>长的网络延时</u>，使网络的<u>带宽</u>和<u>时延</u>等性能要求更高。</p>
</li>
<li><p><u>移动终端</u>计算、存储及功耗十分有限，需要<u>将高复杂度，高能耗的计算任务</u>迁移至<u>云计算中心</u>的服务器端去完成，<u>降低移动终端的能耗</u>。但数据的传输计算任务的迁移增加网络负荷，增加传输时延。</p>
</li>
</ol>
<p>根据ETSI的定义，<strong><u>移动边缘计算</u></strong>即在距离用户移动终端<strong><u>最近的无线接入网</u></strong>内提供<u>信息技术服务环境和云计算能力</u>，旨在进一步减小延迟/时延、提高网络运营效率、提高业务分发/传送能力、优化/改善终端用户体验。<strong>移动边缘计算</strong>可以被视为运行于<strong>移动网络边缘的云服务器</strong>，用以执行传统网络基础设施不能实现的特定任务。移动边缘计算是<strong><u>信息技术</u></strong>和<strong><u>通信网络</u></strong>融合的产物。</p>
<img src="/images/static/边缘计算/book_pictures/a-1.1.jpg" alt="a-1.1" style="zoom:50%;">



<h4><span id="边缘计算架构">边缘计算架构：</span></h4><p>移动边缘计算包括3个部分： <strong>边缘设备，边缘云和远端云</strong>（大规模云计算中心、大云）。</p>
<p><strong>边缘设备</strong>：可连接到网络。</p>
<p><strong>边缘云</strong>：部署在移动基站上的小规模云计算中心。功能：流量控制（转发和过滤）管控移动边缘服务和应用。 </p>
<p><u>边缘设备处理能力不足，可通过无线网络将计算密集型和海量数据迁移到边缘云进行处理。边缘云处不能满足边缘设备请求，可通过无线网络将部分任务迁移到远端云进行处理。</u></p>
<h4><span id="移动边缘计算的特点">移动边缘计算的特点：</span></h4><p>隔离性：本地的，与<u>网络其他部分隔离运行</u>，机器通信安全性高。</p>
<p>临近性：<u>靠近信息源</u>（移动终端），可直接访问设备，利于捕捉分析大数据信息。</p>
<p>低时延性：边缘服务在靠近终端的<u>边缘服务器</u>上运行，时延降低，用户体验性好，<u>减少网络拥塞。</u></p>
<p>位置感知性：WIFI或蜂窝网络，都可使用低等级指令<u>确定连接设备位置。</u></p>
<p>网络上下文感知性：感知<u>实时网络数据</u>，统计分析用户消费行为和移动宽带使用量。</p>
<h3><span id="12-相似解决方案">1.2 相似解决方案</span></h3><p>移动互联网与物联网应用发展了多个相似的解决方案： 移动边缘计算(MEC)，移动云计算（mobile cloud computing MCC），雾计算（fog computing），微云（cloudlet）。</p>
<p>移动边缘计算(MEC)：边缘服务器和蜂窝基站能协同工作。边缘服务器可单独运行，也可以与远端云数据中心协同运行。</p>
<h4><span id="相似解决方案">相似解决方案：</span></h4><img src=" /images/static/边缘计算/book_pictures/a-1.2.jpg" alt="a-1.2" style="zoom:50%;">



<h5><span id="121-移动云计算">1.2.1. 移动云计算</span></h5><p>​    是指通过移动网络以按需、易扩展的方式获得所需的基础设施、平台、软件(或应用)等的一种信息技术资源或(信息)服务的交付与使用模式。移动终端设备与传统的桌面计算机相比，用户更倾向于在移动终端上运行应用程序。然而受许多限制，需要将计算密集型的应用程序迁移至移动终端外执行。云计算中心提供必要的计算资源。</p>
<h5><span id="122-雾计算">1.2.2. 雾计算</span></h5><p>​    低延时、位置感知、广泛的地理分布、适应移动性的应用，支持更多的边缘节点。这些特征使得移动业务部署更加方便，满足更广泛的节点接入。</p>
<p>​    雾计算是云计算模型从核心网到边缘网的一个扩展，高度虚拟化，位于终端设备和云服务器之间。存在大量异构的物理广泛分布的去中心化的设备协作，无需第三方即可完成计算处理存储任务。</p>
<p>​    组件（路由器，网关，机顶盒，代理服务器）可创建分布于不同地方的云服务。与云计算相比，雾计算所采用的架构更呈分布式，更接近网络边缘。</p>
<p>​    雾计算将数据、数据处理和应用程序集中在网络边缘的设备中，而不像云计算那样将它们几乎全部保存在云中。数据的存储及处理更依赖本地设备，而非服务器。所以，云计算是新一代的集中式计算，而雾计算是新一代的分布式计算，符合互联网的“去中心化”特征。</p>
<h5><span id="123-微云">1.2.3. 微云</span></h5><p>​    Cloudlet小型的云数据中心，位于网络边缘，主要目的：为移动设备提供强大的计算资源和较低的通信时延支持计算密集型和交互型强的移动应用。</p>
<p>​    微云分三层架构： 移动设备，cloudlet服务器和云计算中心，将云服务“搬近”用户。</p>
<h5><span id="124-移动边缘计算">1.2.4. 移动边缘计算</span></h5><p>​    移动边缘计算主要是让边缘服务器和蜂窝基站相结合，可与远程云数据中心连接或断开。</p>
<p>​    支持网络中2级3级分层应用部署。</p>
<p>​    旨在灵活的访问无线电网络信息，进行内容发布和部署。</p>
<h3><span id="13-移动边缘计算与5g">1.3 移动边缘计算与5G</span></h3><h3><span id="14-研究问题划分">1.4 研究问题划分</span></h3><img src="/images/static/边缘计算/book_pictures/a-1.4.jpg" alt="a-1.4" style="zoom:67%;">

<h5><span id="141-特征-characteristics">1.4.1 特征 Characteristics</span></h5><p>紧临性、部署密集型：低时延、位置感知性、网络上下文感知性</p>
<h5><span id="142-参与者-actors">1.4.2 参与者 Actors</span></h5><p>应用开发商，内容提供商，移动用户，移动边缘服务提供商，软件供应商和 OTT(over the top)玩家。</p>
<p>（OTT:广泛地用在通信领域，指的是谷歌、苹果、Skype、Netlix等利用其他运营商的宽带网发展自己的业务，以前的Skype和QQ 、现在的Netfix网络视频以及各种移动应用商店里的应用都是OTT。不少OTT服务商直接面向用户提供服务和计费，使运营商沦为单纯的“传输管道”，根本无法触及管道中传输的巨大价值。）</p>
<h5><span id="143-接入技术-access-technologies">1.4.3 接入技术 Access Technologies</span></h5><p>移动把边缘计算环境中，移动设备通过<strong><u>蜂窝网络</u></strong>（GPRS CDMA 3、4、5G/Wi-MAX）<u><strong>Wi-Fi接入点</strong></u>等无线通信与其他设备或边缘网进行通信。</p>
<p>由于<u>网络部署密集</u> ，用户可以通过切换<u>任何可用的接入网络</u>连接到<u>边缘网络。</u></p>
<h5><span id="144-应用-application">1.4.4 应用 Application</span></h5><ul>
<li><u>计算卸载 computation offloading</u></li>
</ul>
<p>移动设备<u>资源受限</u>，计算密集型应用程序不在移动主机上<u>部分计算被迁移至云数据中心</u>，成功执行任务后<u>返回结果</u>。</p>
<p>边缘设备到核心云通信时延长，在<u>移动边缘计算中有限的服务器被部署到网络边缘</u>。计算密集型任务被迁移。</p>
<ul>
<li><u>协同计算 collaborative computing</u></li>
</ul>
<p>协同计算使<u>多人</u>和<u>组织</u>在<u>分布式系统</u>中互相协作。</p>
<p><u>设备位置</u>和<u>通信时延</u>十分重要。</p>
<p>AR：在边缘网络提供了强大的<u>实时上下文感知</u>协作系统。</p>
<ul>
<li><u>内存复制 memory replication</u></li>
</ul>
<p>LTE——设备主要连接技术，物联网设备计算和存储能力较差，设备从周围收集数据，并将数据迁移至云基础设施做进一步的计算。边缘网络为每个设备承载了多个克隆云，把计算能力带到物联网设备附近，减少网络时延。</p>
<ul>
<li><u>内容分发 content delivery</u></li>
</ul>
<p>内容分发技术可以实现<u>优化web服务器和web内容</u>，从而提高可用性，高性能，低时延的服务。</p>
<p>移动边缘计算可以基于<u>网络状态</u>和<u>可用的网络负载</u> <strong><u>动态优化</u></strong>web内容，使用户移动性和服务体验来优化内容。</p>
<h5><span id="145-目标-objectives">1.4.5 目标 Objectives</span></h5><p>移动节点：最优化移动设备的通信时延和能耗。</p>
<p>网络供应商：最小化基础设施成本，提高吞吐量。</p>
<p>其它：获取网络上下文信息，进行内容发布。</p>
<h5><span id="146-计算平台-computational-platforms">1.4.6 计算平台 Computational Platforms</span></h5><p><u>云，边缘服务器，移动节点。</u></p>
<p>主要表示不同的计算主机，对等计算中，任务被迁移至临近移动设备。</p>
<p>任务可被迁移到边缘网络的边缘云，移动边缘服务器部署在每个基站。</p>
<h5><span id="147-关键使能技术-key-enablers">1.4.7 关键使能技术 Key Enablers</span></h5><p>关键使能技术有助于在无线接入网内给移动用户提供上下文感知，低时延，高带宽服务的不同技术。</p>
<ul>
<li><p><u>云与虚拟化</u></p>
<p>虚拟化允许在一个物理硬件上创造不同的逻辑设施。</p>
<p>位于网络边缘的云计算平台利用虚拟化技术搭建多个虚拟机，去提供不同的云计算服务。</p>
<p>SaaS ，PaaS ，IaaS。</p>
</li>
</ul>
<ul>
<li><p><u>大容量服务器</u></p>
<p>​    传统的大容量服务器和移动边缘服务器部署在边缘网络的每个移动基站，移动边缘服务器执行网络流量转发和过滤，并负责执行被边缘设备迁移的任务。</p>
</li>
</ul>
<ul>
<li><p><u>网络技术</u></p>
<p><u>Wi-Fi和蜂窝网络</u>是主要用于连接移动设备和边缘服务器的主要网络技术。</p>
</li>
</ul>
<ul>
<li><p><u>移动设备</u></p>
<p>在边缘网络内通过机器与机器间的通信执行对等计算。</p>
</li>
</ul>
<ul>
<li><p><u>软件开发工具包</u></p>
<p>API</p>
</li>
</ul>
<h2><span id="第2章-关键技术">第2章 关键技术</span></h2><h3><span id="21-边缘云放置技术">2.1 边缘云放置技术</span></h3><p>边缘云应该放在什么位置？</p>
<p><strong>移动边缘计算目的</strong>：将云计算能力<strong>迁移到网络边缘</strong>，<strong>减少</strong>核心网拥塞和传播延迟造成的<strong>迟延</strong>。</p>
<p><u>边缘云</u>放置策略（位置，数量）会对<u>边缘云响应时间</u>和<u>资源利用率</u>产生重要的影响。</p>
<p>放置如图：</p>
<img src="/images/static/边缘计算/book_pictures/a-2.1.1.jpg" alt="a-2.1.1" style="zoom:20%;">



<p><u>边缘云</u>适合在<u>无线城域网</u>中放置：1. 高成本效益。2.不闲置，高效。</p>
<p>挑战：服务质量，网络时延，应用性能，负载不均衡。</p>
<h4><span id="211-国外研究进展">2.1.1 国外研究进展</span></h4><hr>
<h5><span id="澳洲国立xu等人有容量限制边缘云放置问题">澳洲国立Xu等人：有容量限制边缘云放置问题</span></h5><p><strong>Efficient algorithms for capacitated cloudlet placements.</strong></p>
<p><u>问题思路：</u>将边缘云放入一些关键的接入点。考虑到（1）如何将移动用户请求分配给边缘云，最小化用户与提供服务边缘云的时延。</p>
<p><u>解决思路：</u>证明是NP问题（1）小规模：整形规划，精确解（2）大规模：使用贪婪算法，近似解。</p>
<p>此外，根据用户请求是否具有先难沟通的资源需求设计了2个能保证近似比的近似算法算法，在已经放置k个边缘云的前提下，动态的分配用户请求。</p>
<hr>
<h5><span id="澳洲国立-jia-提出了基于密度的边缘云放置算法">澳洲国立 Jia 提出了基于密度的边缘云放置算法。</span></h5><p>大规模无线城域网放置有限数量的边缘云和给用户分配边缘云的问题，以最小化迁移任务的平均等待时间。</p>
<img src="/images/static/边缘计算/book_pictures/a-2.1.2.jpg" alt="a-2.1.2" style="zoom:40%;">

<p>过程：</p>
<ol>
<li>排队论设计一个多用户多边缘云的系统模型</li>
<li>提出k个边缘云的放置和用户分配算法。用于实际动态和持续移动用户的无线城域网中。</li>
<li>两种云放置算法： （1）<u><strong>负载最重的接入点优先放置算法</strong></u>和<strong><u>基于密度的边缘云放置算法</u></strong>。（2）<strong><u>负载最重的接入点优先放置算法</u></strong>即对整个网络的接入点按照<strong><u>用户积累任务到达的速率排序</u></strong>，在<strong><u>前k个</u></strong>任务量最大的接入点放置边缘云。</li>
</ol>
<p><u><strong>负载最重的接入点优先放置算法</strong></u>缺点</p>
<ol>
<li>最大负载点不一定接入最多，可能在1，2跳的位置范围，所以不应该是<strong>负载最大</strong>地方放置，而是<strong>用户接入点</strong>最密集的地方放置。</li>
<li>总是<strong>距离最近</strong>，边缘云<strong>工作过载</strong>，其他边缘云资源<strong>不充分使用</strong>。</li>
</ol>
<p>Jia 提出了基于密度的边缘云放置算法。</p>
<ol>
<li>在最密集地方放置，减小平均网络时延。</li>
<li>均衡用户工作负载，减少排队时间。</li>
</ol>
<hr>
<h4><span id="212-国内研究进展">2.1.2 国内研究进展</span></h4><h5><span id="南京大学-xiang-基于移动用用地理位置信息的自适应移动边缘云的放置方法">南京大学 Xiang <strong>基于移动用用地理位置信息的自适应移动边缘云的放置方法。</strong></span></h5><p>核心：最大化边缘云覆盖移动用户的数量。</p>
<h5><span id></span></h5><ol>
<li>k means 算法识别移动设备区域的中心位置，按访问路径图进行调整。</li>
<li>根据放置规则约束过滤袋哦不当的位置，结合中心位置间的距离。</li>
<li>根据区域结构生成边缘云的移动轨迹。</li>
</ol>
<h3><span id="22-计算卸载技术">2.2 计算卸载技术</span></h3><p>移动终端决策是否进行计算卸载？</p>
<p>移动设备通过把移动应用中的工作负载卸载到云端，利用云端手机、存储和处理数据，从而减少移动设备的程序执行时间并降低能耗。<strong>要求</strong>：实时性，低计算低通信时延。<strong><u>总结：云计算资源扩展移动设备能力</u></strong>。<strong>对象：计算密集型，交互密集型。</strong></p>
<p>架构：    </p>
<img src="/images/static/边缘计算/book_pictures/a-2.2.1.jpg" alt="a-2.2.1" style="zoom:53%;">



<h4><span id="221-国外研究进展">2.2.1 国外研究进展</span></h4><h5><span id="eduardo-杜克-2010-maui-最早的计算卸载实现模型">Eduardo 杜克 2010 MAUI ,最早的计算卸载实现模型。</span></h5><p>简单思想：支持在程序运行时，细粒度的决定将哪些代码卸载至云端执行。将可卸载的运行方法用Remoteable标注。MAUI 系统决策引擎分析卸载的成本和收益，评估带宽和延迟，决定是否对改方法进行云端执行。</p>
<img src="/images/static/边缘计算/book_pictures/a-2.2.2.jpg" alt="a-2.2.2" style="zoom:30%;">

<p>移动设备MAUI: 3个组件：</p>
<ul>
<li>分析器：负责分析卸载的成本和收益。</li>
<li>决策引擎：实际运行在MAUI服务器上。</li>
<li>客户端代理：负责收集传输卸载方法的状态信息。</li>
</ul>
<p>服务器设备MAUI: 4个组件：</p>
<ul>
<li>分析器：负责分析卸载的成本和收益，同上代理作用。</li>
<li>决策引擎：定期对方法是否需要卸载进行决策。</li>
<li>服务端代理：负责收集传输卸载方法的状态信息，同上代理作用。</li>
<li>MAUI控制器：身份检验和资源分配。</li>
</ul>
<p>优点：<strong><u>可有效降低移动端能耗。</u></strong></p>
<p>缺点：<strong><u>开发人员手工判断可卸载性</u></strong></p>
<hr>
<h5><span id="intel-byung-gon-clonecloud计算卸载模型">Intel       Byung-Gon CloneCloud计算卸载模型。</span></h5><p>简单思想：通过静态分析器根据限制条件对静态代码进行分析和动态环境分析相结合，识别出可以卸载到云端运行的方法。</p>
<img src="/images/static/边缘计算/book_pictures/a-2.2.3.jpg" alt="a-2.2.3" style="zoom:50%;">



<ul>
<li>限制条件：访问本地资源代码得在本地</li>
<li>共享本地状态的代码必须在同一设备上运行</li>
<li>放置出现嵌套卸载</li>
</ul>
<p>动态分析器结合网络环境分析卸载成本收益，构造代码开销函数，用最优化求解器给出一个执行时间最短或能耗最低的应用划分方法。</p>
<p>流程:</p>
<p>先在云端为移动设备创建克隆虚拟机实例，如遇到卸载节点，运行线程挂起，状态信息发送到云端虚拟机，云端继续运行该线程，该线程不受影响，如试图访问卸载到云端云端的线程的相关信息，就会进入暂时挂起状态。当卸载到云端的线程执行完后，相关信息传回本地，合并到本地被挂起的线程，本地的唤醒后继续执行。</p>
<hr>
<h5><span id="karim-佐治亚理工-cosmos以风险控制方式进行卸载决策">Karim 佐治亚理工  COSMOS以风险控制方式进行卸载决策。</span></h5><h5><span id="根特大学的tim等人在增强现实用物计把cloudlet当作云端实现计算卸载">根特大学的Tim等人”在增强现实用物计把Cloudlet当作云端实现计算卸载。</span></h5><h5><span id="mahadev-cmu-在2009年提出cloudlet扩展移动设备的能力">Mahadev CMU 在2009年提出Cloudlet扩展移动设备的能力。</span></h5><h5><span id="karim-佐治亚理工-提出协调同域移动设备提供云服务-femtoclouds-提供了动态的配置的多设备的自发性服务云">Karim 佐治亚理工  提出协调同域移动设备提供云服务。FemtoClouds 提供了动态的，配置的，多设备的自发性服务云。</span></h5><p>安装FemtoClouds 客户端服务， 通过结合用户的输入来<u>估计移动设名的计算能力</u>， 以确定可用于共享的计算能力。 <u>客户端</u>利用设备<u>传感器、用户输人信息和历史信息</u>来构建和维护<u>用户配置文件</u>。<u>客户端服务与控制器共享可用信息</u>。最后，控制器负责估计<u>用户存在的时间</u>，并将参与的<u>移动设备“构建”成云</u>。Femto-Clouds能够使用户在时间上形成稳定性和可预测性，有基于个人和社会关系的信任潜力，能够获得设备使用的补偿。</p>
<h5><span id="cloudlet">*    Cloudlet</span></h5><p><strong>Coudlet是在移动用户附近的、可信的、资源丰富的计算机集群。</strong></p>
<p>​    Cloudlet是广泛分布的互联网基础设施，一个Cloudlet被视为一个云端。Cloudlet 能够实现自我管理，功率小，能够接到Internet,能够进行访问控制设置，与移动设备之间仅有1跳的距离。</p>
<p>​    这种资源管理模式使Cloudlet可以很方便地被部署在诸如咖啡店、图书馆、商场、医院等场所。为了保证部署的安全性，可以通过第三方远程监控把Cloudlet封闭在一个防篡改或防拆封的机柜中。</p>
<p>​    在利用Cloudlet时，移动设备充当瘦客户端，所有重要且复杂的计算都卸载到附近的Cloudlet中。如果移动设备附近没有可用的Cloudlet,则移动设备可以使用传统的远端云或者仅使用移动设备本身的资源。</p>
<p>​    简而言之Cloudlet 是个预先定义的接近移动设备的云，由些静态站组成， 通常安装在公共区域。据预测，Cloudle能够满足开发者和卸载基础架构的需求，提供具体的、有效的功能，实现更快的上市速度。</p>
<h5><span id="里昂大学的golchayi提出了自发临近云spc通过附近的一组移部身动设备以协作的方式执行任务卸载">里昂大学的GolchayI提出了自发临近云SPC:通过附近的一组移部身动设备以协作的方式执行任务卸载。</span></h5><p>移动设备之间通过中间件进行交互，对外，发出可提供的资源，如哪个时间段在什么地方可又实以提供什么样的资源等;对内，接收或拒绝其他临近设备发来的，计算请求。这类计算卸载算法需要进一 -步考虑激励措施，通过对设用户的行为进行激励，实现共利共赢。</p>
<h4><span id="222-国内研究进展">2.2.2 国内研究进展</span></h4><p>对代码进行自动划分并在运行时完成卸载的技术手段主要依赖于对运行环境中虚拟机的修改，从而支持计算进程的挂起、运行和恢复操作等。通过这种方式实现计算卸载有利也有弊，好处是卸载能力很强，缺点是限制了其适用场景，也因此降低了用户的接受度，此外，对虚拟机的修改还会进步地导致各类安全性问题。</p>
<p>（未完待续。。。）</p>
<hr>
<h3><span id="23-服务迁移技术">2.3 服务迁移技术</span></h3><p><strong>如何实现服务在多个云间<u>无缝迁移</u>？</strong></p>
<p>移动终端用户频繁移动，导致边缘云服务质量急剧下降，甚至服务中断，难以保证服务的连续性。</p>
<p>在移动边缘计算环境下实现服务的无缝迁移（即服务前移时间开销的最小化）。</p>
<p><strong><u>服务</u>迁移无缝迁移和<u>蜂窝网络</u>无缝迁移</strong></p>
<p>蜂窝网络无缝迁移——是通信的切换，在切换的过程中传输数据量不大。</p>
<p>服务无缝迁移——是把程序，数据和执行状态从一个边缘云迁移到另一个边缘云，数据传输量大。</p>
<p><strong>移动边缘计算中的服务迁移与云数据中心的虚拟机迁移</strong> </p>
<ul>
<li>优化标准不同</li>
</ul>
<p>移动边缘计算中的服务迁移——优化标准是迁移的总时间。</p>
<p>云数据中心的虚拟机迁移——虚拟机的宕机时间，在此时间段虚拟机实例会被暂停，占迁移总时间的一小部分。</p>
<ul>
<li>计算资源通信方式和质量</li>
</ul>
<p>移动边缘计算服务迁移没有保障。</p>
<p>虚拟机的迁移发生在云计算中心，不同计算节点之间有可靠的专用高速有线网络连接，且参数可以自设定。</p>
<p><strong>实现方法策略：</strong></p>
<p>基于决策过程的服务迁移。</p>
<p>基于虚拟机切换的服务迁移。</p>
<h4><span id="231-欧洲研究进展">2.3.1 欧洲研究进展</span></h4><h5><span id="基于决策过程的服务迁移"><u>基于决策过程的服务迁移。</u></span></h5><p>使用连续时间马尔科夫决策过程模型。</p>
<p><a href="https://zhuanlan.zhihu.com/p/28084942" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28084942</a></p>
<img src="/images/static/边缘计算/book_pictures/a-2.3.1.jpg" alt="a-2.3.1" style="zoom:50%;">

<p>途径：考虑迁移策略，转移矩阵与激励，进而解决成本和服务质量的矛盾。</p>
<p>方法：制定一个迁移策略，当移动设备和数据中心的距离在一定范围时，就决定是否进行服务迁移。</p>
<p>基于决策的服务方法与两个对比方法（进入新边缘云的有效范围就迁移，距离初始边缘云一定范围就迁移）去最大期望收益。</p>
<h4><span id="232-美洲研究进展">2.3.2 美洲研究进展</span></h4><h5><span id="基于虚拟机切换的服务迁移"><u>基于虚拟机切换的服务迁移。</u></span></h5><p>问题：最保守的用户移动也会让网络性能显著退化。</p>
<h5><span id="satyanarayanan-cmu-虚拟机切换概念">Satyanarayanan CMU  虚拟机切换概念</span></h5><p>当用户移动时，虚拟机从一个Cloudlet传输到另一个Cloudlet，已实现较低的端到端时延——通过压缩迁移需要的数据量，在无线接入网中，实现1分钟的服务迁移。</p>
<p><strong>设计方案：</strong> </p>
<ul>
<li>优化总切换时间，而非宕机时间</li>
<li>动态适应网络带宽和Cloudlet负载</li>
<li>借助Cloudlet已有的虚拟机状态。</li>
</ul>
<p><img src="/images/static/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/book_pictures/a-2.3.2.jpg" alt="a-2.3.2"></p>
<h5><span id="ibm华生实验室的wang等人">IBM华生实验室的Wang等人</span></h5><p>通过利用<u>移动边缘计算</u>比境中<u>分散的网络和计算资源</u>，采用<u>分层思想</u>构建服务迁移框架<u>以最小化服务迁移的总时间</u>。其服务迁移框架由三部分组成。</p>
<p>​    如图所示，<u>第1层是基础层</u>， 用来记录所有相关的基础数据，包括操作系统、内核等，可以通过备份把这个基础数据包预先存储在移动边缘计算环境中，以供后续大量的应用程序重复便用。因为每个移动边缘计算环境中都存储有它的备份，所以在每次迁移过程中不需要传送基础层的信息，从而节省了迁移时间。</p>
<p>​    <u>第2层是应用程序层</u>，包含应用程序的“空”版本和专用数据。当整个应用程序要进行迁移时，则会先备份并把应用程序当作实例挂起。</p>
<p>​    <u>第3层是实例层</u>，存放应用程序的运行状态。当挂起需要被迁移的实例后，通过<u>增量编码的修改、去重和压缩等同步技术</u>，实现到终点的<u>无缝迁移。</u></p>
<p>​    </p>
<img src="/images/static/边缘计算/book_pictures/a-2.3.3.jpg" alt="a-2.3.3" style="zoom:50%;">





<p><strong>服务从起始移动边缘计算环境至终点移动边缘计算环境流程</strong>    如图2-15.</p>
<ol>
<li>开始迁移正在运行的应用程序。如果终点移动边缘计算环境没有基础包数据，则需要先对基础层的内容进行备份，然后迁移至终点移动边缘计算环境。如果终点移动边缘计算环境已经存放基础包数据，则判断是否有需要迁移的应用程序数据。</li>
<li>其次，如果终点移动边缘计算环境没有相关的应用程序数据，则备份应用程序层的内容，进行下一步迁移。如果终点移动边缘计算环境已经存放了应用程序数据，则把应用程序作为实例进行迁移。</li>
<li>然后，当起始移动边缘计算环境确定需要迁移的实例时，暂时挂起要迁移的实例，完成修改、去重和压缩后的增量编码同步。最后，恢复实例，完成服务迁移过程。</li>
</ol>
<img src="/images/static/边缘计算/book_pictures/a-2.3.4.jpg" alt="a-2.3.4" style="zoom:50%;">



<p>​    Wang等人(32)在设计服务务迁移算法时考虑了成本、网络结构和移动模型异质性等因素，通过底层预测机制预测在每个移动微云Cloudlet上运行的服务成本和迁移成本（与网络状态和用户偏好有关）。</p>
<p>​    预测机制可以<u>提供最可能的未来成本序列及实际成本和预测成本的偏差上限</u>，这对于需要<u>保证预测准确度</u>的预测方法是有效的。通过<u>预测未来成本参数</u>找到最优的<u>服务放置方法</u>，以<u>最小化平均成本</u>，通过定义一个<u><strong>时间窗口</strong></u>预测未来时间，如图2-16所示132)，其中共有Tmax 个时间片，<u>时间窗的大小是T</u>，即每T个时间片作为一个时间窗。在每个时间窗内，不同时间片之间存在<u>服务迁移</u>，因此需要设计<strong><u>服务迁移策略</u></strong>使得<u><strong>该时间窗</strong></u>内的<strong><u>服务迁移成本最低</u></strong>。不同时间窗之间是相互独立的，<u>不同时间窗</u>连接处的两个时间片之间<u>不进行服务迁移。</u></p>
<p>​    时间窗不能太大，因为越靠后的时间片，预测误差越大;时间窗也不能太小，否则就失去了优化服务迁移策略的目的。因此，<u>需要对时间窗的大小进行优化</u>。</p>
<p><strong>Wang等人提出一种找到最优时间窗的方法，考虑了预测误差并最小化服务迁移平均成本的上限。</strong></p>
<img src="/images/static/边缘计算/book_pictures/a-2.3.5.jpg" alt="a-2.3.5" style="zoom:70%;">



<h3><span id="24-群智协同技术">2.4 群智协同技术</span></h3><p><strong>如何群体完成个题难以完成的任务技术？</strong></p>
<p>​    在移动边缘计算环境下，当大量用户访问边缘云时，具有有上体资源的移动边缘计算服务器可能出现工作负荷过载的现在这种情况下，移动边缘计算系统可以通过群智协同减轻服务器的工作负载， 以平衡服务器的工作负荷，减少用户请求的排队时间。 </p>
<p>​    然而，边缘云之间应该如何协作并没有固定的策略， 因出，产生了移动边缘计算环境下的群智协同问题。群智协同是一种<u>分布式的问题解决机制</u>，它通过大量用户的相互协作来完成仅靠单个用户难以完成的复杂任务，例如，用户可以利用群智协同来完成移动旅游指导、停车位搜索等具有实时性的复杂任务。</p>
<p>​    假如边缘云A的工作负荷过载，边缘云B闲置了很多资源，边缘云A和边缘云B可以通过相互协作实现资源共享，从而可以为移动用户提供更多的资源，增强用户体验，提高资源利用率，进而增加云计算服务提供商的收益。群智协同的主要参与者包括任务请求人和任务完成人(也称为工人)，他们通过任务联系到一起。</p>
<p>​    任务请求人利用群智协同完成自己任务的主要步骤包括:①设计任务:②利用群智协同平台发布任务、等待答案;③拒绝或者接收工人的答案:③根据工人的答案整理结果，完成自己的任务。</p>
<p>​    工人使用群智协同的主要步骤包括:①查找感兴趣的任务;②接收任务;③回答任务;④提交答案[3。</p>
<h2><span id="第3章-典型应用场景">第3章 典型应用场景</span></h2><h3><span id="31-车联网">3.1 车联网</span></h3><p>Internet of Vehicles</p>
<p>车联网体系结构：</p>
<p>​        <strong>4层架构</strong></p>
<img src="/images/static/边缘计算/book_pictures/a-3.1.1.jpg" alt="a-3.1" style="zoom:40%;">





<p><img src="/images/static/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/book_pictures/a-3.1.2.jpg" alt="a-3.1.2"></p>
<h3><span id="32-ar-增强现实">3.2 AR 增强现实</span></h3><img src="/images/static/边缘计算/book_pictures/a-3.2.jpg" alt="a-3.2" style="zoom:30%;">



<h3><span id="33-医疗服务">3.3 医疗服务</span></h3><img src="/images/static/边缘计算/book_pictures/a-3.4.jpg" alt="a-3.4" style="zoom:27%;">





<h3><span id="34公共安全">3.4公共安全</span></h3><p><img src="/images/static/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/book_pictures/a-3.5.1.jpg" alt="a-3.5.1"></p>
<img src="/images/static/边缘计算/book_pictures/a-3.5.2.jpg" alt="a-3.5.2" style="zoom:50%;">





<h2><span id="第4章-工具与实验平台">第4章 工具与实验平台</span></h2><h3><span id="41-ifogsim">4.1 iFogSim</span></h3><h3><span id="42-jade">4.2 JADE</span></h3><h3><span id="43-oai">4.3 OAI</span></h3><h3><span id="44-openstack">4.4 OpenStack</span></h3><h3><span id="45-docker">4.5 Docker</span></h3><h3><span id="46-openlte">4.6 OpenLTE</span></h3><h2><span id="第5章-挑战">第5章 挑战</span></h2><h3><span id="51-系统架构">5.1 系统架构</span></h3><ul>
<li><p><strong>笼式安全</strong>——安全等级与在运营商完全控制下的安全水平相同。</p>
</li>
<li><p><strong>数据压缩和有效性</strong> ——带宽的使用和结果数据的有效性。</p>
</li>
<li><p><strong>权衡定理</strong> ——4个特点：移动性，延迟性，性能容量，隐私。   提高隐私性和容量，就意味着性能和延迟的变换（特点对立性）。</p>
</li>
<li><p><strong>数据源</strong>—— 输入源，程序，用户对象。   数据完整性的保证。</p>
</li>
<li><p><strong>在网络边缘启用QoS</strong>（端到端的服务质量）  运营商的合作，两边协商配置成本高，不易扩展。。。</p>
</li>
</ul>
<h3><span id="52-服务与应用">5.2 服务与应用</span></h3><ul>
<li><strong>命名，识别和发现资源</strong></li>
<li><strong>标准化API</strong> ——计算资源来自不同供应商时，为了实现正常沟通和协同，需要标准化api。</li>
<li><strong>激励机制</strong> ——激励文案和商业模式鼓励使用边缘计算应用。</li>
<li><strong>实时处理和通信</strong> ——边缘设备计算、通信能力有限。 （视频分析，活动分析难）。</li>
<li><strong>应用程序开发和测试工具</strong>——开发应用工具。</li>
<li><strong>边缘服务生态系统</strong></li>
</ul>
<h3><span id="53-安全与隐私">5.3 安全与隐私</span></h3><ul>
<li>*<em>身份认证 *</em>——传统的基于公钥基础设施PKI的身份验证对物联网系统来说不能很好扩展。</li>
<li><strong>信任机制</strong> ——服务可信赖性，处理不可信任的服务。</li>
<li>*<em>恶意节点检测 *</em>——恶意计算节点伪装合法节点来交换和手机物联网设备产生的数据。</li>
<li><strong>数据隐私</strong> —— 资源受限的物联网设备缺乏加密和解密数据的能力。数据量增长，保存在通信层，处理层，所以要保护用户对设备中某些应用生成数据的使用模式。</li>
<li><strong>入侵检测和访问控制</strong> ——设计优化一套监测系统，以确保只有受信任的参与者才能完成给定操作。检测不当行为或恶意的移动设备。</li>
</ul>
]]></content>
      <categories>
        <category>边缘计算</category>
      </categories>
      <tags>
        <tag>新手入门</tag>
      </tags>
  </entry>
  <entry>
    <title>软件架构技术课堂笔记2</title>
    <url>/2020/04/23/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h3><span id="软件架构技术课堂笔记2">软件架构技术课堂笔记2</span></h3><p>&lt;会存在很多问题，日后的学习会进行更正&gt;</p>
<h3><span id="spring-框架">Spring 框架：</span></h3><blockquote>
<p>Spring是分层的javaEE应用一站式轻量级开源框架，由Rod Johnson创建；Spring是为简了化企业级系统开发而诞生的；使用Spring，可以用简单的JavaBeans来实现那些EJB的功能。<br>如果一个系统不需要分布式计算或声明式事务支持，EJB并不是最好的选择；Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。<br>Spring的核心是控制反转（IoC）和面向切面编程（AOP）。提供了展现层SpringMVC、持久层SpringJDBC以及业务层是否管理等众多企业级应用技术。Spring IoC和AOP能让代码很好的分层和解耦，从而提高可维护性和可扩展性，便于测试</p>
</blockquote>
<a id="more"></a>
<h3><span id="spring-模块概述">Spring 模块概述：</span></h3><h3><span id="核心容器beanfactory">核心容器(BeanFactory)</span></h3><blockquote>
<p>核心容器提供 Spring 框架的基本功能(Spring Core)。<br>核心容器的主要组件是 <strong>BeanFactory</strong> ，它是工厂模式的实现，作为<strong>IoC容器</strong>管理Bean。<br><strong>BeanFactory</strong> 使用<strong>控制反转（IOC） 模式</strong>将应用程序的配置和依赖性规范与实际的应用程序代码分开，将类和类之间的依赖从代码中脱离出来，用配置的方式进行依赖关系描述，由IoC容器负责依赖类之间的创建、拼接、管理、获取等工作。 BeanFactory接口是Spring框架的核心接口，实现了容器的许多核心功能。<br><strong>相关jar包：spring-core.jar，spring-beans.jar</strong></p>
</blockquote>
<hr>
<h4><span id="上下文applicationcontext">上下文(ApplicationContext)：</span></h4><p>Spring上下文是一个配置文件，向 Spring框架提供上下文信息。<br><strong>ApplicationContext</strong>是Context模块的核心接口。可用于扫描<br><strong>相关jar包：spring-context.jar</strong></p>
<hr>
<h4><span id="spring-ioc容器">Spring IoC容器：</span></h4><blockquote>
<p><strong>BeanFactory是Spring框架最核心接口</strong>，BeanFactory使得管理不同类型的Java对象成为可能，应用上下文（ApplicationContext）建立在BeanFactory基础上，提供了更多面向应用的功能。一般称BeanFactory为<strong>IoC容器</strong>，称ApplicationContext为<strong>应用上下文（有时也称为Spring容器）</strong>。<br><strong>从用途上划分</strong>，BeanFactory是Spring框架的基础设施。而其子类ApplicationContext由BeanFactory派生而来，提供了更多面向实际应用的功能。<br>创建ApplicationContext对象，代表一个Spring控制反转容器启动。</p>
</blockquote>
<hr>
<h4><span id="applicationcontext的几种常用实现">ApplicationContext的几种常用实现：</span></h4><ol>
<li><strong>ClassPathXmlApplicationContext</strong>：从类路径下的一个或多个XML文件中加载上下文定义，即加载Bean定义的信息。把应用上下文的定义文件作为类资源。（对应的XML名称）</li>
<li><strong>FileSystemXmlApplicationContext</strong>：从文件系统中的一个或多个XMl文件中加载上下文定义，即Bean定义的信息。(绝对路径)</li>
<li><strong>AnnotationConfigApplicationContext</strong>:从一个或多个基于Java的配置类中加载Spring应用上下文。</li>
</ol>
<hr>
<h4><span id="spring-ioc容器启动实例化">Spring IoC容器启动（实例化）</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);  &#x2F;&#x2F;applicationContext为对应配置文件的名字。子类实现父类接口</span><br></pre></td></tr></table></figure>
<hr>
<h3><span id="spring容器-bean配置-bean实现类及应用程序四者关系">Spring容器、Bean配置、Bean实现类及应用程序四者关系</span></h3><p><img src="/images/static/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%842_1.png" alt="四者关系"></p>
<ol>
<li><strong>Bean.XML中记录Bean的实现及依赖关系</strong></li>
<li>Spring容器根据各种形式的Bean配置信息在<strong>容器内部建立Bean定义注册表，根据注册表加载、利用Java语言的反射功能实例化实例化Bean。</strong></li>
<li>并建立Bean和Bean的<strong>依赖关系</strong>。</li>
<li>最后将准备就绪的Bean放到<strong>Bean缓存池</strong>中，<strong>供外层应用调用</strong>。</li>
<li>Spring管理的Java对象称为<strong>“beans”。</strong></li>
</ol>
<p>Spring装配Bean前先要创建XML文件。</p>
<ul>
<li><p>applicationContext.xml 文件中要有<strong>官方给出的bean详细配置</strong></p>
</li>
<li><p>除此之外，这里在用到注解时，也要通过<strong>context告知spring容器在创建容器对象时要扫描的包。</strong></p>
<p><img src="/images/static/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%842_2.png" alt="四者关系"></p>
</li>
</ul>
<hr>
<h3><span id="spring的依赖注入di的具体流程">Spring的依赖注入DI的具体流程：</span></h3><ol>
<li>首先先在service层中建立一个接口叫AccountService</li>
<li>在同路径下建立impl （implement类）AccountServiceImpl去实现AccountService接口，并重写AccountService中的方法。</li>
<li>在src/com的路径下建立XML配置文件 bean.xml：进行bean的配置信息设置，用于在AccountServiceTest测试类中实现对象的实例化。<br>代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;accountService&quot; </span><br><span class="line">class&#x3D;&quot;com.service.impl.AccountServiceImpl&quot;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>AccountServiceTest中首先先实例化spring容器AccountServiceTest。之后<br>通过ApplicationContext的getBean方法获取一定名字的bean。通过强转或字节码的形式实例化对象。<br>代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">AccountService as &#x3D; ac.getBean(&quot;accountService&quot;, AccountService.class);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3><span id="spring中的依赖注入di可以注入的类型">Spring中的依赖注入(DI)可以注入的类型：</span></h3><p>1.基本类和String<br>2.其他bean类型(必须在注解文件中或者注解配置过的bean)：<br>//例如date类型： 用ref将date类的实例注入到accountService中，其他同上节课,value=“要注入的值”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;accountService1&quot; class&#x3D;&quot;com.service.impl.AccountService_1&quot;&gt;  &lt;!--class为类的位置--&gt;</span><br><span class="line">    &lt;constructor-arg name&#x3D;&quot;birthday&quot; ref&#x3D;&quot;now&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;now&quot; class&#x3D;&quot;java.util.Date&quot;&#x2F;&gt; &lt;!-- now  &#x3D;  new Date() --&gt;</span><br></pre></td></tr></table></figure>
<p>3.复杂类型(集合类型)<br>复杂类型注入：<br>    1. 标签：list array set(父集标签：list array set。子集标签：value)<br>    2.  map示例：</p>
<pre><code>&lt;property name=&quot;myMap&quot;&gt;
    &lt;map&gt;
     &lt;entry key=&quot;testA&quot; value=&quot;aaa&quot;/&gt;
        &lt;entry key=&quot;testB&quot;&gt;
            &lt;value&gt;bbb&lt;/value&gt;
        &lt;/entry&gt;
     &lt;/map&gt;
 &lt;/property&gt;</code></pre><p>3.Properties示例： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;myProps&quot;&gt; &lt;props&gt;</span><br><span class="line">        &lt;prop key&#x3D;&quot;testC&quot;&gt;ccc&lt;&#x2F;prop&gt;</span><br><span class="line">        &lt;prop key&#x3D;&quot;testD&quot;&gt;ddd&lt;&#x2F;prop&gt; &lt;&#x2F;props&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>优势：结构相同的，标签可以进行互换</li>
</ol>
<hr>
<h3><span id="三种依赖注入方式">三种依赖注入方式：</span></h3><p>xml：</p>
<ul>
<li>使用构造函数<br>标签<code>constructor-arg</code></li>
</ul>
<p><strong>构造函数注入</strong>是除<strong>属性注入</strong>之外的另一种常用注入方式，他保证一些必要的属性在Bean实例化时就得到设置，并<strong>确保Bean实例在实例化</strong>后就可以使用。<br><strong>使用构造函数注入的前提是Bean必须提供带参的构造函数</strong>。    </p>
<hr>
<ul>
<li>set方法(属性注入):</li>
</ul>
<ol>
<li><p>实际应用中最常采用的注入方式。<br>通过SetXxx（）方法注入Bean的属性值或依赖对象，属性注入要求Bean提供一个默认的构造函数，并为需要注入的属性提供对应的Setter方法。</p>
<ol start="2">
<li>涉及的标签：property</li>
<li>出现的位置：bean标签内部</li>
<li>标签的属性<pre><code>*   name:用于指定注入时所调用的set方法名称
*  value:用于提供基本类型和String类型的数据
*  ref：用于指定其他bean类型数据</code></pre></li>
<li>寻找类中set方法:<br>set/get   set - 属性名称 :将属性名称的开头字母转换成小写</li>
<li>优势：创建对象时没有明确的限制，可直接赋值设置也可以使用默认的构造方法。</li>
<li>弊端： 如果有某成员必须有值，则获取对象时可能set方法没有执行。<br>例子：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id &#x3D;&quot;accountService2&quot; class&#x3D;&quot;com.service.impl.AccountService_2&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;李四&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;age&quot; value &#x3D;&quot;20&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;birthday&quot; ref&#x3D;&quot;now&quot;&#x2F;&gt; </span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
注意：setXX要与name 一致</li>
</ol>
</li>
</ol>
<hr>
<ul>
<li>注解：根据提供的注解.</li>
</ul>
<p><strong>(Component,   Controller,   Service,   Repository)</strong></p>
<ul>
<li>作用：和xml中配置bean作用功能一样</li>
<li>属性：value—和bean中id的作用一样，标识作用</li>
<li>位置：类上(接口的实现类上)  如下所示： </li>
</ul>
<p><code>@Service(&quot;accountService&quot;)</code><br><code>//@Component(&quot;accountService&quot;)</code><br><code>public class AccountService_4 implements AccountService{}</code></p>
<p>用注解的方式时：要在根目录的xml 文件中加入，用于扫描</p>
<p><code>&lt;!--  告知spring容器在创建容器对象时要扫描的包 --&gt;</code><br><code>&lt;context:component-scan base-package=&quot;com&quot;/&gt;</code></p>
<p>PS: XML的标签可以是单个&lt;&gt;，也可以有&lt;/&gt;配对</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>学校</tag>
      </tags>
  </entry>
  <entry>
    <title>软件架构技术课堂笔记1</title>
    <url>/2020/04/21/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B01%20/</url>
    <content><![CDATA[<h3><span id="软件架构技术课堂笔记1">软件架构技术课堂笔记1</span></h3><p>&lt;会存在很多问题，日后的学习会进行更正&gt;</p>
<h3><span id="什么是架构">什么是架构?</span></h3><p><strong>架构</strong> 是一系列相关的抽象模式，用于指导大型软件系统各方面的设计。是软件系统从整体到部分的最高层次的抽象划分(系统设计规划图）</p>
<a id="more"></a>
<p>根据关注的角度不同，架构大概有三种:<strong>（前几年比较流行：MVC）</strong><br><strong>逻辑架构</strong> : 主要描述软件系统中元件之间的关系，例如用户界面，数据库,业务逻辑元件等等。<br><strong>物理架构</strong> : 软件元件是如何安装到硬件上的。<br><strong>系统架构</strong> : 系统的非功能性特征，如扩展性、可靠性、强壮性、灵活性、性能等。</p>
<p>架构一个软件系统，通常就会用到<strong>分层技术</strong>。<br>现在比较流行的架构 <strong>MVVM(前后端分离)</strong></p>
<h3><span id="分层技术的基本概念">分层技术的基本概念</span></h3><p>1.软件开发主要任务，是要保证软件的高效运转和功能的正常实现。分层技术通过对软件内部结构进行解析，赋予不同层次结构的不同功能，从而提高软件功能的丰富程度和使用性能。</p>
<p>2.分层技术为软件的不同层次结构分配不同的解决过程，各个层次结构间组成一个严密的封闭系统。不同层面结构彼此平等。分层技术最主要的应用领域是软件架构开发。</p>
<p>3.分层技术是将软件按照一定逻辑关系分解成多个面，每个层面都有各自的功能，组合起来则形成完整的软件。各分层之间具有一定独立性，需要完善软件功能或者对软件进行升级改造时，只需要对涉及到的分层进行完善修改，对其它层面几乎没有影响，使软件升级和改造工作变得更加简单，提高工作效率。</p>
<p>4.分层技术通过分层模式来定义各个功能层次的接口。按照这种设计方式，<br>软件复用性得以大幅提高，对于软件开发、设计十分有利。开发之后的<br>各个层面能够充分利用标准接口，有效实现自动对接。</p>
<h3><span id="软件分层技术">软件分层技术</span></h3><p>分层技术是当前软件开发设计中使用频率十分高的一种设计方式，多层分布技术已成为今后软件开发设计的主要方向之一。</p>
<p>软件分层的目的就是为了架构一个好的系统，通过分层：<br>1.<strong>降低耦合</strong>，降低层与层之间的依赖。有利于应对需求变更，有利于排错，有利于后期的维护。</p>
<p>2.<strong>简化问题复杂度</strong>，各层分工明确。例如OSI七层模型和简化的tcpip协议的四层模型。把一个复杂问题分解，达到化繁为简的效果。但是，一般针对系统大小而言的，如果一个小的系统,也可能会把简单问题复杂化（如多人协调工作，要用到分层设计）。</p>
<p><strong>软件分层技术作用特点:</strong><br>1.<strong>有利于团队开发，分工合作</strong>。开发人员可以只关注整个结构中的其<br>中某一层，三层架构中，基本可以将工作分为界面设计人员、业务<br>实现人员、数据库设计人员。只要各层接口在开发前规定好，那么，<br>各层可以独立开发升级和维护。</p>
<p>2.<strong>有利于标准化</strong>。在开发过程中可以将每层的代码进行规范，固定开发语言的风格，可以忽略数据库的差异，设计完善的数据访问层可以将数据库的差异完全屏蔽，可以快速安全地实现数据库的切换等。</p>
<p>3.方便用新的实现来<strong>替换原有层次的实现</strong>，便于系统维护/升级。各层间通过接口解耦，接口与实现分离，从而可以非常方便的替换掉实现，或者升级实现等。</p>
<p>5.<strong>逻辑复用</strong>。例如原来基于B/S开发的程序现在要改成C/S，那么只要业务层的接口没有改变，那么业务层和数据层都可以直接复用。</p>
<p>6.<strong>方便部署</strong>。将各层开发成组件，则可以独立部署。分层可以把各层部署在不同的地方，<strong>实现分布式系统</strong>。</p>
<h3><span id="mvc-模型-视图-控制器">MVC   (模型-视图-控制器)</span></h3><p> Model   负责存储系统的中心数据，将数据保存至一个模型中，方便使用。<br>  View:    显示界面（html, jsp,asp,php…）。<br> Controller:    处理用户输入的信息，进行向模型发送数据。</p>
<h3><span id="spring框架">Spring框架</span></h3><blockquote>
<p>Spring框架的作用<br>1.软件架构中利用Spring框架管理系统的各个组件(Action、Service、DAO)，使用Spring的Ioc和AOP机制实现应用程序中的Bean组件等的关联，从而实现了低耦合调用，增强系统可维护性和扩展性。<br>2.Spring通过控制反转(IoC) 技术实现低耦合。</p>
</blockquote>
<h3><span id="spring概述">Spring概述</span></h3><blockquote>
<p>Spring用于管理组件，组件的管理需要进行配置<br>Spring为组件提供服务,服务的使用也需要配置<br>Spring是-个轻量级的框架，提供管理组件和提供服务的实现类。</p>
</blockquote>
<hr>
<h4><span id="spring-frame-下载的集成框架包中">Spring Frame 下载的集成框架包中：</span></h4><blockquote>
<ol>
<li>dist (开发者代码  当前版本可使用的)<ul>
<li>jar包（类zip，解压内容）</li>
<li>javadoc.jar 文档说明</li>
<li>source 源码</li>
</ul>
</li>
<li>docs 开发文档</li>
<li>schema  XML文档约束</li>
</ol>
<p><strong>schema</strong>是新的XML文档约束；DTD出现的比较早. Schema要比DTD强大很多； Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。( XML Schemas Definition )(xmlns : XML namespace)</p>
</blockquote>
<p>###Spring 常见核心jar包</p>
<p><strong>core</strong> （核心工具类的jar包）<br><strong>beans</strong> （访问配置文件，创建和管理bean的主要内容）<br><strong>context</strong> （提供基础的Ioc功能上的扩展服务）<br><strong>epression</strong> （Spring的表达式语言）<br><strong>第三方依赖包</strong>，Apache 的commons.logging    (日志处理的内部包)</p>
<p><em>移除某个包后变红反映的是</em></p>
<blockquote>
<ol>
<li><strong>耦合</strong>：程序之间的依赖关系<br>包括：</li>
</ol>
<ul>
<li>类之间的依赖</li>
<li>方法之间的依赖</li>
</ul>
<ol start="2">
<li>解耦操作：<br>降低程序间的依赖关系（编译期不依赖，运行时才依赖 ）<br>如何进行解耦：</li>
<li>解耦的思路：</li>
</ol>
<ul>
<li>使用反射创建对象，避免使用new关键字<br>（如案例中的 new     com.mysql.jdbc.Driver）</li>
<li>读取配置文件来获取创建对象的全限定类名（运行期，创建对象，工厂模式）</li>
</ul>
</blockquote>
<blockquote>
<p>数据库的使用方式<br>1.注册驱动<br>2.获取连接<br>3.获取操控数据的预处理对象<br>4.执行sql返回执行结果<br>5.遍历结果集<br>6.关闭资源</p>
</blockquote>
<h4><span id="beanxml">Bean.xml</span></h4><p>xml放在src目录下<br>xml的两种约束形式  限制随意标签的修改，不像html，可以修改写错。<br>用于作为配置文件。（dtd  ，xsd ）<br>Spring framework learn 文档说明 core<br>把创建对象交给spring来管理</p>
<h4><span id="bean-属性">Bean 属性：</span></h4><ol>
<li><p>Id  创建对象唯一表示</p>
</li>
<li><p>Class  类文件权限名称</p>
</li>
<li><p>Scope：表示当前对象的作用范围</p>
<ul>
<li>singleton:默认值，表示当前对象为单例对象</li>
<li>Prototype：表示当前对象为多例对象  </li>
<li>request：Spring创建bean对象，将对象存储在request域中。</li>
<li>session：Spring创建bean对象，将对象存储在session域中。</li>
<li>global session: 分布式环境web项目，如果没有，则与session一样。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;singleton</span><br><span class="line">默认：us1&#x3D;&#x3D;us2 (则为单例模式)</span><br><span class="line">UserService usl &#x3D; (UserService) ac. getBean( s: &quot; userService&quot; ) ;&#x2F;&#x2F;强转</span><br><span class="line">UserService us2 &#x3D; ac. getBean( s:&quot; userService&quot; , UserService. class)</span><br><span class="line"> &#x2F;&#x2F; 转化为UserService的字节码</span><br><span class="line">us1&#x3D;&#x3D;us2 (则为单例模式) &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Init-method:  在指定类中初始化方法名称（如果有该方法，则自动进行）</p>
</li>
<li><p>Destroy:  在指定类中销毁方法名称（释放容器时执行）<br><code>主线程结束 spring容器还未关闭释放，则无法调用destroy方法</code></p>
</li>
</ol>
<p><em>代码演示节选：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org. spr ingframework. context. Appl icationContext;</span><br><span class="line">import org. spr ingframework. context. support. ClassPathXmlApplicat ionContext ;</span><br><span class="line">public class TestDemo2</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">UserService us &#x3D; new UserService() ;</span><br><span class="line">us. add() ;</span><br><span class="line">&#x2F;&#x2F;1.获取核心容器对象</span><br><span class="line">ApplicationContext ac &#x3D;    </span><br><span class="line">new ClassPathXmlApplicationContext ( configLocation:”bean.xml&quot;) ;  </span><br><span class="line">&#x2F;&#x2F;bean目录字符串 接口实现类</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.给句id获取Bean对象</span><br><span class="line">&#x2F;&#x2F;0bject obj &#x3D; ac. getBean( &quot;userService&quot;);</span><br><span class="line">UserService us1 &#x3D;(UserService) ac.getBean(&quot;userService&quot;);</span><br><span class="line"></span><br><span class="line">System.out.printlnn(usl) ;&#x2F;&#x2F;打印usl 看对象是否创立成功</span><br><span class="line">Usl.add();&#x2F;&#x2F;调用对象的方法</span><br></pre></td></tr></table></figure>

<h4><span id="小结-spring-配置步骤">小结： spring 配置步骤：</span></h4><ol>
<li>导入相关的jar包并添加</li>
<li>在类的根目录下建立一个非中文的任意名称的xml、文件（bean.xml)</li>
<li>让spring管理资源，在配置文件中配置要创建的对象</li>
<li>测试<br>1）ApplicationContext 对象  spring容器的顶级接口，超类，<br>2）根据 id 获取对象</li>
</ol>
<p><img src="/images/static/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%841.png" alt="图"></p>
<h3><span id="实现类">实现类：</span></h3><ol>
<li>ClassPathXmlApplicationContext:可以加在类路径下的配置文件，要求配置<br>文件必须在类路径下，如果不在，加载不了。(常用)</li>
<li>FileSystemXmlApplicationContext:可以加在磁盘任意路径下配置文件(绝对<br>路径–必须要求访问权限)</li>
<li>AnnotationConfigApplicationContext:用于读取注解创建的容器</li>
</ol>
<h4><span id="类的介绍">类的介绍：</span></h4><p>BeanFactory： spring 容器的顶级接口<br>ApplicationContext ：BeanFactory 的子接口</p>
<h4><span id="applicationcontext-和-beanfactory-区别">ApplicationContext 和 BeanFactory 区别:</span></h4><p><strong>创建对象的时间点不一样。</strong><br>ApplicationContext ，只要读取配置文件，默认情况就会创建对象。<br>BeanFactory 什么时候用到该对象则才创建对象。</p>
<h3><span id="bean注入方法">Bean注入方法：</span></h3><ol>
<li>方法：Spring 容器调用无参构造方法注入，创立对象。</li>
</ol>
<p><code>userService us1 =(UserService) ac.getBean(&quot;userService&quot;); //类名</code></p>
<blockquote>
<p>bean属性：<br>    <strong>name:</strong>指定参数在构造方法中的名称<br>    <strong>index:</strong>指定参数列表中的索引位置<br>    <strong>type:</strong>指定参数列表中的参数类型 （多个相同会出问题）<br>    <strong>value:</strong>赋值，基本类型或String类<br>    <strong>ref:</strong>    可以赋值其他bean类型的对象</p>
</blockquote>
<h4><span id="使用构造方法的注入过程">使用构造方法的注入过程</span></h4><p>若想要调用有参数的构造方法。则：<br>使用构造方法的注入过程方式<br>要求：需要提供一个对应参数列表的构造函数<br>标签： constructor-arg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;”userService ” class&#x3D;”com.test.UserService”&gt;</span><br><span class="line"> &lt;constructor-arg name&#x3D;”name” value&#x3D;”张三”&gt;&lt;&#x2F;constructor-arg&gt;  </span><br><span class="line">&lt;!-- （参数名 参数值） --&gt;</span><br><span class="line"> 或者：&lt;constructor-arg index&#x3D;”0” value&#x3D;”李四”&gt;&lt;&#x2F;constructor-arg&gt; （</span><br><span class="line"> &lt;!-- (索引位置 参数值） --&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p>== 比较地址的值<br>equals  实际的值</p>
<p>比较对象 需重写equals方法</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>学校</tag>
      </tags>
  </entry>
  <entry>
    <title>Get to know Markdown</title>
    <url>/2020/04/18/markdown%20grammar/</url>
    <content><![CDATA[<h1><span id="welcome-to-markdown">Welcome to Markdown</span></h1><h1><span id="第一次学习markdown总结一些常用的方法">第一次学习Markdown，总结一些常用的方法。</span></h1><a id="more"></a>

<!-- toc -->

<ul>
<li><a href="#introducing-markdown">Introducing Markdown</a></li>
<li><a href="#tutorial">Tutorial</a><ul>
<li><a href="#1-headings"><strong>1. Headings</strong></a></li>
<li><a href="#2-toc"><strong>2. TOC</strong></a></li>
<li><a href="#3-citation-a-single-line"><strong>3. Citation (A single line)</strong></a></li>
<li><a href="#4-citation-multiple-lines"><strong>4. Citation (Multiple lines)</strong></a></li>
<li><a href="#5-nesting"><strong>5. Nesting</strong></a></li>
<li><a href="#6-code-block-in-a-single-line"><strong>6. Code block in a single line</strong></a></li>
<li><a href="#7-code-block-in-lines"><strong>7. Code block in lines</strong></a></li>
<li><a href="#8-self-defining-the-color-of-code"><strong>8. Self-defining the color of code</strong></a></li>
<li><a href="#9-insertion-of-links"><strong>9. Insertion of links</strong></a></li>
<li><a href="#10-insertion-of-photos"><strong>10. Insertion of photos</strong></a></li>
<li><a href="#11-insertion-of-videos"><strong>11. Insertion of videos</strong></a></li>
<li><a href="#12-ordered-list"><strong>12. Ordered list</strong></a></li>
<li><a href="#13-unsorted-list"><strong>13. Unsorted list</strong></a></li>
<li><a href="#14-nesting-list"><strong>14. Nesting list</strong></a></li>
<li><a href="#15-nesting-list-with-code"><strong>15. Nesting list with code</strong></a></li>
<li><a href="#16-latex"><strong>16. LaTeX</strong></a></li>
<li><a href="#17-style-of-fonts"><strong>17. style of fonts</strong></a><ul>
<li><a href="#italic">italic</a></li>
<li><a href="#boldface">boldface</a></li>
<li><a href="#italic-boldface">italic + boldface</a></li>
<li><a href="#delated-line">delated line</a></li>
<li><a href="#keyboard">keyboard</a></li>
</ul>
</li>
<li><a href="#18-to-be-continue"><strong>18. To be continue</strong></a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<h1><span id="introducing-markdown">Introducing Markdown</span></h1><blockquote>
<p>Markdown is a plain text formatting syntax designed to be converted to HTML. Markdown is popularly used as format for readme files, … or in text editors for the quick creation of rich text documents.  - <a href="http://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Wikipedia</a></p>
</blockquote>
<h1><span id="tutorial">Tutorial</span></h1><h3><span id="1-headings"><strong>1. Headings</strong></span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">##### h5</span><br><span class="line">###### h6</span><br><span class="line">####### h7      &#x2F;&#x2F; 错误代码</span><br><span class="line">######## h8     &#x2F;&#x2F; 错误代码</span><br><span class="line">######### h9    &#x2F;&#x2F; 错误代码</span><br><span class="line">########## h10  &#x2F;&#x2F; 错误代码</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1</span><br><span class="line">&#x3D;&#x3D;&#x3D;</span><br><span class="line">h2</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3><span id="2-toc"><strong>2. TOC</strong></span></h3><p>Generating a catalogue based on the given headings</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure>


<h3><span id="3-citation-a-single-line"><strong>3. Citation (A single line)</strong></span></h3><p>Citing the code or sentences by using <code>&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hello world!</span><br></pre></td></tr></table></figure>
<p>Example:</p>
<blockquote>
<p>hello world!</p>
</blockquote>
<h3><span id="4-citation-multiple-lines"><strong>4. Citation (Multiple lines)</strong></span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hello world!           &gt; hello world!</span><br><span class="line">hello world!        or   &gt; hello world!</span><br><span class="line">hello world!             &gt; hello world!</span><br></pre></td></tr></table></figure>
<p>Example:</p>
<blockquote>
<p>hello world!<br>hello world!<br>hello world!</p>
</blockquote>
<h3><span id="5-nesting"><strong>5. Nesting</strong></span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; aaaaaaaaa</span><br><span class="line">&gt;&gt; bbbbbbbbb</span><br><span class="line">&gt;&gt;&gt; cccccccccc</span><br></pre></td></tr></table></figure>
<p>Example:</p>
<blockquote>
<p>aaaaaaaaa</p>
<blockquote>
<p>bbbbbbbbb</p>
<blockquote>
<p>cccccccccc</p>
</blockquote>
</blockquote>
</blockquote>
<h3><span id="6-code-block-in-a-single-line"><strong>6. Code block in a single line</strong></span></h3><p>using ` to make the code block in one line</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">the inner part of this bracket all in a single line</span><br><span class="line"> (&#96;</span><br><span class="line">&lt; div&gt;   </span><br><span class="line">   &lt; div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">   &lt; div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">   &lt; div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt; &#x2F;div&gt;</span><br><span class="line">&#96;)</span><br></pre></td></tr></table></figure>

<p>Example:<br>(<code>&lt; div&gt;   
  &lt; div&gt;&lt;/div&gt;
  &lt; div&gt;&lt;/div&gt;
  &lt; div&gt;&lt;/div&gt;
&lt; /div&gt;</code> )</p>
<h3><span id="7-code-block-in-lines"><strong>7. Code block in lines</strong></span></h3><p>using 3 ` to make the code blocks in lines<br>(Tab) making the structures of code clear</p>
<p>Example:<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;   </span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></p>
<h3><span id="8-self-defining-the-color-of-code"><strong>8. Self-defining the color of code</strong></span></h3><p>Example:<br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    num+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure></p>
<h3><span id="9-insertion-of-links"><strong>9. Insertion of links</strong></span></h3>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  百度一下</span><br><span class="line">[百度1](http:&#x2F;&#x2F;www.baidu.com&#x2F;)</span><br></pre></td></tr></table></figure>
<p>  Example:百度一下<br><a href="http://www.baidu.com/" target="_blank" rel="noopener">百度1</a></p>
<h3><span id="10-insertion-of-photos"><strong>10. Insertion of photos</strong></span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）photos in Internet ![圣人惠](https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1587239535004&amp;di&#x3D;a2c85429b04af968f770863353ee9fab&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F3704f527edd7fa1c7af02772780d8aeb8b0e1b42.jpg)</span><br><span class="line">（2）photos in local disk ![saya](&#x2F;images&#x2F;6.png)</span><br></pre></td></tr></table></figure>
<p> Example:<br> （1）<br> <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587239535004&di=a2c85429b04af968f770863353ee9fab&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F3704f527edd7fa1c7af02772780d8aeb8b0e1b42.jpg" alt="圣人惠"><br>（2）<img src="/images/6.png" alt="壁纸"></p>
<h3><span id="11-insertion-of-videos"><strong>11. Insertion of videos</strong></span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;video id&#x3D;&quot;video&quot; controls&#x3D;&quot;&quot; preload&#x3D;&quot;none&quot; poster&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;poster.png&quot;&gt;</span><br><span class="line">      &lt;source id&#x3D;&quot;mp4&quot; src&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;trailer.mp4&quot; type&#x3D;&quot;video&#x2F;mp4&quot;&gt;</span><br><span class="line">      &lt;source id&#x3D;&quot;webm&quot; src&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;trailer.webm&quot; type&#x3D;&quot;video&#x2F;webm&quot;&gt;</span><br><span class="line">      &lt;source id&#x3D;&quot;ogv&quot; src&#x3D;&quot;http:&#x2F;&#x2F;media.w3.org&#x2F;2010&#x2F;05&#x2F;sintel&#x2F;trailer.ogv&quot; type&#x3D;&quot;video&#x2F;ogg&quot;&gt;</span><br><span class="line">      &lt;p&gt;Your user agent does not support the HTML5 Video element.&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;video&gt;</span><br></pre></td></tr></table></figure>
<p> Example:<br> <video id="video" controls preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png"><br>      <source id="mp4" src="http://media.w3.org/2010/05/sintel/trailer.mp4" type="video/mp4"><br>      <source id="webm" src="http://media.w3.org/2010/05/sintel/trailer.webm" type="video/webm"><br>      <source id="ogv" src="http://media.w3.org/2010/05/sintel/trailer.ogv" type="video/ogg"><br>      <p>Your user agent does not support the HTML5 Video element.</p><br>    </video></p>
<h3><span id="12-ordered-list"><strong>12. Ordered list</strong></span></h3><p>There is a space behind the dot</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. one</span><br><span class="line">2. two</span><br><span class="line">3. three</span><br></pre></td></tr></table></figure>
<p>Example:</p>
<ol>
<li>one</li>
<li>two</li>
<li>three</li>
</ol>
<h3><span id="13-unsorted-list"><strong>13. Unsorted list</strong></span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* one</span><br><span class="line">* two</span><br><span class="line">* three</span><br></pre></td></tr></table></figure>
<p>Example:</p>
<ul>
<li>one</li>
<li>two</li>
<li>three</li>
</ul>
<h3><span id="14-nesting-list"><strong>14. Nesting list</strong></span></h3><p>The function of * and - are the same.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. one</span><br><span class="line">    1. one-1</span><br><span class="line">    2. two-2</span><br><span class="line">2. two</span><br><span class="line">    * two-1</span><br><span class="line">    - two-2</span><br></pre></td></tr></table></figure>
<p>Example:</p>
<ol>
<li>one<ol>
<li>one-1</li>
<li>two-2</li>
</ol>
</li>
<li>two<ul>
<li>two-1</li>
</ul>
<ul>
<li>two-2</li>
</ul>
</li>
</ol>
<h3><span id="15-nesting-list-with-code"><strong>15. Nesting list with code</strong></span></h3><p>changing a line + 2 TAB</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* one</span><br><span class="line"></span><br><span class="line">    int a &#x3D; 10;</span><br></pre></td></tr></table></figure>
<p>Example:</p>
<ul>
<li><p>one</p>
<p>  int a = 10;  </p>
</li>
</ul>
<h3><span id="16-latex"><strong>16. LaTeX</strong></span></h3><h3><span id="17-style-of-fonts"><strong>17. style of fonts</strong></span></h3><h4><span id="italic">italic</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)   *斜体*    (2)  &lt;i&gt;斜体&lt;&#x2F;i&gt;     (3)_斜体_</span><br></pre></td></tr></table></figure>
<p>Example:<br>(1)   <em>斜体</em>    (2)  <i>斜体</i>     (3)<em>斜体</em></p>
<h4><span id="boldface">boldface</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**加粗**</span><br></pre></td></tr></table></figure>
<p>Example:<br><strong>加粗</strong></p>
<h4><span id="italic-boldface">italic + boldface</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)  ***加粗+斜体***   (2)  **_加粗+斜体_**</span><br></pre></td></tr></table></figure>
<p>Example:<br>(1)  <strong><em>加粗+斜体</em></strong>   (2)  <strong><em>加粗+斜体</em></strong></p>
<h4><span id="delated-line">delated line</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>
<p>Example:<br><del>删除线</del></p>
<h4><span id="keyboard">keyboard</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;</span><br></pre></td></tr></table></figure>
<p>Example:<br><kbd>Ctrl</kbd></p>
<h3><span id="18-to-be-continue"><strong>18. To be continue</strong></span></h3>]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>新手入门</tag>
      </tags>
  </entry>
  <entry>
    <title>The first blog : Hello world</title>
    <url>/2020/03/18/The-first-blog-Hello-world/</url>
    <content><![CDATA[<!-- toc -->

<ul>
<li><a href="#_po-2首诗_"><em>PO 2首诗</em></a><ul>
<li><a href="#红瓦青垣">红瓦青垣</a></li>
<li><a href="#桥于江上冷月夜江">桥于江上，冷月夜江</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<h1><span id="po-2首诗"><em>PO 2首诗</em></span></h1><a id="more"></a>


<center>

<h3><span id="红瓦青垣">红瓦青垣</span></h3><p>夏晴，看桃霞卷云。<br>冬夜，品月雪凉风。<br>翠雨骤雨，垣墙默立。<br>云卷云舒，楼影悦动。<br>漫步楼宇庭轩，<br>壮志将栏杆拍遍。<br>逡巡杏林石原，<br>豁达挟飞仙遨游。<br>凭依墙落，温热岁月。<br>五十载过客学子思绪万千，<br>白驹过日夜军号嘹亮不绝。<br>古人力览卷帙哲思丘谷，<br>今士潜心文理考究人生。</p>
<hr>
<h3><span id="桥于江上冷月夜江">桥于江上，冷月夜江</span></h3><p>日，至江北寻好友相聚。<br>夜，独步于江浔，上桥。<br>江风透骨，风衣难挡。<br>隔岸灯影，明且长。<br>浓云轻笼长桥，缀月光。<br>眼迷蒙，思向远方。<br>青石板，黄土窑。黄河水，同有桥。<br>暮秋过，叶微黄。冬月至，雪苍茫。<br>隔水望，千帆远。一朝别，家命难忘。<br>冷夜月江，氤氲了日期，切盼归乡。</p>
</center>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>新手入门</tag>
      </tags>
  </entry>
</search>
